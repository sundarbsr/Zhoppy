{"version":3,"file":"index.js","sources":["../../lib/generation/util.ts","../../lib/generation/printer.ts","../../lib/generation/print.ts","../../lib/keywords.ts","../../lib/source/location.ts","../../lib/source/loc/kinds.ts","../../lib/source/loc/match.ts","../../lib/source/slice.ts","../../lib/source/loc/span.ts","../../lib/source/loc/offset.ts","../../lib/source/source.ts","../../lib/source/span-list.ts","../../lib/syntax-error.ts","../../lib/v1/visitor-keys.ts","../../lib/traversal/errors.ts","../../lib/traversal/path.ts","../../lib/traversal/traverse.ts","../../lib/traversal/walker.ts","../../lib/utils.ts","../../lib/v1/public-builders.ts","../../lib/v1/parser-builders.ts","../../lib/v1/legacy-interop.ts","../../lib/parser.ts","../../lib/parser/handlebars-node-visitors.ts","../../lib/parser/tokenizer-event-handlers.ts","../../lib/get-template-locals.ts","../../lib/v2/objects/node.ts","../../lib/v2/objects/args.ts","../../lib/v2/objects/attr-block.ts","../../lib/v2/objects/content.ts","../../lib/v2/objects/expr.ts","../../lib/v2/objects/internal-node.ts","../../lib/v2/objects/refs.ts","../../lib/v2/objects/resolution.ts","../../lib/symbol-table.ts","../../lib/v2/builders.ts","../../lib/v2/loose-resolution.ts","../../lib/v2/normalize.ts"],"sourcesContent":["import type * as ASTv1 from '../v1/api';\n\nconst enum Char {\n  NBSP = 0xa0,\n  QUOT = 0x22,\n  LT = 0x3c,\n  GT = 0x3e,\n  AMP = 0x26,\n}\n\nconst ATTR_VALUE_REGEX_TEST = /[\"&\\xA0]/u;\nconst ATTR_VALUE_REGEX_REPLACE = new RegExp(ATTR_VALUE_REGEX_TEST.source, 'gu');\n\nconst TEXT_REGEX_TEST = /[&<>\\xA0]/u;\nconst TEXT_REGEX_REPLACE = new RegExp(TEXT_REGEX_TEST.source, 'gu');\n\nfunction attrValueReplacer(char: string): string {\n  switch (char.charCodeAt(0)) {\n    case Char.NBSP:\n      return '&nbsp;';\n    case Char.QUOT:\n      return '&quot;';\n    case Char.AMP:\n      return '&amp;';\n    default:\n      return char;\n  }\n}\n\nfunction textReplacer(char: string): string {\n  switch (char.charCodeAt(0)) {\n    case Char.NBSP:\n      return '&nbsp;';\n    case Char.AMP:\n      return '&amp;';\n    case Char.LT:\n      return '&lt;';\n    case Char.GT:\n      return '&gt;';\n    default:\n      return char;\n  }\n}\n\nexport function escapeAttrValue(attrValue: string): string {\n  if (ATTR_VALUE_REGEX_TEST.test(attrValue)) {\n    return attrValue.replace(ATTR_VALUE_REGEX_REPLACE, attrValueReplacer);\n  }\n  return attrValue;\n}\n\nexport function escapeText(text: string): string {\n  if (TEXT_REGEX_TEST.test(text)) {\n    return text.replace(TEXT_REGEX_REPLACE, textReplacer);\n  }\n  return text;\n}\n\nexport function sortByLoc(a: ASTv1.Node, b: ASTv1.Node): -1 | 0 | 1 {\n  // If either is invisible, don't try to order them\n  if (a.loc.isInvisible || b.loc.isInvisible) {\n    return 0;\n  }\n\n  if (a.loc.startPosition.line < b.loc.startPosition.line) {\n    return -1;\n  }\n\n  if (\n    a.loc.startPosition.line === b.loc.startPosition.line &&\n    a.loc.startPosition.column < b.loc.startPosition.column\n  ) {\n    return -1;\n  }\n\n  if (\n    a.loc.startPosition.line === b.loc.startPosition.line &&\n    a.loc.startPosition.column === b.loc.startPosition.column\n  ) {\n    return 0;\n  }\n\n  return 1;\n}\n","import type * as ASTv1 from '../v1/api';\n\nimport { escapeAttrValue, escapeText, sortByLoc } from './util';\n\nexport const voidMap = new Set([\n  'area',\n  'base',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'hr',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr',\n]);\n\nexport function getVoidTags() {\n  return [...voidMap];\n}\n\nconst NON_WHITESPACE = /^\\S/u;\n\nexport interface PrinterOptions {\n  entityEncoding: ASTv1.EntityEncodingState;\n\n  /**\n   * Used to override the mechanism of printing a given AST.Node.\n   *\n   * This will generally only be useful to source -> source codemods\n   * where you would like to specialize/override the way a given node is\n   * printed (e.g. you would like to preserve as much of the original\n   * formatting as possible).\n   *\n   * When the provided override returns undefined, the default built in printing\n   * will be done for the AST.Node.\n   *\n   * @param ast the ast node to be printed\n   * @param options the options specified during the print() invocation\n   */\n  override?(ast: ASTv1.Node, options: PrinterOptions): void | string;\n}\n\n/**\n * Examples when true:\n *  - link\n *  - liNK\n *\n * Examples when false:\n *  - Link (component)\n */\nexport function isVoidTag(tag: string): boolean {\n  return voidMap.has(tag.toLowerCase()) && tag[0]?.toLowerCase() === tag[0];\n}\n\nexport default class Printer {\n  private buffer = '';\n  private options: PrinterOptions;\n\n  constructor(options: PrinterOptions) {\n    this.options = options;\n  }\n\n  /*\n    This is used by _all_ methods on this Printer class that add to `this.buffer`,\n    it allows consumers of the printer to use alternate string representations for\n    a given node.\n\n    The primary use case for this are things like source -> source codemod utilities.\n    For example, ember-template-recast attempts to always preserve the original string\n    formatting in each AST node if no modifications are made to it.\n  */\n  handledByOverride(node: ASTv1.Node, ensureLeadingWhitespace = false): boolean {\n    if (this.options.override !== undefined) {\n      let result = this.options.override(node, this.options);\n      if (typeof result === 'string') {\n        if (ensureLeadingWhitespace && NON_WHITESPACE.test(result)) {\n          result = ` ${result}`;\n        }\n\n        this.buffer += result;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  Node(node: ASTv1.Node): void {\n    switch (node.type) {\n      case 'MustacheStatement':\n      case 'BlockStatement':\n      case 'MustacheCommentStatement':\n      case 'CommentStatement':\n      case 'TextNode':\n      case 'ElementNode':\n      case 'AttrNode':\n      case 'Block':\n      case 'Template':\n        return this.TopLevelStatement(node);\n      case 'StringLiteral':\n      case 'BooleanLiteral':\n      case 'NumberLiteral':\n      case 'UndefinedLiteral':\n      case 'NullLiteral':\n      case 'PathExpression':\n      case 'SubExpression':\n        return this.Expression(node);\n      case 'ConcatStatement':\n        // should have an AttrNode parent\n        return this.ConcatStatement(node);\n      case 'Hash':\n        return this.Hash(node);\n      case 'HashPair':\n        return this.HashPair(node);\n      case 'ElementModifierStatement':\n        return this.ElementModifierStatement(node);\n    }\n  }\n\n  Expression(expression: ASTv1.Expression): void {\n    switch (expression.type) {\n      case 'StringLiteral':\n      case 'BooleanLiteral':\n      case 'NumberLiteral':\n      case 'UndefinedLiteral':\n      case 'NullLiteral':\n        return this.Literal(expression);\n      case 'PathExpression':\n        return this.PathExpression(expression);\n      case 'SubExpression':\n        return this.SubExpression(expression);\n    }\n  }\n\n  Literal(literal: ASTv1.Literal): void {\n    switch (literal.type) {\n      case 'StringLiteral':\n        return this.StringLiteral(literal);\n      case 'BooleanLiteral':\n        return this.BooleanLiteral(literal);\n      case 'NumberLiteral':\n        return this.NumberLiteral(literal);\n      case 'UndefinedLiteral':\n        return this.UndefinedLiteral(literal);\n      case 'NullLiteral':\n        return this.NullLiteral(literal);\n    }\n  }\n\n  TopLevelStatement(statement: ASTv1.TopLevelStatement | ASTv1.Template | ASTv1.AttrNode): void {\n    switch (statement.type) {\n      case 'MustacheStatement':\n        return this.MustacheStatement(statement);\n      case 'BlockStatement':\n        return this.BlockStatement(statement);\n      case 'MustacheCommentStatement':\n        return this.MustacheCommentStatement(statement);\n      case 'CommentStatement':\n        return this.CommentStatement(statement);\n      case 'TextNode':\n        return this.TextNode(statement);\n      case 'ElementNode':\n        return this.ElementNode(statement);\n      case 'Block':\n        return this.Block(statement);\n      case 'Template':\n        return this.Template(statement);\n      case 'AttrNode':\n        // should have element\n        return this.AttrNode(statement);\n    }\n  }\n\n  Template(template: ASTv1.Template): void {\n    this.TopLevelStatements(template.body);\n  }\n\n  Block(block: ASTv1.Block): void {\n    /*\n      When processing a template like:\n\n      ```hbs\n      {{#if whatever}}\n        whatever\n      {{else if somethingElse}}\n        something else\n      {{else}}\n        fallback\n      {{/if}}\n      ```\n\n      The AST still _effectively_ looks like:\n\n      ```hbs\n      {{#if whatever}}\n        whatever\n      {{else}}{{#if somethingElse}}\n        something else\n      {{else}}\n        fallback\n      {{/if}}{{/if}}\n      ```\n\n      The only way we can tell if that is the case is by checking for\n      `block.chained`, but unfortunately when the actual statements are\n      processed the `block.body[0]` node (which will always be a\n      `BlockStatement`) has no clue that its ancestor `Block` node was\n      chained.\n\n      This \"forwards\" the `chained` setting so that we can check\n      it later when processing the `BlockStatement`.\n    */\n    if (block.chained) {\n      let firstChild = block.body[0] as ASTv1.BlockStatement;\n      firstChild.chained = true;\n    }\n\n    if (this.handledByOverride(block)) {\n      return;\n    }\n\n    this.TopLevelStatements(block.body);\n  }\n\n  TopLevelStatements(statements: ASTv1.TopLevelStatement[]): void {\n    statements.forEach((statement) => this.TopLevelStatement(statement));\n  }\n\n  ElementNode(el: ASTv1.ElementNode): void {\n    if (this.handledByOverride(el)) {\n      return;\n    }\n\n    this.OpenElementNode(el);\n    this.TopLevelStatements(el.children);\n    this.CloseElementNode(el);\n  }\n\n  OpenElementNode(el: ASTv1.ElementNode): void {\n    this.buffer += `<${el.tag}`;\n    const parts = [...el.attributes, ...el.modifiers, ...el.comments].sort(sortByLoc);\n\n    for (const part of parts) {\n      this.buffer += ' ';\n      switch (part.type) {\n        case 'AttrNode':\n          this.AttrNode(part);\n          break;\n        case 'ElementModifierStatement':\n          this.ElementModifierStatement(part);\n          break;\n        case 'MustacheCommentStatement':\n          this.MustacheCommentStatement(part);\n          break;\n      }\n    }\n    if (el.blockParams.length) {\n      this.BlockParams(el.blockParams);\n    }\n    if (el.selfClosing) {\n      this.buffer += ' /';\n    }\n    this.buffer += '>';\n  }\n\n  CloseElementNode(el: ASTv1.ElementNode): void {\n    if (el.selfClosing || isVoidTag(el.tag)) {\n      return;\n    }\n    this.buffer += `</${el.tag}>`;\n  }\n\n  AttrNode(attr: ASTv1.AttrNode): void {\n    if (this.handledByOverride(attr)) {\n      return;\n    }\n\n    let { name, value } = attr;\n\n    this.buffer += name;\n    if (value.type !== 'TextNode' || value.chars.length > 0) {\n      this.buffer += '=';\n      this.AttrNodeValue(value);\n    }\n  }\n\n  AttrNodeValue(value: ASTv1.AttrNode['value']): void {\n    if (value.type === 'TextNode') {\n      this.buffer += '\"';\n      this.TextNode(value, true);\n      this.buffer += '\"';\n    } else {\n      this.Node(value);\n    }\n  }\n\n  TextNode(text: ASTv1.TextNode, isAttr?: boolean): void {\n    if (this.handledByOverride(text)) {\n      return;\n    }\n\n    if (this.options.entityEncoding === 'raw') {\n      this.buffer += text.chars;\n    } else if (isAttr) {\n      this.buffer += escapeAttrValue(text.chars);\n    } else {\n      this.buffer += escapeText(text.chars);\n    }\n  }\n\n  MustacheStatement(mustache: ASTv1.MustacheStatement): void {\n    if (this.handledByOverride(mustache)) {\n      return;\n    }\n\n    this.buffer += mustache.trusting ? '{{{' : '{{';\n\n    if (mustache.strip.open) {\n      this.buffer += '~';\n    }\n\n    this.Expression(mustache.path);\n    this.Params(mustache.params);\n    this.Hash(mustache.hash);\n\n    if (mustache.strip.close) {\n      this.buffer += '~';\n    }\n\n    this.buffer += mustache.trusting ? '}}}' : '}}';\n  }\n\n  BlockStatement(block: ASTv1.BlockStatement): void {\n    if (this.handledByOverride(block)) {\n      return;\n    }\n\n    if (block.chained) {\n      this.buffer += block.inverseStrip.open ? '{{~' : '{{';\n      this.buffer += 'else ';\n    } else {\n      this.buffer += block.openStrip.open ? '{{~#' : '{{#';\n    }\n\n    this.Expression(block.path);\n    this.Params(block.params);\n    this.Hash(block.hash);\n    if (block.program.blockParams.length) {\n      this.BlockParams(block.program.blockParams);\n    }\n\n    if (block.chained) {\n      this.buffer += block.inverseStrip.close ? '~}}' : '}}';\n    } else {\n      this.buffer += block.openStrip.close ? '~}}' : '}}';\n    }\n\n    this.Block(block.program);\n\n    if (block.inverse) {\n      if (!block.inverse.chained) {\n        this.buffer += block.inverseStrip.open ? '{{~' : '{{';\n        this.buffer += 'else';\n        this.buffer += block.inverseStrip.close ? '~}}' : '}}';\n      }\n\n      this.Block(block.inverse);\n    }\n\n    if (!block.chained) {\n      this.buffer += block.closeStrip.open ? '{{~/' : '{{/';\n      this.Expression(block.path);\n      this.buffer += block.closeStrip.close ? '~}}' : '}}';\n    }\n  }\n\n  BlockParams(blockParams: string[]): void {\n    this.buffer += ` as |${blockParams.join(' ')}|`;\n  }\n\n  ConcatStatement(concat: ASTv1.ConcatStatement): void {\n    if (this.handledByOverride(concat)) {\n      return;\n    }\n\n    this.buffer += '\"';\n    concat.parts.forEach((part) => {\n      if (part.type === 'TextNode') {\n        this.TextNode(part, true);\n      } else {\n        this.Node(part);\n      }\n    });\n    this.buffer += '\"';\n  }\n\n  MustacheCommentStatement(comment: ASTv1.MustacheCommentStatement): void {\n    if (this.handledByOverride(comment)) {\n      return;\n    }\n\n    this.buffer += `{{!--${comment.value}--}}`;\n  }\n\n  ElementModifierStatement(mod: ASTv1.ElementModifierStatement): void {\n    if (this.handledByOverride(mod)) {\n      return;\n    }\n\n    this.buffer += '{{';\n    this.Expression(mod.path);\n    this.Params(mod.params);\n    this.Hash(mod.hash);\n    this.buffer += '}}';\n  }\n\n  CommentStatement(comment: ASTv1.CommentStatement): void {\n    if (this.handledByOverride(comment)) {\n      return;\n    }\n\n    this.buffer += `<!--${comment.value}-->`;\n  }\n\n  PathExpression(path: ASTv1.PathExpression): void {\n    if (this.handledByOverride(path)) {\n      return;\n    }\n\n    this.buffer += path.original;\n  }\n\n  SubExpression(sexp: ASTv1.SubExpression): void {\n    if (this.handledByOverride(sexp)) {\n      return;\n    }\n\n    this.buffer += '(';\n    this.Expression(sexp.path);\n    this.Params(sexp.params);\n    this.Hash(sexp.hash);\n    this.buffer += ')';\n  }\n\n  Params(params: ASTv1.Expression[]): void {\n    // TODO: implement a top level Params AST node (just like the Hash object)\n    // so that this can also be overridden\n    if (params.length) {\n      params.forEach((param) => {\n        this.buffer += ' ';\n        this.Expression(param);\n      });\n    }\n  }\n\n  Hash(hash: ASTv1.Hash): void {\n    if (this.handledByOverride(hash, true)) {\n      return;\n    }\n\n    hash.pairs.forEach((pair) => {\n      this.buffer += ' ';\n      this.HashPair(pair);\n    });\n  }\n\n  HashPair(pair: ASTv1.HashPair): void {\n    if (this.handledByOverride(pair)) {\n      return;\n    }\n\n    this.buffer += pair.key;\n    this.buffer += '=';\n    this.Node(pair.value);\n  }\n\n  StringLiteral(str: ASTv1.StringLiteral): void {\n    if (this.handledByOverride(str)) {\n      return;\n    }\n\n    this.buffer += JSON.stringify(str.value);\n  }\n\n  BooleanLiteral(bool: ASTv1.BooleanLiteral): void {\n    if (this.handledByOverride(bool)) {\n      return;\n    }\n\n    this.buffer += bool.value;\n  }\n\n  NumberLiteral(number: ASTv1.NumberLiteral): void {\n    if (this.handledByOverride(number)) {\n      return;\n    }\n\n    this.buffer += number.value;\n  }\n\n  UndefinedLiteral(node: ASTv1.UndefinedLiteral): void {\n    if (this.handledByOverride(node)) {\n      return;\n    }\n\n    this.buffer += 'undefined';\n  }\n\n  NullLiteral(node: ASTv1.NullLiteral): void {\n    if (this.handledByOverride(node)) {\n      return;\n    }\n\n    this.buffer += 'null';\n  }\n\n  print(node: ASTv1.Node): string {\n    let { options } = this;\n\n    if (options.override) {\n      let result = options.override(node, options);\n\n      if (result !== undefined) {\n        return result;\n      }\n    }\n\n    this.buffer = '';\n    this.Node(node);\n    return this.buffer;\n  }\n}\n","import type * as ASTv1 from '../v1/api';\nimport type { PrinterOptions } from './printer';\n\nimport Printer from './printer';\n\nexport default function build(\n  ast: ASTv1.Node,\n  options: PrinterOptions = { entityEncoding: 'transformed' }\n): string {\n  if (!ast) {\n    return '';\n  }\n\n  let printer = new Printer(options);\n  return printer.print(ast);\n}\n","export type Keywords = keyof typeof KEYWORDS_TYPES;\nexport type KeywordType = 'Call' | 'Modifier' | 'Append' | 'Block';\n\nexport function isKeyword(word: string): word is Keywords;\nexport function isKeyword(word: string, type: KeywordType): boolean;\nexport function isKeyword(word: string, type?: KeywordType): boolean {\n  if (word in KEYWORDS_TYPES) {\n    if (type === undefined) {\n      return true;\n    } else {\n      let types = KEYWORDS_TYPES[word as Keywords];\n      // This seems like a TypeScript bug – it inferred types as never[]?\n      return types.includes(type as never);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n * This includes the full list of keywords currently in use in the template\n * language, and where their valid usages are.\n */\nexport const KEYWORDS_TYPES = {\n  action: ['Call', 'Modifier'],\n  component: ['Call', 'Append', 'Block'],\n  debugger: ['Append'],\n  'each-in': ['Block'],\n  each: ['Block'],\n  'has-block-params': ['Call', 'Append'],\n  'has-block': ['Call', 'Append'],\n  helper: ['Call', 'Append'],\n  if: ['Call', 'Append', 'Block'],\n  'in-element': ['Block'],\n  let: ['Block'],\n  log: ['Call', 'Append'],\n  modifier: ['Call', 'Modifier'],\n  mount: ['Append'],\n  mut: ['Call', 'Append'],\n  outlet: ['Append'],\n  readonly: ['Call', 'Append'],\n  unbound: ['Call', 'Append'],\n  unless: ['Call', 'Append', 'Block'],\n  yield: ['Append'],\n} satisfies Record<string, readonly KeywordType[]>;\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { isPresentArray } from '@glimmer/util';\n\nimport type { SourceSpan } from './span';\n\nexport interface SourceLocation {\n  start: SourcePosition;\n  end: SourcePosition;\n}\n\nexport interface SourcePosition {\n  /** >= 1 */\n  line: number;\n  /** >= 0 */\n  column: number;\n}\n\nexport const UNKNOWN_POSITION = Object.freeze({\n  line: 1,\n  column: 0,\n} as const);\n\nexport const SYNTHETIC_LOCATION = Object.freeze({\n  source: '(synthetic)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\n/** @deprecated */\nexport const SYNTHETIC = SYNTHETIC_LOCATION;\n\nexport const TEMPORARY_LOCATION = Object.freeze({\n  source: '(temporary)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\nexport const NON_EXISTENT_LOCATION = Object.freeze({\n  source: '(nonexistent)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\nexport const BROKEN_LOCATION = Object.freeze({\n  source: '(broken)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\nexport type LocatedWithSpan = { offsets: SourceSpan };\nexport type LocatedWithOptionalSpan = { offsets: SourceSpan | null };\n\nexport type LocatedWithPositions = { loc: SourceLocation };\nexport type LocatedWithOptionalPositions = { loc?: SourceLocation };\n\nexport function isLocatedWithPositionsArray(\n  location: LocatedWithOptionalPositions[]\n): location is PresentArray<LocatedWithPositions> {\n  return isPresentArray(location) && location.every(isLocatedWithPositions);\n}\n\nexport function isLocatedWithPositions(\n  location: LocatedWithOptionalPositions\n): location is LocatedWithPositions {\n  return location.loc !== undefined;\n}\n\nexport type HasSourceLocation =\n  | SourceLocation\n  | LocatedWithPositions\n  | PresentArray<LocatedWithPositions>;\n\nexport type MaybeHasSourceLocation =\n  | null\n  | LocatedWithOptionalPositions\n  | LocatedWithOptionalPositions[];\n","export enum OffsetKind {\n  /**\n   * We have already computed the character position of this offset or span.\n   */\n  CharPosition = 'CharPosition',\n\n  /**\n   * This offset or span was instantiated with a Handlebars SourcePosition or SourceLocation. Its\n   * character position will be computed on demand.\n   */\n  HbsPosition = 'HbsPosition',\n\n  /**\n   * for (rare) situations where a node is created but there was no source location (e.g. the name\n   * \"default\" in default blocks when the word \"default\" never appeared in source). This is used\n   * by the internals when there is a legitimate reason for the internals to synthesize a node\n   * with no location.\n   */\n  InternalsSynthetic = 'InternalsSynthetic',\n  /**\n   * For situations where a node represents zero parts of the source (for example, empty arguments).\n   * In general, we attempt to assign these nodes *some* position (empty arguments can be\n   * positioned immediately after the callee), but it's not always possible\n   */\n  NonExistent = 'NonExistent',\n  /**\n   * For situations where a source location was expected, but it didn't correspond to the node in\n   * the source. This happens if a plugin creates broken locations.\n   */\n  Broken = 'Broken',\n}\n","import { assert, isPresentArray } from '@glimmer/util';\n\nimport type { CharPosition, HbsPosition, InvisiblePosition, PositionData } from './offset';\n\nimport { OffsetKind } from './kinds';\n\n/**\n * This file implements the DSL used by span and offset in places where they need to exhaustively\n * consider all combinations of states (Handlebars offsets, character offsets and invisible/broken\n * offsets).\n *\n * It's probably overkill, but it makes the code that uses it clear. It could be refactored or\n * removed.\n */\n\nexport const MatchAny = 'MATCH_ANY';\nexport type MatchAny = 'MATCH_ANY';\n\ntype Matches =\n  | 'Char,Hbs'\n  | 'Hbs,Char'\n  | 'Hbs,Hbs'\n  | 'Char,Char'\n  | 'Invisible,Any'\n  | 'Any,Invisible';\n\nexport const IsInvisible = 'IS_INVISIBLE';\nexport type IsInvisible = 'IS_INVISIBLE';\n\ntype Pattern = OffsetKind | IsInvisible | MatchAny;\n\nclass WhenList<Out> {\n  _whens: When<Out>[];\n\n  constructor(whens: When<Out>[]) {\n    this._whens = whens;\n  }\n\n  first(kind: OffsetKind): Out | null {\n    for (const when of this._whens) {\n      const value = when.match(kind);\n      if (isPresentArray(value)) {\n        return value[0];\n      }\n    }\n\n    return null;\n  }\n}\n\nclass When<Out> {\n  _map: Map<Pattern, Out> = new Map();\n\n  get(pattern: Pattern, or: () => Out): Out {\n    let value = this._map.get(pattern);\n\n    if (value) {\n      return value;\n    }\n\n    value = or();\n\n    this._map.set(pattern, value);\n\n    return value;\n  }\n\n  add(pattern: Pattern, out: Out): void {\n    this._map.set(pattern, out);\n  }\n\n  match(kind: OffsetKind): Out[] {\n    const pattern = patternFor(kind);\n\n    const out: Out[] = [];\n\n    const exact = this._map.get(pattern);\n    const fallback = this._map.get(MatchAny);\n\n    if (exact) {\n      out.push(exact);\n    }\n\n    if (fallback) {\n      out.push(fallback);\n    }\n\n    return out;\n  }\n}\n\ntype ExhaustiveCheck<Out, In extends Matches, Removed extends Matches> = Exclude<\n  In,\n  Removed\n> extends never\n  ? ExhaustiveMatcher<Out>\n  : Matcher<Out, Exclude<In, Removed>>;\n\nexport type MatchFn<Out> = (left: PositionData, right: PositionData) => Out;\n\ninterface ExhaustiveMatcher<Out> {\n  check(): MatchFn<Out>;\n}\n\nexport function match<Out>(callback: (m: Matcher<Out>) => ExhaustiveMatcher<Out>): MatchFn<Out> {\n  return callback(new Matcher()).check();\n}\n\nclass Matcher<Out, M extends Matches = Matches> {\n  _whens: When<When<(left: PositionData, right: PositionData) => Out>> = new When();\n\n  /**\n   * You didn't exhaustively match all possibilities.\n   */\n  protected check(): MatchFn<Out> {\n    return (left, right) => this.matchFor(left.kind, right.kind)(left, right);\n  }\n\n  private matchFor(\n    left: OffsetKind,\n    right: OffsetKind\n  ): (left: PositionData, right: PositionData) => Out {\n    const nesteds = this._whens.match(left);\n\n    assert(\n      isPresentArray(nesteds),\n      `no match defined for (${left}, ${right}) and no AnyMatch defined either`\n    );\n\n    const callback = new WhenList(nesteds).first(right);\n\n    assert(\n      callback !== null,\n      `no match defined for (${left}, ${right}) and no AnyMatch defined either`\n    );\n\n    return callback;\n  }\n\n  // This big block is the bulk of the heavy lifting in this file. It facilitates exhaustiveness\n  // checking so that matchers can ensure they've actually covered all the cases (and TypeScript\n  // will treat it as an exhaustive match).\n  when(\n    left: OffsetKind.CharPosition,\n    right: OffsetKind.HbsPosition,\n    callback: (left: CharPosition, right: HbsPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Char,Hbs'>;\n  when(\n    left: OffsetKind.HbsPosition,\n    right: OffsetKind.CharPosition,\n    callback: (left: HbsPosition, right: CharPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Hbs,Char'>;\n  when(\n    left: OffsetKind.HbsPosition,\n    right: OffsetKind.HbsPosition,\n    callback: (left: HbsPosition, right: HbsPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Hbs,Hbs'>;\n  when(\n    left: OffsetKind.CharPosition,\n    right: OffsetKind.CharPosition,\n    callback: (left: CharPosition, right: CharPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Char,Char'>;\n  when(\n    left: IsInvisible,\n    right: MatchAny,\n    callback: (left: InvisiblePosition, right: PositionData) => Out\n  ): Matcher<Out, Exclude<M, 'Invisible,Any'>>;\n  when(\n    left: MatchAny,\n    right: IsInvisible,\n    callback: (left: PositionData, right: InvisiblePosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Any,Invisible'>;\n  when(\n    left: MatchAny,\n    right: MatchAny,\n    callback: (left: PositionData, right: PositionData) => Out\n  ): ExhaustiveMatcher<Out>;\n  when(\n    left: Pattern,\n    right: Pattern,\n\n    callback: (left: any, right: any) => Out\n  ): Matcher<Out, Matches> | ExhaustiveMatcher<Out> {\n    this._whens.get(left, () => new When()).add(right, callback);\n\n    return this;\n  }\n}\n\nfunction patternFor(kind: OffsetKind): Pattern {\n  switch (kind) {\n    case OffsetKind.Broken:\n    case OffsetKind.InternalsSynthetic:\n    case OffsetKind.NonExistent:\n      return IsInvisible;\n    default:\n      return kind;\n  }\n}\n","import * as src from './api';\n\nexport type SerializedSourceSlice<Chars extends string = string> = [\n  chars: Chars,\n  span: src.SerializedSourceSpan,\n];\n\nexport class SourceSlice<Chars extends string = string> {\n  static synthetic<S extends string>(chars: S): SourceSlice<S> {\n    let offsets = src.SourceSpan.synthetic(chars);\n    return new SourceSlice({ loc: offsets, chars: chars });\n  }\n\n  static load(source: src.Source, slice: SerializedSourceSlice): SourceSlice {\n    return new SourceSlice({\n      loc: src.SourceSpan.load(source, slice[1]),\n      chars: slice[0],\n    });\n  }\n\n  readonly chars: Chars;\n  readonly loc: src.SourceSpan;\n\n  constructor(options: { loc: src.SourceSpan; chars: Chars }) {\n    this.loc = options.loc;\n    this.chars = options.chars;\n  }\n\n  getString(): string {\n    return this.chars;\n  }\n\n  serialize(): SerializedSourceSlice<Chars> {\n    return [this.chars, this.loc.serialize()];\n  }\n}\n","import { LOCAL_DEBUG } from '@glimmer/local-debug-flags';\nimport { assertNever } from '@glimmer/util';\n\nimport type { SourceLocation, SourcePosition } from '../location';\nimport type { Source } from '../source';\nimport type { MatchFn } from './match';\nimport type { AnyPosition, SourceOffset } from './offset';\n\nimport { BROKEN_LOCATION, NON_EXISTENT_LOCATION } from '../location';\nimport { SourceSlice } from '../slice';\nimport { OffsetKind } from './kinds';\nimport { IsInvisible, match, MatchAny } from './match';\nimport { BROKEN, CharPosition, HbsPosition, InvisiblePosition } from './offset';\n\n/**\n * All spans have these details in common.\n */\ninterface SpanData {\n  readonly kind: OffsetKind;\n\n  /**\n   * Convert this span into a string. If the span is broken, return `''`.\n   */\n  asString(): string;\n\n  /**\n   * Gets the module the span was located in.\n   */\n  getModule(): string;\n\n  /**\n   * Get the starting position for this span. Try to avoid creating new position objects, as they\n   * cache computations.\n   */\n  getStart(): AnyPosition;\n\n  /**\n   * Get the ending position for this span. Try to avoid creating new position objects, as they\n   * cache computations.\n   */\n  getEnd(): AnyPosition;\n\n  /**\n   * Compute the `SourceLocation` for this span, returned as an instance of `HbsSpan`.\n   */\n  toHbsSpan(): HbsSpan | null;\n\n  /**\n   * For compatibility, whenever the `start` or `end` of a {@see SourceOffset} changes, spans are\n   * notified of the change so they can update themselves. This shouldn't happen outside of AST\n   * plugins.\n   */\n  locDidUpdate(changes: { start?: SourcePosition; end?: SourcePosition }): void;\n\n  /**\n   * Serialize into a {@see SerializedSourceSpan}, which is compact and designed for readability in\n   * context like AST Explorer. If you need a {@see SourceLocation}, use {@see toJSON}.\n   */\n  serialize(): SerializedSourceSpan;\n}\n\n/**\n * A `SourceSpan` object represents a span of characters inside of a template source.\n *\n * There are three kinds of `SourceSpan` objects:\n *\n * - `ConcreteSourceSpan`, which contains byte offsets\n * - `LazySourceSpan`, which contains `SourceLocation`s from the Handlebars AST, which can be\n *   converted to byte offsets on demand.\n * - `InvisibleSourceSpan`, which represent source strings that aren't present in the source,\n *   because:\n *     - they were created synthetically\n *     - their location is nonsensical (the span is broken)\n *     - they represent nothing in the source (this currently happens only when a bug in the\n *       upstream Handlebars parser fails to assign a location to empty blocks)\n *\n * At a high level, all `SourceSpan` objects provide:\n *\n * - byte offsets\n * - source in column and line format\n *\n * And you can do these operations on `SourceSpan`s:\n *\n * - collapse it to a `SourceSpan` representing its starting or ending position\n * - slice out some characters, optionally skipping some characters at the beginning or end\n * - create a new `SourceSpan` with a different starting or ending offset\n *\n * All SourceSpan objects implement `SourceLocation`, for compatibility. All SourceSpan\n * objects have a `toJSON` that emits `SourceLocation`, also for compatibility.\n *\n * For compatibility, subclasses of `AbstractSourceSpan` must implement `locDidUpdate`, which\n * happens when an AST plugin attempts to modify the `start` or `end` of a span directly.\n *\n * The goal is to avoid creating any problems for use-cases like AST Explorer.\n */\nexport class SourceSpan implements SourceLocation {\n  static get NON_EXISTENT(): SourceSpan {\n    return new InvisibleSpan(OffsetKind.NonExistent, NON_EXISTENT_LOCATION).wrap();\n  }\n\n  static load(source: Source, serialized: SerializedSourceSpan): SourceSpan {\n    if (typeof serialized === 'number') {\n      return SourceSpan.forCharPositions(source, serialized, serialized);\n    } else if (typeof serialized === 'string') {\n      return SourceSpan.synthetic(serialized);\n    } else if (Array.isArray(serialized)) {\n      return SourceSpan.forCharPositions(source, serialized[0], serialized[1]);\n    } else if (serialized === OffsetKind.NonExistent) {\n      return SourceSpan.NON_EXISTENT;\n    } else if (serialized === OffsetKind.Broken) {\n      return SourceSpan.broken(BROKEN_LOCATION);\n    }\n\n    assertNever(serialized);\n  }\n\n  static forHbsLoc(source: Source, loc: SourceLocation): SourceSpan {\n    const start = new HbsPosition(source, loc.start);\n    const end = new HbsPosition(source, loc.end);\n    return new HbsSpan(source, { start, end }, loc).wrap();\n  }\n\n  static forCharPositions(source: Source, startPos: number, endPos: number): SourceSpan {\n    const start = new CharPosition(source, startPos);\n    const end = new CharPosition(source, endPos);\n\n    return new CharPositionSpan(source, { start, end }).wrap();\n  }\n\n  static synthetic(chars: string): SourceSpan {\n    return new InvisibleSpan(OffsetKind.InternalsSynthetic, NON_EXISTENT_LOCATION, chars).wrap();\n  }\n\n  static broken(pos: SourceLocation = BROKEN_LOCATION): SourceSpan {\n    return new InvisibleSpan(OffsetKind.Broken, pos).wrap();\n  }\n\n  readonly isInvisible: boolean;\n\n  constructor(private data: SpanData & AnySpan) {\n    this.isInvisible =\n      data.kind !== OffsetKind.CharPosition && data.kind !== OffsetKind.HbsPosition;\n  }\n\n  getStart(): SourceOffset {\n    return this.data.getStart().wrap();\n  }\n\n  getEnd(): SourceOffset {\n    return this.data.getEnd().wrap();\n  }\n\n  get loc(): SourceLocation {\n    const span = this.data.toHbsSpan();\n    return span === null ? BROKEN_LOCATION : span.toHbsLoc();\n  }\n\n  get module(): string {\n    return this.data.getModule();\n  }\n\n  /**\n   * Get the starting `SourcePosition` for this `SourceSpan`, lazily computing it if needed.\n   */\n  get startPosition(): SourcePosition {\n    return this.loc.start;\n  }\n\n  /**\n   * Get the ending `SourcePosition` for this `SourceSpan`, lazily computing it if needed.\n   */\n  get endPosition(): SourcePosition {\n    return this.loc.end;\n  }\n\n  /**\n   * Support converting ASTv1 nodes into a serialized format using JSON.stringify.\n   */\n  toJSON(): SourceLocation {\n    return this.loc;\n  }\n\n  /**\n   * Create a new span with the current span's end and a new beginning.\n   */\n  withStart(other: SourceOffset): SourceSpan {\n    return span(other.data, this.data.getEnd());\n  }\n\n  /**\n   * Create a new span with the current span's beginning and a new ending.\n   */\n  withEnd(other: SourceOffset): SourceSpan {\n    return span(this.data.getStart(), other.data);\n  }\n\n  asString(): string {\n    return this.data.asString();\n  }\n\n  /**\n   * Convert this `SourceSpan` into a `SourceSlice`. In debug mode, this method optionally checks\n   * that the byte offsets represented by this `SourceSpan` actually correspond to the expected\n   * string.\n   */\n  toSlice(expected?: string): SourceSlice {\n    const chars = this.data.asString();\n\n    if (import.meta.env.DEV) {\n      if (expected !== undefined && chars !== expected) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `unexpectedly found ${JSON.stringify(\n            chars\n          )} when slicing source, but expected ${JSON.stringify(expected)}`\n        );\n      }\n    }\n\n    return new SourceSlice({\n      loc: this,\n      chars: expected || chars,\n    });\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use startPosition instead\n   */\n  get start(): SourcePosition {\n    return this.loc.start;\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use withStart instead\n   */\n  set start(position: SourcePosition) {\n    this.data.locDidUpdate({ start: position });\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use endPosition instead\n   */\n  get end(): SourcePosition {\n    return this.loc.end;\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use withEnd instead\n   */\n  set end(position: SourcePosition) {\n    this.data.locDidUpdate({ end: position });\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use module instead\n   */\n  get source(): string {\n    return this.module;\n  }\n\n  collapse(where: 'start' | 'end'): SourceSpan {\n    switch (where) {\n      case 'start':\n        return this.getStart().collapsed();\n      case 'end':\n        return this.getEnd().collapsed();\n    }\n  }\n\n  extend(other: SourceSpan): SourceSpan {\n    return span(this.data.getStart(), other.data.getEnd());\n  }\n\n  serialize(): SerializedSourceSpan {\n    return this.data.serialize();\n  }\n\n  slice({ skipStart = 0, skipEnd = 0 }: { skipStart?: number; skipEnd?: number }): SourceSpan {\n    return span(this.getStart().move(skipStart).data, this.getEnd().move(-skipEnd).data);\n  }\n\n  sliceStartChars({ skipStart = 0, chars }: { skipStart?: number; chars: number }): SourceSpan {\n    return span(this.getStart().move(skipStart).data, this.getStart().move(skipStart + chars).data);\n  }\n\n  sliceEndChars({ skipEnd = 0, chars }: { skipEnd?: number; chars: number }): SourceSpan {\n    return span(this.getEnd().move(skipEnd - chars).data, this.getStart().move(-skipEnd).data);\n  }\n}\n\ntype AnySpan = HbsSpan | CharPositionSpan | InvisibleSpan;\n\nclass CharPositionSpan implements SpanData {\n  readonly kind = OffsetKind.CharPosition;\n\n  _locPosSpan: HbsSpan | BROKEN | null = null;\n\n  constructor(\n    readonly source: Source,\n    readonly charPositions: { start: CharPosition; end: CharPosition }\n  ) {}\n\n  wrap(): SourceSpan {\n    return new SourceSpan(this);\n  }\n\n  asString(): string {\n    return this.source.slice(this.charPositions.start.charPos, this.charPositions.end.charPos);\n  }\n\n  getModule(): string {\n    return this.source.module;\n  }\n\n  getStart(): AnyPosition {\n    return this.charPositions.start;\n  }\n\n  getEnd(): AnyPosition {\n    return this.charPositions.end;\n  }\n\n  locDidUpdate() {\n    if (LOCAL_DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `updating a location that came from a CharPosition span doesn't work reliably. Don't try to update locations after the plugin phase`\n      );\n    }\n  }\n\n  toHbsSpan(): HbsSpan | null {\n    let locPosSpan = this._locPosSpan;\n\n    if (locPosSpan === null) {\n      const start = this.charPositions.start.toHbsPos();\n      const end = this.charPositions.end.toHbsPos();\n\n      if (start === null || end === null) {\n        locPosSpan = this._locPosSpan = BROKEN;\n      } else {\n        locPosSpan = this._locPosSpan = new HbsSpan(this.source, {\n          start,\n          end,\n        });\n      }\n    }\n\n    return locPosSpan === BROKEN ? null : locPosSpan;\n  }\n\n  serialize(): SerializedSourceSpan {\n    const {\n      start: { charPos: start },\n      end: { charPos: end },\n    } = this.charPositions;\n\n    if (start === end) {\n      return start;\n    } else {\n      return [start, end];\n    }\n  }\n\n  toCharPosSpan(): CharPositionSpan {\n    return this;\n  }\n}\n\nexport class HbsSpan implements SpanData {\n  readonly kind = OffsetKind.HbsPosition;\n\n  _charPosSpan: CharPositionSpan | BROKEN | null = null;\n\n  // the source location from Handlebars + AST Plugins -- could be wrong\n  _providedHbsLoc: SourceLocation | null;\n\n  constructor(\n    readonly source: Source,\n    readonly hbsPositions: { start: HbsPosition; end: HbsPosition },\n    providedHbsLoc: SourceLocation | null = null\n  ) {\n    this._providedHbsLoc = providedHbsLoc;\n  }\n\n  serialize(): SerializedConcreteSourceSpan {\n    const charPos = this.toCharPosSpan();\n    return charPos === null ? OffsetKind.Broken : charPos.wrap().serialize();\n  }\n\n  wrap(): SourceSpan {\n    return new SourceSpan(this);\n  }\n\n  private updateProvided(pos: SourcePosition, edge: 'start' | 'end') {\n    if (this._providedHbsLoc) {\n      this._providedHbsLoc[edge] = pos;\n    }\n\n    // invalidate computed character offsets\n    this._charPosSpan = null;\n    this._providedHbsLoc = {\n      start: pos,\n      end: pos,\n    };\n  }\n\n  locDidUpdate({ start, end }: { start?: SourcePosition; end?: SourcePosition }): void {\n    if (start !== undefined) {\n      this.updateProvided(start, 'start');\n      this.hbsPositions.start = new HbsPosition(this.source, start, null);\n    }\n\n    if (end !== undefined) {\n      this.updateProvided(end, 'end');\n      this.hbsPositions.end = new HbsPosition(this.source, end, null);\n    }\n  }\n\n  asString(): string {\n    const span = this.toCharPosSpan();\n    return span === null ? '' : span.asString();\n  }\n\n  getModule(): string {\n    return this.source.module;\n  }\n\n  getStart(): AnyPosition {\n    return this.hbsPositions.start;\n  }\n\n  getEnd(): AnyPosition {\n    return this.hbsPositions.end;\n  }\n\n  toHbsLoc(): SourceLocation {\n    return {\n      start: this.hbsPositions.start.hbsPos,\n      end: this.hbsPositions.end.hbsPos,\n    };\n  }\n\n  toHbsSpan(): HbsSpan {\n    return this;\n  }\n\n  toCharPosSpan(): CharPositionSpan | null {\n    let charPosSpan = this._charPosSpan;\n\n    if (charPosSpan === null) {\n      const start = this.hbsPositions.start.toCharPos();\n      const end = this.hbsPositions.end.toCharPos();\n\n      if (start && end) {\n        charPosSpan = this._charPosSpan = new CharPositionSpan(this.source, {\n          start,\n          end,\n        });\n      } else {\n        charPosSpan = this._charPosSpan = BROKEN;\n        return null;\n      }\n    }\n\n    return charPosSpan === BROKEN ? null : charPosSpan;\n  }\n}\n\nclass InvisibleSpan implements SpanData {\n  constructor(\n    readonly kind: OffsetKind.Broken | OffsetKind.InternalsSynthetic | OffsetKind.NonExistent,\n    // whatever was provided, possibly broken\n    readonly loc: SourceLocation,\n    // if the span represents a synthetic string\n    readonly string: string | null = null\n  ) {}\n\n  serialize(): SerializedConcreteSourceSpan {\n    switch (this.kind) {\n      case OffsetKind.Broken:\n      case OffsetKind.NonExistent:\n        return this.kind;\n      case OffsetKind.InternalsSynthetic:\n        return this.string || '';\n    }\n  }\n\n  wrap(): SourceSpan {\n    return new SourceSpan(this);\n  }\n\n  asString(): string {\n    return this.string || '';\n  }\n\n  locDidUpdate({ start, end }: { start?: SourcePosition; end?: SourcePosition }) {\n    if (start !== undefined) {\n      this.loc.start = start;\n    }\n\n    if (end !== undefined) {\n      this.loc.end = end;\n    }\n  }\n\n  getModule(): string {\n    // TODO: Make this reflect the actual module this span originated from\n    return 'an unknown module';\n  }\n\n  getStart(): AnyPosition {\n    return new InvisiblePosition(this.kind, this.loc.start);\n  }\n\n  getEnd(): AnyPosition {\n    return new InvisiblePosition(this.kind, this.loc.end);\n  }\n\n  toCharPosSpan(): InvisibleSpan {\n    return this;\n  }\n\n  toHbsSpan(): null {\n    return null;\n  }\n\n  toHbsLoc(): SourceLocation {\n    return BROKEN_LOCATION;\n  }\n}\n\nexport const span: MatchFn<SourceSpan> = match((m) =>\n  m\n    .when(OffsetKind.HbsPosition, OffsetKind.HbsPosition, (left, right) =>\n      new HbsSpan(left.source, {\n        start: left,\n        end: right,\n      }).wrap()\n    )\n    .when(OffsetKind.CharPosition, OffsetKind.CharPosition, (left, right) =>\n      new CharPositionSpan(left.source, {\n        start: left,\n        end: right,\n      }).wrap()\n    )\n    .when(OffsetKind.CharPosition, OffsetKind.HbsPosition, (left, right) => {\n      const rightCharPos = right.toCharPos();\n\n      if (rightCharPos === null) {\n        return new InvisibleSpan(OffsetKind.Broken, BROKEN_LOCATION).wrap();\n      } else {\n        return span(left, rightCharPos);\n      }\n    })\n    .when(OffsetKind.HbsPosition, OffsetKind.CharPosition, (left, right) => {\n      const leftCharPos = left.toCharPos();\n\n      if (leftCharPos === null) {\n        return new InvisibleSpan(OffsetKind.Broken, BROKEN_LOCATION).wrap();\n      } else {\n        return span(leftCharPos, right);\n      }\n    })\n    .when(IsInvisible, MatchAny, (left) => new InvisibleSpan(left.kind, BROKEN_LOCATION).wrap())\n    .when(MatchAny, IsInvisible, (_, right) =>\n      new InvisibleSpan(right.kind, BROKEN_LOCATION).wrap()\n    )\n);\n\nexport type SerializedConcreteSourceSpan =\n  | /** collapsed */ number\n  | /** normal */ [start: number, size: number]\n  | /** synthetic */ string;\n\nexport type SerializedSourceSpan =\n  | SerializedConcreteSourceSpan\n  | OffsetKind.NonExistent\n  | OffsetKind.Broken;\n","import type { SourcePosition } from '../location';\nimport type { Source } from '../source';\nimport type { SourceSpan } from './span';\n\nimport { UNKNOWN_POSITION } from '../location';\nimport { OffsetKind } from './kinds';\nimport { match, MatchAny } from './match';\nimport { span } from './span';\n\n/**\n * All positions have these details in common. Most notably, all three kinds of positions can\n * must be able to attempt to convert themselves into {@see CharPosition}.\n */\nexport interface PositionData {\n  readonly kind: OffsetKind;\n  toCharPos(): CharPosition | null;\n  toJSON(): SourcePosition;\n}\n\n/**\n * Used to indicate that an attempt to convert a `SourcePosition` to a character offset failed. It\n * is separate from `null` so that `null` can be used to indicate that the computation wasn't yet\n * attempted (and therefore to cache the failure)\n */\nexport const BROKEN = 'BROKEN';\nexport type BROKEN = 'BROKEN';\n\nexport type AnyPosition = HbsPosition | CharPosition | InvisiblePosition;\n\n/**\n * A `SourceOffset` represents a single position in the source.\n *\n * There are three kinds of backing data for `SourceOffset` objects:\n *\n * - `CharPosition`, which contains a character offset into the raw source string\n * - `HbsPosition`, which contains a `SourcePosition` from the Handlebars AST, which can be\n *   converted to a `CharPosition` on demand.\n * - `InvisiblePosition`, which represents a position not in source (@see {InvisiblePosition})\n */\nexport class SourceOffset {\n  /**\n   * Create a `SourceOffset` from a Handlebars `SourcePosition`. It's stored as-is, and converted\n   * into a character offset on demand, which avoids unnecessarily computing the offset of every\n   * `SourceLocation`, but also means that broken `SourcePosition`s are not always detected.\n   */\n  static forHbsPos(source: Source, pos: SourcePosition): SourceOffset {\n    return new HbsPosition(source, pos, null).wrap();\n  }\n\n  /**\n   * Create a `SourceOffset` that corresponds to a broken `SourcePosition`. This means that the\n   * calling code determined (or knows) that the `SourceLocation` doesn't correspond correctly to\n   * any part of the source.\n   */\n  static broken(pos: SourcePosition = UNKNOWN_POSITION): SourceOffset {\n    return new InvisiblePosition(OffsetKind.Broken, pos).wrap();\n  }\n\n  constructor(readonly data: PositionData & AnyPosition) {}\n\n  /**\n   * Get the character offset for this `SourceOffset`, if possible.\n   */\n  get offset(): number | null {\n    const charPos = this.data.toCharPos();\n    return charPos === null ? null : charPos.offset;\n  }\n\n  /**\n   * Compare this offset with another one.\n   *\n   * If both offsets are `HbsPosition`s, they're equivalent as long as their lines and columns are\n   * the same. This avoids computing offsets unnecessarily.\n   *\n   * Otherwise, two `SourceOffset`s are equivalent if their successfully computed character offsets\n   * are the same.\n   */\n  eql(right: SourceOffset): boolean {\n    return eql(this.data, right.data);\n  }\n\n  /**\n   * Create a span that starts from this source offset and ends with another source offset. Avoid\n   * computing character offsets if both `SourceOffset`s are still lazy.\n   */\n  until(other: SourceOffset): SourceSpan {\n    return span(this.data, other.data);\n  }\n\n  /**\n   * Create a `SourceOffset` by moving the character position represented by this source offset\n   * forward or backward (if `by` is negative), if possible.\n   *\n   * If this `SourceOffset` can't compute a valid character offset, `move` returns a broken offset.\n   *\n   * If the resulting character offset is less than 0 or greater than the size of the source, `move`\n   * returns a broken offset.\n   */\n  move(by: number): SourceOffset {\n    const charPos = this.data.toCharPos();\n\n    if (charPos === null) {\n      return SourceOffset.broken();\n    } else {\n      const result = charPos.offset + by;\n\n      if (charPos.source.check(result)) {\n        return new CharPosition(charPos.source, result).wrap();\n      } else {\n        return SourceOffset.broken();\n      }\n    }\n  }\n\n  /**\n   * Create a new `SourceSpan` that represents a collapsed range at this source offset. Avoid\n   * computing the character offset if it has not already been computed.\n   */\n  collapsed(): SourceSpan {\n    return span(this.data, this.data);\n  }\n\n  /**\n   * Convert this `SourceOffset` into a Handlebars {@see SourcePosition} for compatibility with\n   * existing plugins.\n   */\n  toJSON(): SourcePosition {\n    return this.data.toJSON();\n  }\n}\n\nexport class CharPosition implements PositionData {\n  readonly kind = OffsetKind.CharPosition;\n\n  /** Computed from char offset */\n  _locPos: HbsPosition | BROKEN | null = null;\n\n  constructor(\n    readonly source: Source,\n    readonly charPos: number\n  ) {}\n\n  /**\n   * This is already a `CharPosition`.\n   *\n   * {@see HbsPosition} for the alternative.\n   */\n  toCharPos(): CharPosition {\n    return this;\n  }\n\n  /**\n   * Produce a Handlebars {@see SourcePosition} for this `CharPosition`. If this `CharPosition` was\n   * computed using {@see SourceOffset#move}, this will compute the `SourcePosition` for the offset.\n   */\n  toJSON(): SourcePosition {\n    const hbs = this.toHbsPos();\n    return hbs === null ? UNKNOWN_POSITION : hbs.toJSON();\n  }\n\n  wrap(): SourceOffset {\n    return new SourceOffset(this);\n  }\n\n  /**\n   * A `CharPosition` always has an offset it can produce without any additional computation.\n   */\n  get offset(): number {\n    return this.charPos;\n  }\n\n  /**\n   * Convert the current character offset to an `HbsPosition`, if it was not already computed. Once\n   * a `CharPosition` has computed its `HbsPosition`, it will not need to do compute it again, and\n   * the same `CharPosition` is retained when used as one of the ends of a `SourceSpan`, so\n   * computing the `HbsPosition` should be a one-time operation.\n   */\n  toHbsPos(): HbsPosition | null {\n    let locPos = this._locPos;\n\n    if (locPos === null) {\n      const hbsPos = this.source.hbsPosFor(this.charPos);\n\n      if (hbsPos === null) {\n        this._locPos = locPos = BROKEN;\n      } else {\n        this._locPos = locPos = new HbsPosition(this.source, hbsPos, this.charPos);\n      }\n    }\n\n    return locPos === BROKEN ? null : locPos;\n  }\n}\n\nexport class HbsPosition implements PositionData {\n  readonly kind = OffsetKind.HbsPosition;\n\n  _charPos: CharPosition | BROKEN | null;\n\n  constructor(\n    readonly source: Source,\n    readonly hbsPos: SourcePosition,\n    charPos: number | null = null\n  ) {\n    this._charPos = charPos === null ? null : new CharPosition(source, charPos);\n  }\n\n  /**\n   * Lazily compute the character offset from the {@see SourcePosition}. Once an `HbsPosition` has\n   * computed its `CharPosition`, it will not need to do compute it again, and the same\n   * `HbsPosition` is retained when used as one of the ends of a `SourceSpan`, so computing the\n   * `CharPosition` should be a one-time operation.\n   */\n  toCharPos(): CharPosition | null {\n    let charPos = this._charPos;\n\n    if (charPos === null) {\n      const charPosNumber = this.source.charPosFor(this.hbsPos);\n\n      if (charPosNumber === null) {\n        this._charPos = charPos = BROKEN;\n      } else {\n        this._charPos = charPos = new CharPosition(this.source, charPosNumber);\n      }\n    }\n\n    return charPos === BROKEN ? null : charPos;\n  }\n\n  /**\n   * Return the {@see SourcePosition} that this `HbsPosition` was instantiated with. This operation\n   * does not need to compute anything.\n   */\n  toJSON(): SourcePosition {\n    return this.hbsPos;\n  }\n\n  wrap(): SourceOffset {\n    return new SourceOffset(this);\n  }\n\n  /**\n   * This is already an `HbsPosition`.\n   *\n   * {@see CharPosition} for the alternative.\n   */\n  toHbsPos(): HbsPosition {\n    return this;\n  }\n}\n\nexport class InvisiblePosition implements PositionData {\n  constructor(\n    readonly kind: OffsetKind.Broken | OffsetKind.InternalsSynthetic | OffsetKind.NonExistent,\n    // whatever was provided, possibly broken\n    readonly pos: SourcePosition\n  ) {}\n\n  /**\n   * A broken position cannot be turned into a {@see CharacterPosition}.\n   */\n  toCharPos(): null {\n    return null;\n  }\n\n  /**\n   * The serialization of an `InvisiblePosition is whatever Handlebars {@see SourcePosition} was\n   * originally identified as broken, non-existent or synthetic.\n   *\n   * If an `InvisiblePosition` never had an source offset at all, this method returns\n   * {@see UNKNOWN_POSITION} for compatibility.\n   */\n  toJSON(): SourcePosition {\n    return this.pos;\n  }\n\n  wrap(): SourceOffset {\n    return new SourceOffset(this);\n  }\n\n  get offset(): null {\n    return null;\n  }\n}\n\n/**\n * Compare two {@see AnyPosition} and determine whether they are equal.\n *\n * @see {SourceOffset#eql}\n */\nconst eql = match<boolean>((m) =>\n  m\n    .when(\n      OffsetKind.HbsPosition,\n      OffsetKind.HbsPosition,\n      ({ hbsPos: left }, { hbsPos: right }) =>\n        left.column === right.column && left.line === right.line\n    )\n    .when(\n      OffsetKind.CharPosition,\n      OffsetKind.CharPosition,\n      ({ charPos: left }, { charPos: right }) => left === right\n    )\n    .when(\n      OffsetKind.CharPosition,\n      OffsetKind.HbsPosition,\n      ({ offset: left }, right) => left === right.toCharPos()?.offset\n    )\n    .when(\n      OffsetKind.HbsPosition,\n      OffsetKind.CharPosition,\n      (left, { offset: right }) => left.toCharPos()?.offset === right\n    )\n    .when(MatchAny, MatchAny, () => false)\n);\n","import type { Nullable } from '@glimmer/interfaces';\nimport { assert } from '@glimmer/util';\n\nimport type { PrecompileOptions } from '../parser/tokenizer-event-handlers';\nimport type { SourceLocation, SourcePosition } from './location';\n\nimport { SourceOffset, SourceSpan } from './span';\n\nexport class Source {\n  static from(source: string, options: PrecompileOptions = {}): Source {\n    return new Source(source, options.meta?.moduleName);\n  }\n\n  constructor(\n    readonly source: string,\n    readonly module = 'an unknown module'\n  ) {}\n\n  /**\n   * Validate that the character offset represents a position in the source string.\n   */\n  check(offset: number): boolean {\n    return offset >= 0 && offset <= this.source.length;\n  }\n\n  slice(start: number, end: number): string {\n    return this.source.slice(start, end);\n  }\n\n  offsetFor(line: number, column: number): SourceOffset {\n    return SourceOffset.forHbsPos(this, { line, column });\n  }\n\n  spanFor({ start, end }: Readonly<SourceLocation>): SourceSpan {\n    return SourceSpan.forHbsLoc(this, {\n      start: { line: start.line, column: start.column },\n      end: { line: end.line, column: end.column },\n    });\n  }\n\n  hbsPosFor(offset: number): Nullable<SourcePosition> {\n    let seenLines = 0;\n    let seenChars = 0;\n\n    if (offset > this.source.length) {\n      return null;\n    }\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      let nextLine = this.source.indexOf('\\n', seenChars);\n\n      if (offset <= nextLine || nextLine === -1) {\n        return {\n          line: seenLines + 1,\n          column: offset - seenChars,\n        };\n      } else {\n        seenLines += 1;\n        seenChars = nextLine + 1;\n      }\n    }\n  }\n\n  charPosFor(position: SourcePosition): number | null {\n    let { line, column } = position;\n    let sourceString = this.source;\n    let sourceLength = sourceString.length;\n    let seenLines = 0;\n    let seenChars = 0;\n\n    while (seenChars < sourceLength) {\n      let nextLine = this.source.indexOf('\\n', seenChars);\n      if (nextLine === -1) nextLine = this.source.length;\n\n      if (seenLines === line - 1) {\n        if (seenChars + column > nextLine) return nextLine;\n\n        if (import.meta.env.DEV) {\n          let roundTrip = this.hbsPosFor(seenChars + column);\n          assert(roundTrip !== null, `the returned offset failed to round-trip`);\n          assert(roundTrip.line === line, `the round-tripped line didn't match the original line`);\n          assert(\n            roundTrip.column === column,\n            `the round-tripped column didn't match the original column`\n          );\n        }\n\n        return seenChars + column;\n      } else if (nextLine === -1) {\n        return 0;\n      } else {\n        seenLines += 1;\n        seenChars = nextLine + 1;\n      }\n    }\n\n    return sourceLength;\n  }\n}\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { getFirst, getLast, isPresentArray } from '@glimmer/util';\n\nimport type { LocatedWithOptionalSpan, LocatedWithSpan } from './location';\nimport type { SourceOffset } from './span';\n\nimport { SourceSpan } from './span';\n\nexport type HasSpan = SourceSpan | LocatedWithSpan | PresentArray<LocatedWithSpan>;\nexport type MaybeHasSpan = SourceSpan | LocatedWithOptionalSpan | LocatedWithOptionalSpan[] | null;\n\nexport type ToSourceOffset = number | SourceOffset;\n\nexport class SpanList {\n  static range(span: PresentArray<HasSourceSpan>): SourceSpan;\n  static range(span: HasSourceSpan[], fallback: SourceSpan): SourceSpan;\n  static range(span: HasSourceSpan[], fallback: SourceSpan = SourceSpan.NON_EXISTENT): SourceSpan {\n    return new SpanList(span.map(loc)).getRangeOffset(fallback);\n  }\n\n  _span: SourceSpan[];\n\n  constructor(span: SourceSpan[] = []) {\n    this._span = span;\n  }\n\n  add(offset: SourceSpan): void {\n    this._span.push(offset);\n  }\n\n  getRangeOffset(fallback: SourceSpan): SourceSpan {\n    if (isPresentArray(this._span)) {\n      let first = getFirst(this._span);\n      let last = getLast(this._span);\n      return first.extend(last);\n    } else {\n      return fallback;\n    }\n  }\n}\n\nexport type HasSourceSpan = { loc: SourceSpan } | SourceSpan | [HasSourceSpan, ...HasSourceSpan[]];\n\nexport function loc(span: HasSourceSpan): SourceSpan {\n  if (Array.isArray(span)) {\n    let first = getFirst(span);\n    let last = getLast(span);\n    return loc(first).extend(loc(last));\n  } else if (span instanceof SourceSpan) {\n    return span;\n  } else {\n    return span.loc;\n  }\n}\n\nexport type MaybeHasSourceSpan = { loc: SourceSpan } | SourceSpan | MaybeHasSourceSpan[];\n\nexport function hasSpan(span: MaybeHasSourceSpan): span is HasSourceSpan {\n  if (Array.isArray(span) && span.length === 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function maybeLoc(location: MaybeHasSourceSpan, fallback: SourceSpan): SourceSpan {\n  if (hasSpan(location)) {\n    return loc(location);\n  } else {\n    return fallback;\n  }\n}\n","import type * as src from './source/api';\n\nexport interface GlimmerSyntaxError extends Error {\n  location: src.SourceSpan | null;\n  code: string | null;\n}\n\nexport function generateSyntaxError(message: string, location: src.SourceSpan): GlimmerSyntaxError {\n  let { module, loc } = location;\n  let { line, column } = loc.start;\n\n  let code = location.asString();\n  let quotedCode = code ? `\\n\\n|\\n|  ${code.split('\\n').join('\\n|  ')}\\n|\\n\\n` : '';\n\n  let error = new Error(\n    `${message}: ${quotedCode}(error occurred in '${module}' @ line ${line} : column ${column})`\n  ) as GlimmerSyntaxError;\n\n  error.name = 'SyntaxError';\n  error.location = location;\n  error.code = code;\n\n  return error;\n}\n","import type * as ASTv1 from './api';\n\n// ensure stays in sync with typing\n// ParentNode and ChildKey types are derived from VisitorKeysMap\nconst visitorKeys = {\n  Template: ['body'],\n  Block: ['body'],\n\n  MustacheStatement: ['path', 'params', 'hash'],\n  BlockStatement: ['path', 'params', 'hash', 'program', 'inverse'],\n  ElementModifierStatement: ['path', 'params', 'hash'],\n  CommentStatement: [],\n  MustacheCommentStatement: [],\n  ElementNode: ['attributes', 'modifiers', 'children', 'comments'],\n  AttrNode: ['value'],\n  TextNode: [],\n\n  ConcatStatement: ['parts'],\n  SubExpression: ['path', 'params', 'hash'],\n  PathExpression: [],\n\n  StringLiteral: [],\n  BooleanLiteral: [],\n  NumberLiteral: [],\n  NullLiteral: [],\n  UndefinedLiteral: [],\n\n  Hash: ['pairs'],\n  HashPair: ['value'],\n} as const;\n\ntype VisitorKeysMap = typeof visitorKeys;\n\nexport type VisitorKeys = { [P in keyof VisitorKeysMap]: VisitorKeysMap[P][number] };\nexport type VisitorKey<N extends ASTv1.Node> = VisitorKeys[N['type']] & keyof N;\n\nexport default visitorKeys;\n","import type { Nullable } from '@glimmer/interfaces';\n\nimport type * as ASTv1 from '../v1/api';\n\nexport interface TraversalError extends Error {\n  constructor: TraversalErrorConstructor;\n  key: string;\n  node: ASTv1.Node;\n  parent: Nullable<ASTv1.Node>;\n  stack?: string;\n}\n\nexport interface TraversalErrorConstructor {\n  new (\n    message: string,\n    node: ASTv1.Node,\n    parent: Nullable<ASTv1.Node>,\n    key: string\n  ): TraversalError;\n  readonly prototype: TraversalError;\n}\n\nconst TraversalError: TraversalErrorConstructor = (function () {\n  TraversalError.prototype = Object.create(Error.prototype);\n  TraversalError.prototype.constructor = TraversalError;\n\n  function TraversalError(\n    this: TraversalError,\n    message: string,\n    node: ASTv1.Node,\n    parent: Nullable<ASTv1.Node>,\n    key: string\n  ) {\n    let error = Error.call(this, message);\n\n    this.key = key;\n    this.message = message;\n    this.node = node;\n    this.parent = parent;\n\n    if (error.stack) {\n      this.stack = error.stack;\n    }\n  }\n\n  return TraversalError as unknown as TraversalErrorConstructor;\n})();\n\nexport default TraversalError;\n\nexport function cannotRemoveNode(\n  node: ASTv1.Node,\n  parent: ASTv1.Node,\n  key: string\n): TraversalError {\n  return new TraversalError(\n    'Cannot remove a node unless it is part of an array',\n    node,\n    parent,\n    key\n  );\n}\n\nexport function cannotReplaceNode(\n  node: ASTv1.Node,\n  parent: ASTv1.Node,\n  key: string\n): TraversalError {\n  return new TraversalError(\n    'Cannot replace a node with multiple nodes unless it is part of an array',\n    node,\n    parent,\n    key\n  );\n}\n\nexport function cannotReplaceOrRemoveInKeyHandlerYet(\n  node: ASTv1.Node,\n  key: string\n): TraversalError {\n  return new TraversalError(\n    'Replacing and removing in key handlers is not yet supported.',\n    node,\n    null,\n    key\n  );\n}\n","import type * as ASTv1 from '../v1/api';\n\nexport default class WalkerPath<N extends ASTv1.Node> {\n  node: N;\n  parent: WalkerPath<ASTv1.Node> | null;\n  parentKey: string | null;\n\n  constructor(\n    node: N,\n    parent: WalkerPath<ASTv1.Node> | null = null,\n    parentKey: string | null = null\n  ) {\n    this.node = node;\n    this.parent = parent;\n    this.parentKey = parentKey;\n  }\n\n  get parentNode(): ASTv1.Node | null {\n    return this.parent ? this.parent.node : null;\n  }\n\n  parents(): Iterable<WalkerPath<ASTv1.Node> | null> {\n    return {\n      [Symbol.iterator]: () => {\n        return new PathParentsIterator(this);\n      },\n    };\n  }\n}\n\nclass PathParentsIterator implements Iterator<WalkerPath<ASTv1.Node> | null> {\n  path: WalkerPath<ASTv1.Node>;\n\n  constructor(path: WalkerPath<ASTv1.Node>) {\n    this.path = path;\n  }\n\n  next() {\n    if (this.path.parent) {\n      this.path = this.path.parent;\n      return { done: false, value: this.path };\n    } else {\n      return { done: true, value: null };\n    }\n  }\n}\n","import { deprecate, unwrap } from '@glimmer/util';\n\nimport type * as ASTv1 from '../v1/api';\nimport type { VisitorKey, VisitorKeys } from '../v1/visitor-keys';\nimport type { KeyHandler, KeyTraversal, NodeHandler, NodeTraversal, NodeVisitor } from './visitor';\n\nimport visitorKeys from '../v1/visitor-keys';\nimport {\n  cannotRemoveNode,\n  cannotReplaceNode,\n  cannotReplaceOrRemoveInKeyHandlerYet,\n} from './errors';\nimport WalkerPath from './path';\n\nfunction getEnterFunction<N extends ASTv1.Node>(\n  handler: NodeTraversal<N>\n): NodeHandler<N> | undefined;\nfunction getEnterFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: KeyTraversal<N, K>\n): KeyHandler<N, K> | undefined;\nfunction getEnterFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: NodeTraversal<N> | KeyTraversal<N, K>\n): NodeHandler<N> | KeyHandler<N, K> | undefined {\n  if (typeof handler === 'function') {\n    return handler;\n  } else {\n    return handler.enter as NodeHandler<N> | KeyHandler<N, K>;\n  }\n}\n\nfunction getExitFunction<N extends ASTv1.Node>(\n  handler: NodeTraversal<N>\n): NodeHandler<N> | undefined;\nfunction getExitFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: KeyTraversal<N, K>\n): KeyHandler<N, K> | undefined;\nfunction getExitFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: NodeTraversal<N> | KeyTraversal<N, K>\n): NodeHandler<N> | KeyHandler<N, K> | undefined {\n  if (typeof handler === 'function') {\n    return undefined;\n  } else {\n    return handler.exit as NodeHandler<N> | KeyHandler<N, K>;\n  }\n}\n\nfunction getKeyHandler<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: NodeTraversal<N>,\n  key: K\n): KeyTraversal<N, K> | KeyTraversal<N, VisitorKey<N>> | undefined {\n  let keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;\n  if (keyVisitor === undefined) return;\n\n  let keyHandler = keyVisitor[key];\n  if (keyHandler !== undefined) {\n    return keyHandler as KeyTraversal<N, K>;\n  }\n  return keyVisitor.All;\n}\n\nfunction getNodeHandler<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  nodeType: N['type']\n): NodeTraversal<N>;\nfunction getNodeHandler(visitor: NodeVisitor, nodeType: 'All'): NodeTraversal<ASTv1.Node>;\nfunction getNodeHandler<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  nodeType: N['type']\n): NodeTraversal<ASTv1.Node> | undefined {\n  if (visitor.Program) {\n    if (\n      (nodeType === 'Template' && !visitor.Template) ||\n      (nodeType === 'Block' && !visitor.Block)\n    ) {\n      deprecate(\n        `The 'Program' visitor node is deprecated. Use 'Template' or 'Block' instead (node was '${nodeType}') `\n      );\n\n      return visitor.Program as NodeTraversal<ASTv1.Node>;\n    }\n  }\n\n  let handler = visitor[nodeType];\n  if (handler !== undefined) {\n    return handler as unknown as NodeTraversal<ASTv1.Node>;\n  }\n  return visitor.All;\n}\n\nfunction visitNode<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  path: WalkerPath<N>\n): ASTv1.Node | ASTv1.Node[] | undefined | null | void {\n  let { node, parent, parentKey } = path;\n\n  let handler: NodeTraversal<N> = getNodeHandler(visitor, node.type);\n  let enter;\n  let exit;\n\n  if (handler !== undefined) {\n    enter = getEnterFunction(handler);\n    exit = getExitFunction(handler);\n  }\n\n  let result: ASTv1.Node | ASTv1.Node[] | undefined | null | void;\n  if (enter !== undefined) {\n    result = enter(node, path);\n  }\n\n  if (result !== undefined && result !== null) {\n    if (JSON.stringify(node) === JSON.stringify(result)) {\n      result = undefined;\n    } else if (Array.isArray(result)) {\n      visitArray(visitor, result, parent, parentKey);\n      return result;\n    } else {\n      let path = new WalkerPath(result, parent, parentKey);\n      return visitNode(visitor, path) || result;\n    }\n  }\n\n  if (result === undefined) {\n    let keys = visitorKeys[node.type];\n\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i] as VisitorKeys[N['type']] & keyof N;\n      // we know if it has child keys we can widen to a ParentNode\n      visitKey(visitor, handler, path, key);\n    }\n\n    if (exit !== undefined) {\n      result = exit(node, path);\n    }\n  }\n\n  return result;\n}\n\nfunction get<N extends ASTv1.Node>(\n  node: N,\n  key: VisitorKeys[N['type']] & keyof N\n): ASTv1.Node | ASTv1.Node[] {\n  return node[key] as unknown as ASTv1.Node | ASTv1.Node[];\n}\n\nfunction set<N extends ASTv1.Node, K extends keyof N>(node: N, key: K, value: N[K]): void {\n  node[key] = value;\n}\n\nfunction visitKey<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  handler: NodeTraversal<N>,\n  path: WalkerPath<N>,\n  key: VisitorKeys[N['type']] & keyof N\n) {\n  let { node } = path;\n\n  let value = get(node, key);\n  if (!value) {\n    return;\n  }\n\n  let keyEnter;\n  let keyExit;\n\n  if (handler !== undefined) {\n    let keyHandler = getKeyHandler(handler, key);\n    if (keyHandler !== undefined) {\n      keyEnter = getEnterFunction(keyHandler);\n      keyExit = getExitFunction(keyHandler);\n    }\n  }\n\n  if (keyEnter !== undefined) {\n    if (keyEnter(node, key) !== undefined) {\n      throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);\n    }\n  }\n\n  if (Array.isArray(value)) {\n    visitArray(visitor, value, path, key);\n  } else {\n    let keyPath = new WalkerPath(value, path, key);\n    let result = visitNode(visitor, keyPath);\n    if (result !== undefined) {\n      // TODO: dynamically check the results by having a table of\n      // expected node types in value space, not just type space\n\n      assignKey(node, key, value, result as any);\n    }\n  }\n\n  if (keyExit !== undefined) {\n    if (keyExit(node, key) !== undefined) {\n      throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);\n    }\n  }\n}\n\nfunction visitArray(\n  visitor: NodeVisitor,\n  array: ASTv1.Node[],\n  parent: WalkerPath<ASTv1.Node> | null,\n  parentKey: string | null\n) {\n  for (let i = 0; i < array.length; i++) {\n    let node = unwrap(array[i]);\n    let path = new WalkerPath(node, parent, parentKey);\n    let result = visitNode(visitor, path);\n    if (result !== undefined) {\n      i += spliceArray(array, i, result) - 1;\n    }\n  }\n}\n\nfunction assignKey<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  node: N,\n  key: K,\n  value: ASTv1.Node,\n  result: N[K] | [N[K]] | null\n) {\n  if (result === null) {\n    throw cannotRemoveNode(value, node, key);\n  } else if (Array.isArray(result)) {\n    if (result.length === 1) {\n      set(node, key, result[0]);\n    } else {\n      if (result.length === 0) {\n        throw cannotRemoveNode(value, node, key);\n      } else {\n        throw cannotReplaceNode(value, node, key);\n      }\n    }\n  } else {\n    set(node, key, result);\n  }\n}\n\nfunction spliceArray(array: ASTv1.Node[], index: number, result: ASTv1.Node | ASTv1.Node[] | null) {\n  if (result === null) {\n    array.splice(index, 1);\n    return 0;\n  } else if (Array.isArray(result)) {\n    array.splice(index, 1, ...result);\n    return result.length;\n  } else {\n    array.splice(index, 1, result);\n    return 1;\n  }\n}\n\nexport default function traverse(node: ASTv1.Node, visitor: NodeVisitor): void {\n  let path = new WalkerPath(node);\n  visitNode(visitor, path);\n}\n","import type { Nullable } from '@glimmer/interfaces';\n\nimport type * as ASTv1 from '../v1/api';\n\nexport type NodeCallback<N extends ASTv1.Node> = (node: N, walker: Walker) => void;\n\nexport default class Walker {\n  public stack: unknown[] = [];\n  constructor(public order?: unknown) {}\n\n  visit<N extends ASTv1.Node>(node: Nullable<N>, visitor: NodeCallback<N>): void {\n    if (!node) {\n      return;\n    }\n\n    this.stack.push(node);\n\n    if (this.order === 'post') {\n      this.children(node, visitor);\n      visitor(node, this);\n    } else {\n      visitor(node, this);\n      this.children(node, visitor);\n    }\n\n    this.stack.pop();\n  }\n\n  children<N extends ASTv1.Node>(\n    node: N & ASTv1.Node,\n    callback: NodeCallback<N & ASTv1.Node>\n  ): void {\n    switch (node.type) {\n      case 'Block':\n      case 'Template':\n        walkBody(this, node.body, callback);\n        return;\n      case 'ElementNode':\n        walkBody(this, node.children, callback);\n        return;\n      case 'BlockStatement':\n        this.visit(node.program, callback);\n        this.visit(node.inverse || null, callback);\n        return;\n      default:\n        return;\n    }\n  }\n}\n\nfunction walkBody(\n  walker: Walker,\n  body: ASTv1.Statement[],\n  callback: NodeCallback<ASTv1.Statement>\n) {\n  for (const child of body) {\n    walker.visit(child, callback);\n  }\n}\n","import type * as ASTv1 from './v1/api';\nimport type * as HBS from './v1/handlebars-ast';\n\nexport function childrenFor(\n  node: ASTv1.Block | ASTv1.Template | ASTv1.ElementNode\n): ASTv1.TopLevelStatement[] {\n  switch (node.type) {\n    case 'Block':\n    case 'Template':\n      return node.body;\n    case 'ElementNode':\n      return node.children;\n  }\n}\n\nexport function appendChild(\n  parent: ASTv1.Block | ASTv1.Template | ASTv1.ElementNode,\n  node: ASTv1.Statement\n): void {\n  childrenFor(parent).push(node);\n}\n\nexport function isHBSLiteral(path: HBS.Expression): path is HBS.Literal;\nexport function isHBSLiteral(path: ASTv1.Expression): path is ASTv1.Literal;\nexport function isHBSLiteral(\n  path: HBS.Expression | ASTv1.Expression\n): path is HBS.Literal | ASTv1.Literal {\n  return (\n    path.type === 'StringLiteral' ||\n    path.type === 'BooleanLiteral' ||\n    path.type === 'NumberLiteral' ||\n    path.type === 'NullLiteral' ||\n    path.type === 'UndefinedLiteral'\n  );\n}\n\nexport function printLiteral(literal: ASTv1.Literal): string {\n  if (literal.type === 'UndefinedLiteral') {\n    return 'undefined';\n  } else {\n    return JSON.stringify(literal.value);\n  }\n}\n\nexport function isUpperCase(tag: string): boolean {\n  return tag[0] === tag[0]?.toUpperCase() && tag[0] !== tag[0]?.toLowerCase();\n}\n\nexport function isLowerCase(tag: string): boolean {\n  return tag[0] === tag[0]?.toLowerCase() && tag[0] !== tag[0]?.toUpperCase();\n}\n","import type { Dict, Nullable } from '@glimmer/interfaces';\nimport { asPresentArray, assert, deprecate, isPresentArray } from '@glimmer/util';\n\nimport type { SourceLocation, SourcePosition } from '../source/location';\nimport type * as ASTv1 from './api';\n\nimport { isVoidTag } from '../generation/printer';\nimport { SYNTHETIC_LOCATION } from '../source/location';\nimport { Source } from '../source/source';\nimport { SourceSpan } from '../source/span';\nimport b from './parser-builders';\n\nlet _SOURCE: Source | undefined;\n\nfunction SOURCE(): Source {\n  if (!_SOURCE) {\n    _SOURCE = new Source('', '(synthetic)');\n  }\n\n  return _SOURCE;\n}\n\n// const SOURCE = new Source('', '(tests)');\n\n// Statements\n\nexport type BuilderHead = string | ASTv1.CallableExpression;\nexport type TagDescriptor =\n  | string\n  | ASTv1.PathExpression\n  | { path: ASTv1.PathExpression; selfClosing?: boolean }\n  | { name: string; selfClosing?: boolean };\n\nfunction buildMustache(\n  path: BuilderHead | ASTv1.Literal,\n  params: ASTv1.Expression[] = [],\n  hash: ASTv1.Hash = buildHash([]),\n  trusting = false,\n  loc?: SourceLocation,\n  strip?: ASTv1.StripFlags\n): ASTv1.MustacheStatement {\n  return b.mustache({\n    path: buildPath(path),\n    params,\n    hash,\n    trusting,\n    strip,\n    loc: buildLoc(loc || null),\n  });\n}\n\ntype PossiblyDeprecatedBlock = ASTv1.Block | ASTv1.Template;\n\nfunction buildBlock(\n  path: BuilderHead,\n  params: Nullable<ASTv1.Expression[]>,\n  hash: Nullable<ASTv1.Hash>,\n  _defaultBlock: PossiblyDeprecatedBlock,\n  _elseBlock: Nullable<PossiblyDeprecatedBlock> = null,\n  loc?: SourceLocation,\n  openStrip?: ASTv1.StripFlags,\n  inverseStrip?: ASTv1.StripFlags,\n  closeStrip?: ASTv1.StripFlags\n): ASTv1.BlockStatement {\n  let defaultBlock: ASTv1.Block;\n  let elseBlock: Nullable<ASTv1.Block> = null;\n\n  if (_defaultBlock.type === 'Template') {\n    deprecate(`b.program is deprecated. Use b.blockItself instead.`);\n    defaultBlock = b.blockItself({\n      params: buildBlockParams(_defaultBlock.blockParams),\n      body: _defaultBlock.body,\n      loc: _defaultBlock.loc,\n    });\n  } else {\n    defaultBlock = _defaultBlock;\n  }\n\n  if (_elseBlock?.type === 'Template') {\n    deprecate(`b.program is deprecated. Use b.blockItself instead.`);\n    assert(_elseBlock.blockParams.length === 0, '{{else}} block cannot have block params');\n\n    elseBlock = b.blockItself({\n      params: [],\n      body: _elseBlock.body,\n      loc: _elseBlock.loc,\n    });\n  } else {\n    elseBlock = _elseBlock;\n  }\n\n  return b.block({\n    path: buildPath(path),\n    params: params || [],\n    hash: hash || buildHash([]),\n    defaultBlock,\n    elseBlock,\n    loc: buildLoc(loc || null),\n    openStrip,\n    inverseStrip,\n    closeStrip,\n  });\n}\n\nfunction buildElementModifier(\n  path: BuilderHead,\n  params?: ASTv1.Expression[],\n  hash?: ASTv1.Hash,\n  loc?: Nullable<SourceLocation>\n): ASTv1.ElementModifierStatement {\n  return b.elementModifier({\n    path: buildPath(path),\n    params: params || [],\n    hash: hash || buildHash([]),\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildComment(value: string, loc?: SourceLocation): ASTv1.CommentStatement {\n  return b.comment({\n    value: value,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildMustacheComment(value: string, loc?: SourceLocation): ASTv1.MustacheCommentStatement {\n  return b.mustacheComment({\n    value: value,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildConcat(\n  parts: (ASTv1.TextNode | ASTv1.MustacheStatement)[],\n  loc?: SourceLocation\n): ASTv1.ConcatStatement {\n  if (!isPresentArray(parts)) {\n    throw new Error(`b.concat requires at least one part`);\n  }\n\n  return b.concat({\n    parts,\n    loc: buildLoc(loc || null),\n  });\n}\n\n// Nodes\n\nexport type ElementParts =\n  | ['attrs', ...AttrSexp[]]\n  | ['modifiers', ...ModifierSexp[]]\n  | ['body', ...ASTv1.Statement[]]\n  | ['comments', ...ElementComment[]]\n  | ['as', ...string[]]\n  | ['loc', SourceLocation];\n\nexport type PathSexp = string | ['path', string, LocSexp?];\n\nexport type ModifierSexp =\n  | string\n  | [PathSexp, LocSexp?]\n  | [PathSexp, ASTv1.Expression[], LocSexp?]\n  | [PathSexp, ASTv1.Expression[], Dict<ASTv1.Expression>, LocSexp?];\n\nexport type AttrSexp = [string, ASTv1.AttrNode['value'] | string, LocSexp?];\n\nexport type LocSexp = ['loc', SourceLocation];\n\nexport type ElementComment = ASTv1.MustacheCommentStatement | SourceLocation | string;\n\nexport type SexpValue =\n  | string\n  | ASTv1.Expression[]\n  | Dict<ASTv1.Expression>\n  | LocSexp\n  | PathSexp\n  | undefined;\n\nexport interface BuildElementOptions {\n  attrs?: ASTv1.AttrNode[];\n  modifiers?: ASTv1.ElementModifierStatement[];\n  children?: ASTv1.Statement[];\n  comments?: ASTv1.MustacheCommentStatement[];\n  blockParams?: ASTv1.VarHead[] | string[];\n  openTag?: SourceLocation;\n  closeTag?: Nullable<SourceLocation>;\n  loc?: SourceLocation;\n}\n\nfunction buildElement(tag: TagDescriptor, options: BuildElementOptions = {}): ASTv1.ElementNode {\n  let {\n    attrs,\n    blockParams,\n    modifiers,\n    comments,\n    children,\n    openTag,\n    closeTag: _closeTag,\n    loc,\n  } = options;\n\n  // this is used for backwards compat, prior to `selfClosing` being part of the ElementNode AST\n  let path: ASTv1.PathExpression;\n  let selfClosing: boolean | undefined;\n\n  if (typeof tag === 'string') {\n    if (tag.endsWith('/')) {\n      path = buildPath(tag.slice(0, -1));\n      selfClosing = true;\n    } else {\n      path = buildPath(tag);\n    }\n  } else if ('type' in tag) {\n    assert(tag.type === 'PathExpression', `Invalid tag type ${tag.type}`);\n    path = tag;\n  } else if ('path' in tag) {\n    assert(tag.path.type === 'PathExpression', `Invalid tag type ${tag.path.type}`);\n    path = tag.path;\n    selfClosing = tag.selfClosing;\n  } else {\n    path = buildPath(tag.name);\n    selfClosing = tag.selfClosing;\n  }\n\n  if (selfClosing) {\n    assert(\n      _closeTag === null || _closeTag === undefined,\n      'Cannot build a self-closing tag with a closeTag source location'\n    );\n  }\n\n  let params = blockParams?.map((param) => {\n    if (typeof param === 'string') {\n      return buildVar(param);\n    } else {\n      return param;\n    }\n  });\n\n  let closeTag: Nullable<SourceSpan> = null;\n\n  if (_closeTag) {\n    closeTag = buildLoc(_closeTag || null);\n  } else if (_closeTag === undefined) {\n    closeTag = selfClosing || isVoidTag(path.original) ? null : buildLoc(null);\n  }\n\n  return b.element({\n    path,\n    selfClosing: selfClosing || false,\n    attributes: attrs || [],\n    params: params || [],\n    modifiers: modifiers || [],\n    comments: comments || [],\n    children: children || [],\n    openTag: buildLoc(openTag || null),\n    closeTag,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildAttr(name: string, value: ASTv1.AttrValue, loc?: SourceLocation): ASTv1.AttrNode {\n  return b.attr({\n    name: name,\n    value: value,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildText(chars = '', loc?: SourceLocation): ASTv1.TextNode {\n  return b.text({\n    chars,\n    loc: buildLoc(loc || null),\n  });\n}\n\n// Expressions\n\nfunction buildSexpr(\n  path: BuilderHead,\n  params: ASTv1.Expression[] = [],\n  hash: ASTv1.Hash = buildHash([]),\n  loc?: SourceLocation\n): ASTv1.SubExpression {\n  return b.sexpr({\n    path: buildPath(path),\n    params,\n    hash,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildHead(original: string, loc?: SourceLocation): ASTv1.PathExpression {\n  let [head, ...tail] = asPresentArray(original.split('.'));\n  let headNode = b.head({ original: head, loc: buildLoc(loc || null) });\n  return b.path({ head: headNode, tail, loc: buildLoc(loc || null) });\n}\n\nfunction buildThis(loc?: SourceLocation): ASTv1.ThisHead {\n  return b.this({ loc: buildLoc(loc || null) });\n}\n\nfunction buildAtName(name: string, loc?: SourceLocation): ASTv1.AtHead {\n  return b.atName({ name, loc: buildLoc(loc || null) });\n}\n\nfunction buildVar(name: string, loc?: SourceLocation): ASTv1.VarHead {\n  return b.var({ name, loc: buildLoc(loc || null) });\n}\n\nfunction buildHeadFromString(original: string, loc?: SourceLocation): ASTv1.PathHead {\n  return b.head({ original, loc: buildLoc(loc || null) });\n}\n\nfunction buildCleanPath(\n  head: ASTv1.PathHead,\n  tail: string[] = [],\n  loc?: SourceLocation\n): ASTv1.PathExpression {\n  return b.path({ head, tail, loc: buildLoc(loc || null) });\n}\n\nfunction buildPath(\n  path: ASTv1.PathExpression | string | { head: string; tail: string[] },\n  loc?: SourceLocation\n): ASTv1.PathExpression;\nfunction buildPath(path: BuilderHead, loc?: SourceLocation): ASTv1.CallableExpression;\nfunction buildPath(path: BuilderHead | ASTv1.Literal, loc?: SourceLocation): ASTv1.Expression;\nfunction buildPath(path: ASTv1.Expression, loc?: SourceLocation): ASTv1.Expression;\nfunction buildPath(\n  path: BuilderHead | ASTv1.Expression | { head: string; tail: string[] },\n  loc?: SourceLocation\n): ASTv1.Expression {\n  let span = buildLoc(loc || null);\n\n  if (typeof path !== 'string') {\n    if ('type' in path) {\n      return path;\n    } else {\n      assert(\n        path.head.indexOf('.') === -1,\n        `builder.path({ head, tail }) should not be called with a head with dots in it`\n      );\n\n      let { head, tail } = path;\n\n      return b.path({\n        head: b.head({ original: head, loc: span.sliceStartChars({ chars: head.length }) }),\n        tail,\n        loc: buildLoc(loc || null),\n      });\n    }\n  }\n\n  let { head, tail } = buildHead(path, span);\n\n  return b.path({ head, tail, loc: span });\n}\n\nfunction buildLiteral<T extends ASTv1.Literal>(\n  type: T['type'],\n  value: T['value'],\n  loc?: SourceLocation\n): T {\n  return b.literal({\n    type,\n    value,\n    loc: buildLoc(loc || null),\n  });\n}\n\n// Miscellaneous\n\nfunction buildHash(pairs: ASTv1.HashPair[] = [], loc?: SourceLocation): ASTv1.Hash {\n  return b.hash({\n    pairs,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildPair(key: string, value: ASTv1.Expression, loc?: SourceLocation): ASTv1.HashPair {\n  return b.pair({\n    key,\n    value,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildProgram(\n  body?: ASTv1.Statement[],\n  blockParams?: string[],\n  loc?: SourceLocation\n): ASTv1.Template | ASTv1.Block {\n  deprecate(`b.program is deprecated. Use b.template or b.blockItself instead.`);\n\n  if (blockParams && blockParams.length) {\n    return buildBlockItself(body, blockParams, false, loc);\n  } else {\n    return buildTemplate(body, [], loc);\n  }\n}\n\nfunction buildBlockParams(params: ReadonlyArray<ASTv1.VarHead | string>): ASTv1.VarHead[] {\n  return params.map((p) =>\n    typeof p === 'string' ? b.var({ name: p, loc: SourceSpan.synthetic(p) }) : p\n  );\n}\n\nfunction buildBlockItself(\n  body: ASTv1.Statement[] = [],\n  params: Array<ASTv1.VarHead | string> = [],\n  chained = false,\n  loc?: SourceLocation\n): ASTv1.Block {\n  return b.blockItself({\n    body,\n    params: buildBlockParams(params),\n    chained,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildTemplate(\n  body: ASTv1.Statement[] = [],\n  blockParams: string[] = [],\n  loc?: SourceLocation\n): ASTv1.Template {\n  return b.template({\n    body,\n    blockParams,\n    loc: buildLoc(loc || null),\n  });\n}\n\nfunction buildPosition(line: number, column: number): SourcePosition {\n  return b.pos({\n    line,\n    column,\n  });\n}\n\nfunction buildLoc(loc: Nullable<SourceLocation>): SourceSpan;\nfunction buildLoc(\n  startLine: number,\n  startColumn: number,\n  endLine?: number,\n  endColumn?: number,\n  source?: string\n): SourceSpan;\nfunction buildLoc(\n  ...args:\n    | [Nullable<SourceLocation>]\n    | [\n        startLine: number,\n        startColumn: number,\n        endLine?: number | undefined,\n        endColumn?: number | undefined,\n        source?: string | undefined,\n      ]\n): SourceSpan {\n  if (args.length === 1) {\n    let loc = args[0];\n\n    if (loc && typeof loc === 'object') {\n      return SourceSpan.forHbsLoc(SOURCE(), loc);\n    } else {\n      return SourceSpan.forHbsLoc(SOURCE(), SYNTHETIC_LOCATION);\n    }\n  } else {\n    let [startLine, startColumn, endLine, endColumn, _source] = args;\n    let source = _source ? new Source('', _source) : SOURCE();\n\n    return SourceSpan.forHbsLoc(source, {\n      start: {\n        line: startLine,\n        column: startColumn,\n      },\n      end: {\n        line: endLine || startLine,\n        column: endColumn || startColumn,\n      },\n    });\n  }\n}\n\nexport default {\n  mustache: buildMustache,\n  block: buildBlock,\n  comment: buildComment,\n  mustacheComment: buildMustacheComment,\n  element: buildElement,\n  elementModifier: buildElementModifier,\n  attr: buildAttr,\n  text: buildText,\n  sexpr: buildSexpr,\n\n  concat: buildConcat,\n  hash: buildHash,\n  pair: buildPair,\n  literal: buildLiteral,\n  program: buildProgram,\n  blockItself: buildBlockItself,\n  template: buildTemplate,\n  loc: buildLoc,\n  pos: buildPosition,\n\n  path: buildPath,\n\n  fullPath: buildCleanPath,\n  head: buildHeadFromString,\n  at: buildAtName,\n  var: buildVar,\n  this: buildThis,\n\n  string: literal('StringLiteral') as (value: string) => ASTv1.StringLiteral,\n  boolean: literal('BooleanLiteral') as (value: boolean) => ASTv1.BooleanLiteral,\n  number: literal('NumberLiteral') as (value: number) => ASTv1.NumberLiteral,\n  undefined(): ASTv1.UndefinedLiteral {\n    return buildLiteral('UndefinedLiteral', undefined);\n  },\n  null(): ASTv1.NullLiteral {\n    return buildLiteral('NullLiteral', null);\n  },\n};\n\ntype BuildLiteral<T extends ASTv1.Literal> = (value: T['value']) => T;\n\nfunction literal<T extends ASTv1.Literal>(type: T['type']): BuildLiteral<T> {\n  return function (value: T['value'], loc?: SourceLocation): T {\n    return buildLiteral(type, value, loc);\n  };\n}\n","import type { Nullable, Optional, PresentArray } from '@glimmer/interfaces';\nimport { assert } from '@glimmer/util';\n\nimport type * as ASTv1 from './api';\n\nimport { SourceSpan } from '../source/span';\nimport { buildLegacyLiteral, buildLegacyMustache, buildLegacyPath } from './legacy-interop';\n\nconst DEFAULT_STRIP = {\n  close: false,\n  open: false,\n};\n\n/**\n * The Parser Builder differentiates from the public builder API by:\n *\n * 1. Offering fewer different ways to instantiate nodes\n * 2. Mandating source locations\n */\nclass Builders {\n  pos({ line, column }: { line: number; column: number }) {\n    return {\n      line,\n      column,\n    };\n  }\n\n  blockItself({\n    body,\n    params,\n    chained = false,\n    loc,\n  }: {\n    body: ASTv1.Statement[];\n    params: ASTv1.VarHead[];\n    chained?: Optional<boolean>;\n    loc: SourceSpan;\n  }): ASTv1.Block {\n    return {\n      type: 'Block',\n      body,\n      params,\n      get blockParams() {\n        return this.params.map((p) => p.name);\n      },\n      set blockParams(params: string[]) {\n        this.params = params.map((name) => {\n          return b.var({ name, loc: SourceSpan.synthetic(name) });\n        });\n      },\n      chained,\n      loc,\n    };\n  }\n\n  template({\n    body,\n    blockParams,\n    loc,\n  }: {\n    body: ASTv1.Statement[];\n    blockParams: string[];\n    loc: SourceSpan;\n  }): ASTv1.Template {\n    return {\n      type: 'Template',\n      body,\n      blockParams,\n      loc,\n    };\n  }\n\n  mustache({\n    path,\n    params,\n    hash,\n    trusting,\n    loc,\n    strip = DEFAULT_STRIP,\n  }: {\n    path: ASTv1.Expression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    trusting: boolean;\n    loc: SourceSpan;\n    strip?: Optional<ASTv1.StripFlags>;\n  }): ASTv1.MustacheStatement {\n    return buildLegacyMustache({\n      path,\n      params,\n      hash,\n      trusting,\n      strip,\n      loc,\n    });\n  }\n\n  block({\n    path,\n    params,\n    hash,\n    defaultBlock,\n    elseBlock = null,\n    loc,\n    openStrip = DEFAULT_STRIP,\n    inverseStrip = DEFAULT_STRIP,\n    closeStrip = DEFAULT_STRIP,\n  }: {\n    path: ASTv1.PathExpression | ASTv1.SubExpression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    defaultBlock: ASTv1.Block;\n    elseBlock: Nullable<ASTv1.Block>;\n    loc: SourceSpan;\n    openStrip?: Optional<ASTv1.StripFlags>;\n    inverseStrip?: Optional<ASTv1.StripFlags>;\n    closeStrip?: Optional<ASTv1.StripFlags>;\n  }): ASTv1.BlockStatement {\n    return {\n      type: 'BlockStatement',\n      path: path,\n      params,\n      hash,\n      program: defaultBlock,\n      inverse: elseBlock,\n      loc,\n      openStrip,\n      inverseStrip,\n      closeStrip,\n    };\n  }\n\n  comment({ value, loc }: { value: string; loc: SourceSpan }): ASTv1.CommentStatement {\n    return {\n      type: 'CommentStatement',\n      value,\n      loc,\n    };\n  }\n\n  mustacheComment({\n    value,\n    loc,\n  }: {\n    value: string;\n    loc: SourceSpan;\n  }): ASTv1.MustacheCommentStatement {\n    return {\n      type: 'MustacheCommentStatement',\n      value,\n      loc,\n    };\n  }\n\n  concat({\n    parts,\n    loc,\n  }: {\n    parts: PresentArray<ASTv1.TextNode | ASTv1.MustacheStatement>;\n    loc: SourceSpan;\n  }): ASTv1.ConcatStatement {\n    return {\n      type: 'ConcatStatement',\n      parts,\n      loc,\n    };\n  }\n\n  element({\n    path,\n    selfClosing,\n    attributes,\n    modifiers,\n    params,\n    comments,\n    children,\n    openTag,\n    closeTag,\n    loc,\n  }: {\n    path: ASTv1.PathExpression;\n    selfClosing: boolean;\n    attributes: ASTv1.AttrNode[];\n    modifiers: ASTv1.ElementModifierStatement[];\n    params: ASTv1.VarHead[];\n    children: ASTv1.Statement[];\n    comments: ASTv1.MustacheCommentStatement[];\n    openTag: SourceSpan;\n    closeTag: Nullable<SourceSpan>;\n    loc: SourceSpan;\n  }): ASTv1.ElementNode {\n    let _selfClosing = selfClosing;\n\n    return {\n      type: 'ElementNode',\n      path,\n      attributes,\n      modifiers,\n      params,\n      comments,\n      children,\n      openTag,\n      closeTag,\n      loc,\n      get tag() {\n        return this.path.original;\n      },\n      set tag(name: string) {\n        this.path.original = name;\n      },\n      get blockParams() {\n        return this.params.map((p) => p.name);\n      },\n      set blockParams(params: string[]) {\n        this.params = params.map((name) => {\n          return b.var({ name, loc: SourceSpan.synthetic(name) });\n        });\n      },\n      get selfClosing() {\n        return _selfClosing;\n      },\n      set selfClosing(selfClosing: boolean) {\n        _selfClosing = selfClosing;\n\n        if (selfClosing) {\n          this.closeTag = null;\n        } else {\n          this.closeTag = SourceSpan.synthetic(`</${this.tag}>`);\n        }\n      },\n    };\n  }\n\n  elementModifier({\n    path,\n    params,\n    hash,\n    loc,\n  }: {\n    path: ASTv1.PathExpression | ASTv1.SubExpression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    loc: SourceSpan;\n  }): ASTv1.ElementModifierStatement {\n    return {\n      type: 'ElementModifierStatement',\n      path,\n      params,\n      hash,\n      loc,\n    };\n  }\n\n  attr({\n    name,\n    value,\n    loc,\n  }: {\n    name: string;\n    value: ASTv1.AttrNode['value'];\n    loc: SourceSpan;\n  }): ASTv1.AttrNode {\n    return {\n      type: 'AttrNode',\n      name: name,\n      value: value,\n      loc,\n    };\n  }\n\n  text({ chars, loc }: { chars: string; loc: SourceSpan }): ASTv1.TextNode {\n    return {\n      type: 'TextNode',\n      chars,\n      loc,\n    };\n  }\n\n  sexpr({\n    path,\n    params,\n    hash,\n    loc,\n  }: {\n    path: ASTv1.PathExpression | ASTv1.SubExpression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    loc: SourceSpan;\n  }): ASTv1.SubExpression {\n    return {\n      type: 'SubExpression',\n      path,\n      params,\n      hash,\n      loc,\n    };\n  }\n\n  path({\n    head,\n    tail,\n    loc,\n  }: {\n    head: ASTv1.PathHead;\n    tail: string[];\n    loc: SourceSpan;\n  }): ASTv1.PathExpression {\n    return buildLegacyPath({ head, tail, loc });\n  }\n\n  head({ original, loc }: { original: string; loc: SourceSpan }): ASTv1.PathHead {\n    if (original === 'this') {\n      return this.this({ loc });\n    }\n    if (original[0] === '@') {\n      return this.atName({ name: original, loc });\n    } else {\n      return this.var({ name: original, loc });\n    }\n  }\n\n  this({ loc }: { loc: SourceSpan }): ASTv1.ThisHead {\n    return {\n      type: 'ThisHead',\n      get original() {\n        return 'this' as const;\n      },\n      loc,\n    };\n  }\n\n  atName({ name, loc }: { name: string; loc: SourceSpan }): ASTv1.AtHead {\n    let _name = '';\n\n    const node = {\n      type: 'AtHead' as const,\n      get name() {\n        return _name;\n      },\n      set name(value) {\n        assert(value[0] === '@', `call builders.at() with a string that starts with '@'`);\n        assert(\n          value.indexOf('.') === -1,\n          `builder.at() should not be called with a name with dots in it`\n        );\n        _name = value;\n      },\n      get original() {\n        return this.name;\n      },\n      set original(value) {\n        this.name = value;\n      },\n      loc,\n    };\n\n    // trigger the assertions\n    node.name = name;\n\n    return node;\n  }\n\n  var({ name, loc }: { name: string; loc: SourceSpan }): ASTv1.VarHead {\n    let _name = '';\n\n    const node = {\n      type: 'VarHead' as const,\n      get name() {\n        return _name;\n      },\n      set name(value) {\n        assert(\n          value !== 'this',\n          `You called builders.var() with 'this'. Call builders.this instead`\n        );\n        assert(\n          value[0] !== '@',\n          `You called builders.var() with '${name}'. Call builders.at('${name}') instead`\n        );\n        assert(\n          value.indexOf('.') === -1,\n          `builder.var() should not be called with a name with dots in it`\n        );\n        _name = value;\n      },\n      get original() {\n        return this.name;\n      },\n      set original(value) {\n        this.name = value;\n      },\n      loc,\n    };\n\n    // trigger the assertions\n    node.name = name;\n\n    return node;\n  }\n\n  hash({ pairs, loc }: { pairs: ASTv1.HashPair[]; loc: SourceSpan }): ASTv1.Hash {\n    return {\n      type: 'Hash',\n      pairs,\n      loc,\n    };\n  }\n\n  pair({\n    key,\n    value,\n    loc,\n  }: {\n    key: string;\n    value: ASTv1.Expression;\n    loc: SourceSpan;\n  }): ASTv1.HashPair {\n    return {\n      type: 'HashPair',\n      key,\n      value,\n      loc,\n    };\n  }\n\n  literal<T extends ASTv1.Literal>({\n    type,\n    value,\n    loc,\n  }: {\n    type: T['type'];\n    value: T['value'];\n    loc: SourceSpan;\n  }): T {\n    return buildLegacyLiteral({ type, value, loc });\n  }\n}\n\nconst b = new Builders();\n\nexport default b;\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { asPresentArray, deprecate } from '@glimmer/util';\n\nimport type * as ASTv1 from './nodes-v1';\n\nimport b from './public-builders';\n\nexport type MustacheStatementParams = Omit<ASTv1.MustacheStatement, 'type' | 'escaped'>;\n\nexport function buildLegacyMustache({\n  path,\n  params,\n  hash,\n  trusting,\n  strip,\n  loc,\n}: MustacheStatementParams): ASTv1.MustacheStatement {\n  const node = {\n    type: 'MustacheStatement',\n    path,\n    params,\n    hash,\n    trusting,\n    strip,\n    loc,\n  };\n\n  Object.defineProperty(node, 'escaped', {\n    enumerable: false,\n    get(this: typeof node): boolean {\n      deprecate(`The escaped property on mustache nodes is deprecated, use trusting instead`);\n      return !this.trusting;\n    },\n    set(this: typeof node, value: boolean) {\n      deprecate(`The escaped property on mustache nodes is deprecated, use trusting instead`);\n      this.trusting = !value;\n    },\n  });\n\n  return node as ASTv1.MustacheStatement;\n}\n\nexport type PathExpressionParams = Omit<ASTv1.MinimalPathExpression, 'type'>;\n\nexport function buildLegacyPath({ head, tail, loc }: PathExpressionParams): ASTv1.PathExpression {\n  const node = {\n    type: 'PathExpression',\n    head,\n    tail,\n    get original() {\n      return [this.head.original, ...this.tail].join('.');\n    },\n    set original(value: string) {\n      let [head, ...tail] = asPresentArray(value.split('.'));\n      this.head = b.head(head, this.head.loc);\n      this.tail = tail;\n    },\n    loc,\n  };\n\n  Object.defineProperty(node, 'parts', {\n    enumerable: false,\n    get(this: { original: string }): readonly string[] {\n      deprecate(`The parts property on path nodes is deprecated, use head and tail instead`);\n      let parts = asPresentArray(this.original.split('.'));\n\n      if (parts[0] === 'this') {\n        // parts does not include `this`\n        parts.shift();\n      } else if (parts[0].startsWith('@')) {\n        // parts does not include leading `@`\n        parts[0] = parts[0].slice(1);\n      }\n\n      return Object.freeze(parts);\n    },\n    set(this: { head: ASTv1.PathHead; original: string }, values: PresentArray<string>) {\n      deprecate(`The parts property on mustache nodes is deprecated, use head and tail instead`);\n\n      let parts = [...values];\n\n      // you are not supposed to already have `this` or `@` in the parts, but since this is\n      // deprecated anyway, we will infer what you meant and allow it\n      if (parts[0] !== 'this' && !parts[0]?.startsWith('@')) {\n        if (this.head.type === 'ThisHead') {\n          parts.unshift('this');\n        } else if (this.head.type === 'AtHead') {\n          parts[0] = `@${parts[0]}`;\n        }\n      }\n\n      this.original = parts.join('.');\n    },\n  });\n\n  Object.defineProperty(node, 'this', {\n    enumerable: false,\n    get(this: typeof node): boolean {\n      deprecate(`The this property on path nodes is deprecated, use head.type instead`);\n      return this.head.type === 'ThisHead';\n    },\n  });\n\n  Object.defineProperty(node, 'data', {\n    enumerable: false,\n    get(this: typeof node): boolean {\n      deprecate(`The data property on path nodes is deprecated, use head.type instead`);\n      return this.head.type === 'AtHead';\n    },\n  });\n\n  return node as ASTv1.PathExpression;\n}\n\nexport function buildLegacyLiteral<T extends ASTv1.Literal>({\n  type,\n  value,\n  loc,\n}: {\n  type: T['type'];\n  value: T['value'];\n  loc: T['loc'];\n}): T {\n  const node = {\n    type,\n    value,\n    loc,\n  };\n\n  Object.defineProperty(node, 'original', {\n    enumerable: false,\n    get(this: typeof node): T['original'] {\n      deprecate(`The original property on literal nodes is deprecated, use value instead`);\n      return this.value;\n    },\n    set(this: typeof node, value: T['original']) {\n      deprecate(`The original property on literal nodes is deprecated, use value instead`);\n      this.value = value;\n    },\n  });\n\n  return node as T;\n}\n","import type { Nullable } from '@glimmer/interfaces';\nimport { asPresentArray, assert, assign, expect, getLast, unwrap } from '@glimmer/util';\nimport {\n  EntityParser,\n  EventedTokenizer,\n  HTML5NamedCharRefs as namedCharRefs,\n} from 'simple-html-tokenizer';\n\nimport type * as src from './source/api';\nimport type * as ASTv1 from './v1/api';\nimport type * as HBS from './v1/handlebars-ast';\n\nexport type ParserNodeBuilder<N extends { loc: src.SourceSpan }> = Omit<N, 'loc'> & {\n  start: src.SourceOffset;\n};\n\nexport interface StartTag {\n  readonly type: 'StartTag';\n  name: string;\n  nameStart: Nullable<src.SourceOffset>;\n  nameEnd: Nullable<src.SourceOffset>;\n  readonly attributes: ASTv1.AttrNode[];\n  readonly modifiers: ASTv1.ElementModifierStatement[];\n  readonly comments: ASTv1.MustacheCommentStatement[];\n  readonly params: ASTv1.VarHead[];\n  selfClosing: boolean;\n  readonly loc: src.SourceSpan;\n}\n\nexport interface EndTag {\n  readonly type: 'EndTag';\n  name: string;\n  readonly loc: src.SourceSpan;\n}\n\nexport interface Attribute {\n  name: string;\n  currentPart: ASTv1.TextNode | null;\n  parts: (ASTv1.MustacheStatement | ASTv1.TextNode)[];\n  isQuoted: boolean;\n  isDynamic: boolean;\n  start: src.SourceOffset;\n  valueSpan: src.SourceSpan;\n}\n\nexport abstract class Parser {\n  protected elementStack: ASTv1.ParentNode[] = [];\n  private lines: string[];\n  readonly source: src.Source;\n  public currentAttribute: Nullable<Attribute> = null;\n  public currentNode: Nullable<\n    Readonly<\n      | ParserNodeBuilder<ASTv1.CommentStatement>\n      | ParserNodeBuilder<ASTv1.TextNode>\n      | ParserNodeBuilder<StartTag>\n      | ParserNodeBuilder<EndTag>\n    >\n  > = null;\n  public tokenizer: EventedTokenizer;\n\n  constructor(\n    source: src.Source,\n    entityParser = new EntityParser(namedCharRefs),\n    mode: 'precompile' | 'codemod' = 'precompile'\n  ) {\n    this.source = source;\n    this.lines = source.source.split(/\\r\\n?|\\n/u);\n    this.tokenizer = new EventedTokenizer(this, entityParser, mode);\n  }\n\n  offset(): src.SourceOffset {\n    let { line, column } = this.tokenizer;\n    return this.source.offsetFor(line, column);\n  }\n\n  pos({ line, column }: src.SourcePosition): src.SourceOffset {\n    return this.source.offsetFor(line, column);\n  }\n\n  finish<T extends { loc: src.SourceSpan }>(node: ParserNodeBuilder<T>): T {\n    return assign({}, node, {\n      loc: node.start.until(this.offset()),\n    } as const) as unknown as T;\n\n    // node.loc = node.loc.withEnd(end);\n  }\n\n  abstract parse(node: HBS.Program, locals: string[]): ASTv1.Template;\n\n  abstract Program(node: HBS.Program): HBS.Output<'Program'>;\n  abstract MustacheStatement(node: HBS.MustacheStatement): HBS.Output<'MustacheStatement'>;\n  abstract Decorator(node: HBS.Decorator): HBS.Output<'Decorator'>;\n  abstract BlockStatement(node: HBS.BlockStatement): HBS.Output<'BlockStatement'>;\n  abstract DecoratorBlock(node: HBS.DecoratorBlock): HBS.Output<'DecoratorBlock'>;\n  abstract PartialStatement(node: HBS.PartialStatement): HBS.Output<'PartialStatement'>;\n  abstract PartialBlockStatement(\n    node: HBS.PartialBlockStatement\n  ): HBS.Output<'PartialBlockStatement'>;\n  abstract ContentStatement(node: HBS.ContentStatement): HBS.Output<'ContentStatement'>;\n  abstract CommentStatement(node: HBS.CommentStatement): HBS.Output<'CommentStatement'>;\n  abstract SubExpression(node: HBS.SubExpression): HBS.Output<'SubExpression'>;\n  abstract PathExpression(node: HBS.PathExpression): HBS.Output<'PathExpression'>;\n  abstract StringLiteral(node: HBS.StringLiteral): HBS.Output<'StringLiteral'>;\n  abstract BooleanLiteral(node: HBS.BooleanLiteral): HBS.Output<'BooleanLiteral'>;\n  abstract NumberLiteral(node: HBS.NumberLiteral): HBS.Output<'NumberLiteral'>;\n  abstract UndefinedLiteral(node: HBS.UndefinedLiteral): HBS.Output<'UndefinedLiteral'>;\n  abstract NullLiteral(node: HBS.NullLiteral): HBS.Output<'NullLiteral'>;\n\n  abstract reset(): void;\n  abstract finishData(): void;\n  abstract tagOpen(): void;\n  abstract beginData(): void;\n  abstract appendToData(char: string): void;\n  abstract beginStartTag(): void;\n  abstract appendToTagName(char: string): void;\n  abstract beginAttribute(): void;\n  abstract appendToAttributeName(char: string): void;\n  abstract beginAttributeValue(quoted: boolean): void;\n  abstract appendToAttributeValue(char: string): void;\n  abstract finishAttributeValue(): void;\n  abstract markTagAsSelfClosing(): void;\n  abstract beginEndTag(): void;\n  abstract finishTag(): void;\n  abstract beginComment(): void;\n  abstract appendToCommentData(char: string): void;\n  abstract finishComment(): void;\n  abstract reportSyntaxError(error: string): void;\n\n  get currentAttr(): Attribute {\n    return expect(this.currentAttribute, 'expected attribute');\n  }\n\n  get currentTag(): ParserNodeBuilder<StartTag> | ParserNodeBuilder<EndTag> {\n    let node = this.currentNode;\n    assert(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag');\n    return node;\n  }\n\n  get currentStartTag(): ParserNodeBuilder<StartTag> {\n    let node = this.currentNode;\n    assert(node && node.type === 'StartTag', 'expected start tag');\n    return node;\n  }\n\n  get currentEndTag(): ParserNodeBuilder<EndTag> {\n    let node = this.currentNode;\n    assert(node && node.type === 'EndTag', 'expected end tag');\n    return node;\n  }\n\n  get currentComment(): ParserNodeBuilder<ASTv1.CommentStatement> {\n    let node = this.currentNode;\n    assert(node && node.type === 'CommentStatement', 'expected a comment');\n    return node;\n  }\n\n  get currentData(): ParserNodeBuilder<ASTv1.TextNode> {\n    let node = this.currentNode;\n    assert(node && node.type === 'TextNode', 'expected a text node');\n    return node;\n  }\n\n  acceptNode<T extends HBS.NodeType>(node: HBS.Node<T>): HBS.Output<T> {\n    return (this[node.type as T] as (node: HBS.Node<T>) => HBS.Output<T>)(node);\n  }\n\n  currentElement(): ASTv1.ParentNode {\n    return getLast(asPresentArray(this.elementStack));\n  }\n\n  sourceForNode(node: HBS.Node, endNode?: { loc: HBS.SourceLocation }): string {\n    let firstLine = node.loc.start.line - 1;\n    let currentLine = firstLine - 1;\n    let firstColumn = node.loc.start.column;\n    let string = [];\n    let line: string;\n\n    let lastLine: number;\n    let lastColumn: number;\n\n    if (endNode) {\n      lastLine = endNode.loc.end.line - 1;\n      lastColumn = endNode.loc.end.column;\n    } else {\n      lastLine = node.loc.end.line - 1;\n      lastColumn = node.loc.end.column;\n    }\n\n    while (currentLine < lastLine) {\n      currentLine++;\n      line = unwrap(this.lines[currentLine]);\n\n      if (currentLine === firstLine) {\n        if (firstLine === lastLine) {\n          string.push(line.slice(firstColumn, lastColumn));\n        } else {\n          string.push(line.slice(firstColumn));\n        }\n      } else if (currentLine === lastLine) {\n        string.push(line.slice(0, lastColumn));\n      } else {\n        string.push(line);\n      }\n    }\n\n    return string.join('\\n');\n  }\n}\n","import type { Nullable, Recast } from '@glimmer/interfaces';\nimport type { TokenizerState } from 'simple-html-tokenizer';\nimport { assert, getLast, isPresentArray, unwrap } from '@glimmer/util';\n\nimport type { ParserNodeBuilder, StartTag } from '../parser';\nimport type { SourceOffset, SourceSpan } from '../source/span';\nimport type * as ASTv1 from '../v1/api';\nimport type * as HBS from '../v1/handlebars-ast';\n\nimport { Parser } from '../parser';\nimport { NON_EXISTENT_LOCATION } from '../source/location';\nimport { generateSyntaxError } from '../syntax-error';\nimport { appendChild, isHBSLiteral, printLiteral } from '../utils';\nimport b from '../v1/parser-builders';\n\nconst BEFORE_ATTRIBUTE_NAME = 'beforeAttributeName' as TokenizerState.beforeAttributeName;\nconst ATTRIBUTE_VALUE_UNQUOTED = 'attributeValueUnquoted' as TokenizerState.attributeValueUnquoted;\n\nexport interface PendingError {\n  mustache(span: SourceSpan): never;\n  eof(offset: SourceOffset): never;\n}\n\nexport abstract class HandlebarsNodeVisitors extends Parser {\n  // Because we interleave the HTML and HBS parsing, sometimes the HTML\n  // tokenizer can run out of tokens when we switch into {{...}} or reached\n  // EOF. There are positions where neither of these are expected, and it would\n  // like to generate an error, but there is no span to attach the error to.\n  // This allows the HTML tokenization to stash an error message and the next\n  // mustache visitor will attach the message to the appropriate span and throw\n  // the error.\n  protected pendingError: Nullable<PendingError> = null;\n\n  abstract override appendToCommentData(s: string): void;\n  abstract override beginAttributeValue(quoted: boolean): void;\n  abstract override finishAttributeValue(): void;\n\n  parse(program: HBS.Program, blockParams: string[]): ASTv1.Template {\n    let node = b.template({\n      body: [],\n      blockParams,\n      loc: this.source.spanFor(program.loc),\n    });\n\n    let template = this.parseProgram(node, program);\n\n    // TODO: we really need to verify that the tokenizer is in an acceptable\n    // state when we are \"done\" parsing. For example, right now, `<foo` parses\n    // into `Template { body: [] }` which is obviously incorrect\n\n    this.pendingError?.eof(template.loc.getEnd());\n\n    return template;\n  }\n\n  Program(program: HBS.Program, blockParams?: ASTv1.VarHead[]): ASTv1.Block {\n    // The abstract signature doesn't have the blockParams argument, but in\n    // practice we can only come from this.BlockStatement() which adds the\n    // extra argument for us\n    assert(\n      Array.isArray(blockParams),\n      '[BUG] Program in parser unexpectedly called without block params'\n    );\n\n    let node = b.blockItself({\n      body: [],\n      params: blockParams,\n      chained: program.chained,\n      loc: this.source.spanFor(program.loc),\n    });\n\n    return this.parseProgram(node, program);\n  }\n\n  private parseProgram<T extends ASTv1.ParentNode>(node: T, program: HBS.Program): T {\n    if (program.body.length === 0) {\n      return node;\n    }\n\n    let poppedNode;\n\n    try {\n      this.elementStack.push(node);\n\n      for (let child of program.body) {\n        this.acceptNode(child);\n      }\n    } finally {\n      poppedNode = this.elementStack.pop();\n    }\n\n    // Ensure that that the element stack is balanced properly.\n    if (node !== poppedNode) {\n      if (poppedNode?.type === 'ElementNode') {\n        throw generateSyntaxError(`Unclosed element \\`${poppedNode.tag}\\``, poppedNode.loc);\n      } else {\n        // If the stack is not balanced, then it is likely our own bug, because\n        // any unclosed Handlebars blocks should already been caught by now\n        assert(poppedNode !== undefined, '[BUG] empty parser elementStack');\n        assert(false, `[BUG] mismatched parser elementStack node: ${node.type}`);\n      }\n    }\n\n    return node;\n  }\n\n  BlockStatement(block: HBS.BlockStatement): ASTv1.BlockStatement | void {\n    if (this.tokenizer.state === 'comment') {\n      this.appendToCommentData(this.sourceForNode(block));\n      return;\n    }\n\n    if (this.tokenizer.state !== 'data' && this.tokenizer.state !== 'beforeData') {\n      throw generateSyntaxError(\n        'A block may only be used inside an HTML element or another block.',\n        this.source.spanFor(block.loc)\n      );\n    }\n\n    const { path, params, hash } = acceptCallNodes(this, block);\n    const loc = this.source.spanFor(block.loc);\n\n    // Backfill block params loc for the default block\n    let blockParams: ASTv1.VarHead[] = [];\n\n    if (block.program.blockParams?.length) {\n      // Start from right after the hash\n      let span = hash.loc.collapse('end');\n\n      // Extend till the beginning of the block\n      if (block.program.loc) {\n        span = span.withEnd(this.source.spanFor(block.program.loc).getStart());\n      } else if (block.program.body[0]) {\n        span = span.withEnd(this.source.spanFor(block.program.body[0].loc).getStart());\n      } else {\n        // ...or if all else fail, use the end of the block statement\n        // this can only happen if the block statement is empty anyway\n        span = span.withEnd(loc.getEnd());\n      }\n\n      // Now we have a span for something like this:\n      //\n      //   {{#foo bar baz=bat as |wow wat|}}\n      //                     ~~~~~~~~~~~~~~~\n      //\n      // Or, if we are unlucky:\n      //\n      // {{#foo bar baz=bat as |wow wat|}}{{/foo}}\n      //                   ~~~~~~~~~~~~~~~~~~~~~~~\n      //\n      // Either way, within this span, there should be exactly two pipes\n      // fencing our block params, neatly whitespace separated and with\n      // legal identifiers only\n      const content = span.asString();\n      let skipStart = content.indexOf('|') + 1;\n      const limit = content.indexOf('|', skipStart);\n\n      for (const name of block.program.blockParams) {\n        let nameStart: number;\n        let loc: SourceSpan;\n\n        if (skipStart >= limit) {\n          nameStart = -1;\n        } else {\n          nameStart = content.indexOf(name, skipStart);\n        }\n\n        if (nameStart === -1 || nameStart + name.length > limit) {\n          skipStart = limit;\n          loc = this.source.spanFor(NON_EXISTENT_LOCATION);\n        } else {\n          skipStart = nameStart;\n          loc = span.sliceStartChars({ skipStart, chars: name.length });\n          skipStart += name.length;\n        }\n\n        blockParams.push(b.var({ name, loc }));\n      }\n    }\n\n    // These are bugs in Handlebars upstream\n    if (!block.program.loc) {\n      block.program.loc = NON_EXISTENT_LOCATION;\n    }\n\n    if (block.inverse && !block.inverse.loc) {\n      block.inverse.loc = NON_EXISTENT_LOCATION;\n    }\n\n    const program = this.Program(block.program, blockParams);\n    const inverse = block.inverse ? this.Program(block.inverse, []) : null;\n\n    const node = b.block({\n      path,\n      params,\n      hash,\n      defaultBlock: program,\n      elseBlock: inverse,\n      loc: this.source.spanFor(block.loc),\n      openStrip: block.openStrip,\n      inverseStrip: block.inverseStrip,\n      closeStrip: block.closeStrip,\n    });\n\n    const parentProgram = this.currentElement();\n\n    appendChild(parentProgram, node);\n  }\n\n  MustacheStatement(rawMustache: HBS.MustacheStatement): ASTv1.MustacheStatement | void {\n    this.pendingError?.mustache(this.source.spanFor(rawMustache.loc));\n\n    const { tokenizer } = this;\n\n    if (tokenizer.state === 'comment') {\n      this.appendToCommentData(this.sourceForNode(rawMustache));\n      return;\n    }\n\n    let mustache: ASTv1.MustacheStatement;\n    const { escaped, loc, strip } = rawMustache;\n\n    if ('original' in rawMustache.path && rawMustache.path.original === '...attributes') {\n      throw generateSyntaxError(\n        'Illegal use of ...attributes',\n        this.source.spanFor(rawMustache.loc)\n      );\n    }\n\n    if (isHBSLiteral(rawMustache.path)) {\n      mustache = b.mustache({\n        path: this.acceptNode<(typeof rawMustache.path)['type']>(rawMustache.path),\n        params: [],\n        hash: b.hash({ pairs: [], loc: this.source.spanFor(rawMustache.path.loc).collapse('end') }),\n        trusting: !escaped,\n        loc: this.source.spanFor(loc),\n        strip,\n      });\n    } else {\n      const { path, params, hash } = acceptCallNodes(\n        this,\n        rawMustache as HBS.MustacheStatement & {\n          path: HBS.PathExpression | HBS.SubExpression;\n        }\n      );\n      mustache = b.mustache({\n        path,\n        params,\n        hash,\n        trusting: !escaped,\n        loc: this.source.spanFor(loc),\n        strip,\n      });\n    }\n\n    switch (tokenizer.state) {\n      // Tag helpers\n      case 'tagOpen':\n      case 'tagName':\n        throw generateSyntaxError(`Cannot use mustaches in an elements tagname`, mustache.loc);\n\n      case 'beforeAttributeName':\n        addElementModifier(this.currentStartTag, mustache);\n        break;\n      case 'attributeName':\n      case 'afterAttributeName':\n        this.beginAttributeValue(false);\n        this.finishAttributeValue();\n        addElementModifier(this.currentStartTag, mustache);\n        tokenizer.transitionTo(BEFORE_ATTRIBUTE_NAME);\n        break;\n      case 'afterAttributeValueQuoted':\n        addElementModifier(this.currentStartTag, mustache);\n        tokenizer.transitionTo(BEFORE_ATTRIBUTE_NAME);\n        break;\n\n      // Attribute values\n      case 'beforeAttributeValue':\n        this.beginAttributeValue(false);\n        this.appendDynamicAttributeValuePart(mustache);\n        tokenizer.transitionTo(ATTRIBUTE_VALUE_UNQUOTED);\n        break;\n      case 'attributeValueDoubleQuoted':\n      case 'attributeValueSingleQuoted':\n      case 'attributeValueUnquoted':\n        this.appendDynamicAttributeValuePart(mustache);\n        break;\n\n      // TODO: Only append child when the tokenizer state makes\n      // sense to do so, otherwise throw an error.\n      default:\n        appendChild(this.currentElement(), mustache);\n    }\n\n    return mustache;\n  }\n\n  appendDynamicAttributeValuePart(part: ASTv1.MustacheStatement): void {\n    this.finalizeTextPart();\n    const attr = this.currentAttr;\n    attr.isDynamic = true;\n    attr.parts.push(part);\n  }\n\n  finalizeTextPart(): void {\n    const attr = this.currentAttr;\n    const text = attr.currentPart;\n    if (text !== null) {\n      this.currentAttr.parts.push(text);\n      this.startTextPart();\n    }\n  }\n\n  startTextPart(): void {\n    this.currentAttr.currentPart = null;\n  }\n\n  ContentStatement(content: HBS.ContentStatement): void {\n    updateTokenizerLocation(this.tokenizer, content);\n\n    this.tokenizer.tokenizePart(content.value);\n    this.tokenizer.flushData();\n  }\n\n  CommentStatement(rawComment: HBS.CommentStatement): Nullable<ASTv1.MustacheCommentStatement> {\n    const { tokenizer } = this;\n\n    if (tokenizer.state === 'comment') {\n      this.appendToCommentData(this.sourceForNode(rawComment));\n      return null;\n    }\n\n    const { value, loc } = rawComment;\n    const comment = b.mustacheComment({ value, loc: this.source.spanFor(loc) });\n\n    switch (tokenizer.state) {\n      case 'beforeAttributeName':\n      case 'afterAttributeName':\n        this.currentStartTag.comments.push(comment);\n        break;\n\n      case 'beforeData':\n      case 'data':\n        appendChild(this.currentElement(), comment);\n        break;\n\n      default:\n        throw generateSyntaxError(\n          `Using a Handlebars comment when in the \\`${tokenizer['state']}\\` state is not supported`,\n          this.source.spanFor(rawComment.loc)\n        );\n    }\n\n    return comment;\n  }\n\n  PartialStatement(partial: HBS.PartialStatement): never {\n    throw generateSyntaxError(\n      `Handlebars partials are not supported`,\n      this.source.spanFor(partial.loc)\n    );\n  }\n\n  PartialBlockStatement(partialBlock: HBS.PartialBlockStatement): never {\n    throw generateSyntaxError(\n      `Handlebars partial blocks are not supported`,\n      this.source.spanFor(partialBlock.loc)\n    );\n  }\n\n  Decorator(decorator: HBS.Decorator): never {\n    throw generateSyntaxError(\n      `Handlebars decorators are not supported`,\n      this.source.spanFor(decorator.loc)\n    );\n  }\n\n  DecoratorBlock(decoratorBlock: HBS.DecoratorBlock): never {\n    throw generateSyntaxError(\n      `Handlebars decorator blocks are not supported`,\n      this.source.spanFor(decoratorBlock.loc)\n    );\n  }\n\n  SubExpression(sexpr: HBS.SubExpression): ASTv1.SubExpression {\n    const { path, params, hash } = acceptCallNodes(this, sexpr);\n    return b.sexpr({ path, params, hash, loc: this.source.spanFor(sexpr.loc) });\n  }\n\n  PathExpression(path: HBS.PathExpression): ASTv1.PathExpression {\n    const { original } = path;\n    let parts: string[];\n\n    if (original.indexOf('/') !== -1) {\n      if (original.slice(0, 2) === './') {\n        throw generateSyntaxError(\n          `Using \"./\" is not supported in Glimmer and unnecessary`,\n          this.source.spanFor(path.loc)\n        );\n      }\n      if (original.slice(0, 3) === '../') {\n        throw generateSyntaxError(\n          `Changing context using \"../\" is not supported in Glimmer`,\n          this.source.spanFor(path.loc)\n        );\n      }\n      if (original.indexOf('.') !== -1) {\n        throw generateSyntaxError(\n          `Mixing '.' and '/' in paths is not supported in Glimmer; use only '.' to separate property paths`,\n          this.source.spanFor(path.loc)\n        );\n      }\n      parts = [path.parts.join('/')];\n    } else if (original === '.') {\n      throw generateSyntaxError(\n        `'.' is not a supported path in Glimmer; check for a path with a trailing '.'`,\n        this.source.spanFor(path.loc)\n      );\n    } else {\n      parts = path.parts;\n    }\n\n    let thisHead = false;\n\n    // This is to fix a bug in the Handlebars AST where the path expressions in\n    // `{{this.foo}}` (and similarly `{{foo-bar this.foo named=this.foo}}` etc)\n    // are simply turned into `{{foo}}`. The fix is to push it back onto the\n    // parts array and let the runtime see the difference. However, we cannot\n    // simply use the string `this` as it means literally the property called\n    // \"this\" in the current context (it can be expressed in the syntax as\n    // `{{[this]}}`, where the square bracket are generally for this kind of\n    // escaping – such as `{{foo.[\"bar.baz\"]}}` would mean lookup a property\n    // named literally \"bar.baz\" on `this.foo`). By convention, we use `null`\n    // for this purpose.\n    if (/^this(?:\\..+)?$/u.test(original)) {\n      thisHead = true;\n    }\n\n    let pathHead: ASTv1.PathHead;\n    if (thisHead) {\n      pathHead = b.this({\n        loc: this.source.spanFor({\n          start: path.loc.start,\n          end: { line: path.loc.start.line, column: path.loc.start.column + 4 },\n        }),\n      });\n    } else if (path.data) {\n      const head = parts.shift();\n\n      if (head === undefined) {\n        throw generateSyntaxError(\n          `Attempted to parse a path expression, but it was not valid. Paths beginning with @ must start with a-z.`,\n          this.source.spanFor(path.loc)\n        );\n      }\n\n      pathHead = b.atName({\n        name: `@${head}`,\n        loc: this.source.spanFor({\n          start: path.loc.start,\n          end: { line: path.loc.start.line, column: path.loc.start.column + head.length + 1 },\n        }),\n      });\n    } else {\n      const head = parts.shift();\n\n      if (head === undefined) {\n        throw generateSyntaxError(\n          `Attempted to parse a path expression, but it was not valid. Paths must start with a-z or A-Z.`,\n          this.source.spanFor(path.loc)\n        );\n      }\n\n      pathHead = b.var({\n        name: head,\n        loc: this.source.spanFor({\n          start: path.loc.start,\n          end: { line: path.loc.start.line, column: path.loc.start.column + head.length },\n        }),\n      });\n    }\n\n    return b.path({\n      head: pathHead,\n      tail: parts,\n      loc: this.source.spanFor(path.loc),\n    });\n  }\n\n  Hash(hash: HBS.Hash): ASTv1.Hash {\n    const pairs = hash.pairs.map((pair) =>\n      b.pair({\n        key: pair.key,\n        value: this.acceptNode<HBS.Expression['type']>(pair.value),\n        loc: this.source.spanFor(pair.loc),\n      })\n    );\n\n    return b.hash({ pairs, loc: this.source.spanFor(hash.loc) });\n  }\n\n  StringLiteral(string: HBS.StringLiteral): ASTv1.StringLiteral {\n    return b.literal({\n      type: 'StringLiteral',\n      value: string.value,\n      loc: this.source.spanFor(string.loc),\n    });\n  }\n\n  BooleanLiteral(boolean: HBS.BooleanLiteral): ASTv1.BooleanLiteral {\n    return b.literal({\n      type: 'BooleanLiteral',\n      value: boolean.value,\n      loc: this.source.spanFor(boolean.loc),\n    });\n  }\n\n  NumberLiteral(number: HBS.NumberLiteral): ASTv1.NumberLiteral {\n    return b.literal({\n      type: 'NumberLiteral',\n      value: number.value,\n      loc: this.source.spanFor(number.loc),\n    });\n  }\n\n  UndefinedLiteral(undef: HBS.UndefinedLiteral): ASTv1.UndefinedLiteral {\n    return b.literal({\n      type: 'UndefinedLiteral',\n      value: undefined,\n      loc: this.source.spanFor(undef.loc),\n    });\n  }\n\n  NullLiteral(nul: HBS.NullLiteral): ASTv1.NullLiteral {\n    return b.literal({\n      type: 'NullLiteral',\n      value: null,\n      loc: this.source.spanFor(nul.loc),\n    });\n  }\n}\n\nfunction calculateRightStrippedOffsets(original: string, value: string) {\n  if (value === '') {\n    // if it is empty, just return the count of newlines\n    // in original\n    return {\n      lines: original.split('\\n').length - 1,\n      columns: 0,\n    };\n  }\n\n  // otherwise, return the number of newlines prior to\n  // `value`\n  const [difference] = original.split(value) as [string];\n  const lines = difference.split(/\\n/u);\n  const lineCount = lines.length - 1;\n\n  return {\n    lines: lineCount,\n    columns: unwrap(lines[lineCount]).length,\n  };\n}\n\nfunction updateTokenizerLocation(tokenizer: Parser['tokenizer'], content: HBS.ContentStatement) {\n  let line = content.loc.start.line;\n  let column = content.loc.start.column;\n\n  const offsets = calculateRightStrippedOffsets(\n    content.original as Recast<HBS.StripFlags, string>,\n    content.value\n  );\n\n  line = line + offsets.lines;\n  if (offsets.lines) {\n    column = offsets.columns;\n  } else {\n    column = column + offsets.columns;\n  }\n\n  tokenizer.line = line;\n  tokenizer.column = column;\n}\n\nfunction acceptCallNodes(\n  compiler: HandlebarsNodeVisitors,\n  node: {\n    path:\n      | HBS.PathExpression\n      | HBS.SubExpression\n      | HBS.StringLiteral\n      | HBS.UndefinedLiteral\n      | HBS.NullLiteral\n      | HBS.NumberLiteral\n      | HBS.BooleanLiteral;\n    params: HBS.Expression[];\n    hash: HBS.Hash;\n  }\n): {\n  path: ASTv1.PathExpression | ASTv1.SubExpression;\n  params: ASTv1.Expression[];\n  hash: ASTv1.Hash;\n} {\n  let path: ASTv1.PathExpression | ASTv1.SubExpression;\n\n  switch (node.path.type) {\n    case 'PathExpression':\n      path = compiler.PathExpression(node.path);\n      break;\n\n    case 'SubExpression':\n      path = compiler.SubExpression(node.path);\n      break;\n\n    case 'StringLiteral':\n    case 'UndefinedLiteral':\n    case 'NullLiteral':\n    case 'NumberLiteral':\n    case 'BooleanLiteral': {\n      let value: string;\n      if (node.path.type === 'BooleanLiteral') {\n        value = node.path.original.toString();\n      } else if (node.path.type === 'StringLiteral') {\n        value = `\"${node.path.original}\"`;\n      } else if (node.path.type === 'NullLiteral') {\n        value = 'null';\n      } else if (node.path.type === 'NumberLiteral') {\n        value = node.path.value.toString();\n      } else {\n        value = 'undefined';\n      }\n      throw generateSyntaxError(\n        `${node.path.type} \"${\n          node.path.type === 'StringLiteral' ? node.path.original : value\n        }\" cannot be called as a sub-expression, replace (${value}) with ${value}`,\n        compiler.source.spanFor(node.path.loc)\n      );\n    }\n  }\n\n  const params = node.params\n    ? node.params.map((e) => compiler.acceptNode<HBS.Expression['type']>(e))\n    : [];\n\n  // if there is no hash, position it as a collapsed node immediately after the last param (or the\n  // path, if there are also no params)\n  const end = isPresentArray(params) ? getLast(params).loc : path.loc;\n\n  const hash = node.hash\n    ? compiler.Hash(node.hash)\n    : b.hash({\n        pairs: [],\n        loc: compiler.source.spanFor(end).collapse('end'),\n      });\n\n  return { path, params, hash };\n}\n\nfunction addElementModifier(\n  element: ParserNodeBuilder<StartTag>,\n  mustache: ASTv1.MustacheStatement\n) {\n  const { path, params, hash, loc } = mustache;\n\n  if (isHBSLiteral(path)) {\n    const modifier = `{{${printLiteral(path)}}}`;\n    const tag = `<${element.name} ... ${modifier} ...`;\n\n    throw generateSyntaxError(`In ${tag}, ${modifier} is not a valid modifier`, mustache.loc);\n  }\n\n  const modifier = b.elementModifier({ path, params, hash, loc });\n  element.modifiers.push(modifier);\n}\n","import type { Nullable } from '@glimmer/interfaces';\nimport type { TokenizerState } from 'simple-html-tokenizer';\nimport {\n  asPresentArray,\n  assert,\n  assertPresentArray,\n  assign,\n  getFirst,\n  getLast,\n  isPresentArray,\n} from '@glimmer/util';\nimport { parse, parseWithoutProcessing } from '@handlebars/parser';\nimport { EntityParser } from 'simple-html-tokenizer';\n\nimport type { EndTag, StartTag } from '../parser';\nimport type { NodeVisitor } from '../traversal/visitor';\nimport type * as ASTv1 from '../v1/api';\nimport type * as HBS from '../v1/handlebars-ast';\n\nimport print from '../generation/print';\nimport { voidMap } from '../generation/printer';\nimport * as src from '../source/api';\nimport { generateSyntaxError } from '../syntax-error';\nimport traverse from '../traversal/traverse';\nimport Walker from '../traversal/walker';\nimport { appendChild } from '../utils';\nimport b from '../v1/parser-builders';\nimport publicBuilder from '../v1/public-builders';\nimport { HandlebarsNodeVisitors } from './handlebars-node-visitors';\n\n// vendored from simple-html-tokenizer because it's unexported\nfunction isSpace(char: string): boolean {\n  return /[\\t\\n\\f ]/u.test(char);\n}\n\nexport class TokenizerEventHandlers extends HandlebarsNodeVisitors {\n  private tagOpenLine = 0;\n  private tagOpenColumn = 0;\n\n  reset(): void {\n    this.currentNode = null;\n  }\n\n  // Comment\n\n  beginComment(): void {\n    this.currentNode = {\n      type: 'CommentStatement',\n      value: '',\n      start: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn),\n    };\n  }\n\n  appendToCommentData(char: string): void {\n    this.currentComment.value += char;\n  }\n\n  finishComment(): void {\n    appendChild(this.currentElement(), b.comment(this.finish(this.currentComment)));\n  }\n\n  // Data\n\n  beginData(): void {\n    this.currentNode = {\n      type: 'TextNode',\n      chars: '',\n      start: this.offset(),\n    };\n  }\n\n  appendToData(char: string): void {\n    this.currentData.chars += char;\n  }\n\n  finishData(): void {\n    appendChild(this.currentElement(), b.text(this.finish(this.currentData)));\n  }\n\n  // Tags - basic\n\n  tagOpen(): void {\n    this.tagOpenLine = this.tokenizer.line;\n    this.tagOpenColumn = this.tokenizer.column;\n  }\n\n  beginStartTag(): void {\n    this.currentNode = {\n      type: 'StartTag',\n      name: '',\n      nameStart: null,\n      nameEnd: null,\n      attributes: [],\n      modifiers: [],\n      comments: [],\n      params: [],\n      selfClosing: false,\n      start: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn),\n    };\n  }\n\n  beginEndTag(): void {\n    this.currentNode = {\n      type: 'EndTag',\n      name: '',\n      start: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn),\n    };\n  }\n\n  finishTag(): void {\n    let tag = this.finish<StartTag | EndTag>(this.currentTag);\n\n    if (tag.type === 'StartTag') {\n      this.finishStartTag();\n\n      if (tag.name === ':') {\n        throw generateSyntaxError(\n          'Invalid named block named detected, you may have created a named block without a name, or you may have began your name with a number. Named blocks must have names that are at least one character long, and begin with a lower case letter',\n          this.source.spanFor({\n            start: this.currentTag.start.toJSON(),\n            end: this.offset().toJSON(),\n          })\n        );\n      }\n\n      if (voidMap.has(tag.name) || tag.selfClosing) {\n        this.finishEndTag(true);\n      }\n    } else if (tag.type === 'EndTag') {\n      this.finishEndTag(false);\n    }\n  }\n\n  finishStartTag(): void {\n    let { name, nameStart, nameEnd } = this.currentStartTag;\n\n    // <> should probably be a syntax error, but s-h-t is currently broken for that case\n    assert(name !== '', 'tag name cannot be empty');\n    assert(nameStart !== null, 'nameStart unexpectedly null');\n    assert(nameEnd !== null, 'nameEnd unexpectedly null');\n\n    let nameLoc = nameStart.until(nameEnd);\n    let [head, ...tail] = asPresentArray(name.split('.'));\n    let path = b.path({\n      head: b.head({ original: head, loc: nameLoc.sliceStartChars({ chars: head.length }) }),\n      tail,\n      loc: nameLoc,\n    });\n\n    let { attributes, modifiers, comments, params, selfClosing, loc } = this.finish(\n      this.currentStartTag\n    );\n\n    let element = b.element({\n      path,\n      selfClosing,\n      attributes,\n      modifiers,\n      comments,\n      params,\n      children: [],\n      openTag: loc,\n      closeTag: selfClosing ? null : src.SourceSpan.broken(),\n      loc,\n    });\n    this.elementStack.push(element);\n  }\n\n  finishEndTag(isVoid: boolean): void {\n    let { start: closeTagStart } = this.currentTag;\n    let tag = this.finish<StartTag | EndTag>(this.currentTag);\n\n    let element = this.elementStack.pop() as ASTv1.ElementNode;\n\n    this.validateEndTag(tag, element, isVoid);\n    let parent = this.currentElement();\n\n    if (isVoid) {\n      element.closeTag = null;\n    } else if (element.selfClosing) {\n      assert(element.closeTag === null, 'element.closeTag unexpectedly present');\n    } else {\n      element.closeTag = closeTagStart.until(this.offset());\n    }\n\n    element.loc = element.loc.withEnd(this.offset());\n\n    appendChild(parent, b.element(element));\n  }\n\n  markTagAsSelfClosing(): void {\n    let tag = this.currentTag;\n\n    if (tag.type === 'StartTag') {\n      tag.selfClosing = true;\n    } else {\n      throw generateSyntaxError(\n        `Invalid end tag: closing tag must not be self-closing`,\n        this.source.spanFor({ start: tag.start.toJSON(), end: this.offset().toJSON() })\n      );\n    }\n  }\n\n  // Tags - name\n\n  appendToTagName(char: string): void {\n    let tag = this.currentTag;\n    tag.name += char;\n\n    if (tag.type === 'StartTag') {\n      let offset = this.offset();\n\n      if (tag.nameStart === null) {\n        assert(tag.nameEnd === null, 'nameStart and nameEnd must both be null');\n\n        // Note that the tokenizer already consumed the token here\n        tag.nameStart = offset.move(-1);\n      }\n\n      tag.nameEnd = offset;\n    }\n  }\n\n  // Tags - attributes\n\n  beginAttribute(): void {\n    let offset = this.offset();\n\n    this.currentAttribute = {\n      name: '',\n      parts: [],\n      currentPart: null,\n      isQuoted: false,\n      isDynamic: false,\n      start: offset,\n      valueSpan: offset.collapsed(),\n    };\n  }\n\n  appendToAttributeName(char: string): void {\n    this.currentAttr.name += char;\n\n    // The block params parsing code can actually handle peek=non-space just\n    // fine, but this check was added as an optimization, as there is a little\n    // bit of setup overhead for the parsing logic just to immediately bail\n    if (this.currentAttr.name === 'as') {\n      this.parsePossibleBlockParams();\n    }\n  }\n\n  beginAttributeValue(isQuoted: boolean): void {\n    this.currentAttr.isQuoted = isQuoted;\n    this.startTextPart();\n    this.currentAttr.valueSpan = this.offset().collapsed();\n  }\n\n  appendToAttributeValue(char: string): void {\n    let parts = this.currentAttr.parts;\n    let lastPart = parts[parts.length - 1];\n\n    let current = this.currentAttr.currentPart;\n\n    if (current) {\n      current.chars += char;\n\n      // update end location for each added char\n      current.loc = current.loc.withEnd(this.offset());\n    } else {\n      // initially assume the text node is a single char\n      let loc: src.SourceOffset = this.offset();\n\n      // the tokenizer line/column have already been advanced, correct location info\n      if (char === '\\n') {\n        loc = lastPart ? lastPart.loc.getEnd() : this.currentAttr.valueSpan.getStart();\n      } else {\n        loc = loc.move(-1);\n      }\n\n      this.currentAttr.currentPart = b.text({ chars: char, loc: loc.collapsed() });\n    }\n  }\n\n  finishAttributeValue(): void {\n    this.finalizeTextPart();\n\n    let tag = this.currentTag;\n    let tokenizerPos = this.offset();\n\n    if (tag.type === 'EndTag') {\n      throw generateSyntaxError(\n        `Invalid end tag: closing tag must not have attributes`,\n        this.source.spanFor({ start: tag.start.toJSON(), end: tokenizerPos.toJSON() })\n      );\n    }\n\n    let { name, parts, start, isQuoted, isDynamic, valueSpan } = this.currentAttr;\n\n    // Just trying to be helpful with `<Hello |foo|>` rather than letting it through as an attribute\n    if (name.startsWith('|') && parts.length === 0 && !isQuoted && !isDynamic) {\n      throw generateSyntaxError(\n        'Invalid block parameters syntax: block parameters must be preceded by the `as` keyword',\n        start.until(start.move(name.length))\n      );\n    }\n\n    let value = this.assembleAttributeValue(parts, isQuoted, isDynamic, start.until(tokenizerPos));\n    value.loc = valueSpan.withEnd(tokenizerPos);\n\n    let attribute = b.attr({ name, value, loc: start.until(tokenizerPos) });\n\n    this.currentStartTag.attributes.push(attribute);\n  }\n\n  private parsePossibleBlockParams() {\n    // const enums that we can't use directly\n    const BEFORE_ATTRIBUTE_NAME = 'beforeAttributeName' as TokenizerState.beforeAttributeName;\n    const ATTRIBUTE_NAME = 'attributeName' as TokenizerState.attributeName;\n    const AFTER_ATTRIBUTE_NAME = 'afterAttributeName' as TokenizerState.afterAttributeName;\n\n    // Regex to validate the identifier for block parameters.\n    // Based on the ID validation regex in Handlebars.\n    const ID_INVERSE_PATTERN = /[!\"#%&'()*+./;<=>@[\\\\\\]^`{|}~]/u;\n\n    type States = {\n      PossibleAs: { state: 'PossibleAs' };\n      BeforeStartPipe: { state: 'BeforeStartPipe' };\n      BeforeBlockParamName: { state: 'BeforeBlockParamName' };\n      BlockParamName: {\n        state: 'BlockParamName';\n        name: string;\n        start: src.SourceOffset;\n      };\n      AfterEndPipe: { state: 'AfterEndPipe' };\n      Error: {\n        state: 'Error';\n        message: string;\n        start: src.SourceOffset;\n      };\n      Done: { state: 'Done' };\n    };\n\n    type State = States[keyof States];\n\n    type Handler = (next: string) => void;\n\n    assert(this.tokenizer.state === ATTRIBUTE_NAME, 'must be in TokenizerState.attributeName');\n\n    const element = this.currentStartTag;\n    const as = this.currentAttr;\n\n    let state = { state: 'PossibleAs' } as State;\n\n    const handlers = {\n      PossibleAs: (next: string) => {\n        assert(state.state === 'PossibleAs', 'bug in block params parser');\n\n        if (isSpace(next)) {\n          // \" as ...\"\n          state = { state: 'BeforeStartPipe' };\n          this.tokenizer.transitionTo(AFTER_ATTRIBUTE_NAME);\n          this.tokenizer.consume();\n        } else if (next === '|') {\n          // \" as|...\"\n          // Following Handlebars and require a space between \"as\" and the pipe\n          throw generateSyntaxError(\n            `Invalid block parameters syntax: expecting at least one space character between \"as\" and \"|\"`,\n            as.start.until(this.offset().move(1))\n          );\n        } else {\n          // \" as{{...\", \" async...\", \" as=...\", \" as>...\", \" as/>...\"\n          // Don't consume, let the normal tokenizer code handle the next steps\n          state = { state: 'Done' };\n        }\n      },\n\n      BeforeStartPipe: (next: string) => {\n        assert(state.state === 'BeforeStartPipe', 'bug in block params parser');\n\n        if (isSpace(next)) {\n          this.tokenizer.consume();\n        } else if (next === '|') {\n          state = { state: 'BeforeBlockParamName' };\n          this.tokenizer.transitionTo(BEFORE_ATTRIBUTE_NAME);\n          this.tokenizer.consume();\n        } else {\n          // \" as {{...\", \" as bs...\", \" as =...\", \" as ...\", \" as/>...\"\n          // Don't consume, let the normal tokenizer code handle the next steps\n          state = { state: 'Done' };\n        }\n      },\n\n      BeforeBlockParamName: (next: string) => {\n        assert(state.state === 'BeforeBlockParamName', 'bug in block params parser');\n\n        if (isSpace(next)) {\n          this.tokenizer.consume();\n        } else if (next === '') {\n          // The HTML tokenizer ran out of characters, so we are either\n          // encountering mustache or <EOF>\n          state = { state: 'Done' };\n          this.pendingError = {\n            mustache(loc: src.SourceSpan) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: mustaches cannot be used inside parameters list`,\n                loc\n              );\n            },\n            eof(loc: src.SourceOffset) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: expecting the tag to be closed with \">\" or \"/>\" after parameters list`,\n                as.start.until(loc)\n              );\n            },\n          };\n        } else if (next === '|') {\n          if (element.params.length === 0) {\n            // Following Handlebars and treat empty block params a syntax error\n            throw generateSyntaxError(\n              `Invalid block parameters syntax: empty parameters list, expecting at least one identifier`,\n              as.start.until(this.offset().move(1))\n            );\n          } else {\n            state = { state: 'AfterEndPipe' };\n            this.tokenizer.consume();\n          }\n        } else if (next === '>' || next === '/') {\n          throw generateSyntaxError(\n            `Invalid block parameters syntax: incomplete parameters list, expecting \"|\" but the tag was closed prematurely`,\n            as.start.until(this.offset().move(1))\n          );\n        } else {\n          // slurp up anything else into the name, validate later\n          state = {\n            state: 'BlockParamName',\n            name: next,\n            start: this.offset(),\n          };\n          this.tokenizer.consume();\n        }\n      },\n\n      BlockParamName: (next: string) => {\n        assert(state.state === 'BlockParamName', 'bug in block params parser');\n\n        if (next === '') {\n          // The HTML tokenizer ran out of characters, so we are either\n          // encountering mustache or <EOF>, HBS side will attach the error\n          // to the next span\n          state = { state: 'Done' };\n          this.pendingError = {\n            mustache(loc: src.SourceSpan) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: mustaches cannot be used inside parameters list`,\n                loc\n              );\n            },\n            eof(loc: src.SourceOffset) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: expecting the tag to be closed with \">\" or \"/>\" after parameters list`,\n                as.start.until(loc)\n              );\n            },\n          };\n        } else if (next === '|' || isSpace(next)) {\n          let loc = state.start.until(this.offset());\n\n          if (state.name === 'this' || ID_INVERSE_PATTERN.test(state.name)) {\n            throw generateSyntaxError(\n              `Invalid block parameters syntax: invalid identifier name \\`${state.name}\\``,\n              loc\n            );\n          }\n\n          element.params.push(b.var({ name: state.name, loc }));\n\n          state = next === '|' ? { state: 'AfterEndPipe' } : { state: 'BeforeBlockParamName' };\n          this.tokenizer.consume();\n        } else if (next === '>' || next === '/') {\n          throw generateSyntaxError(\n            `Invalid block parameters syntax: expecting \"|\" but the tag was closed prematurely`,\n            as.start.until(this.offset().move(1))\n          );\n        } else {\n          // slurp up anything else into the name, validate later\n          state.name += next;\n          this.tokenizer.consume();\n        }\n      },\n\n      AfterEndPipe: (next: string) => {\n        assert(state.state === 'AfterEndPipe', 'bug in block params parser');\n\n        if (isSpace(next)) {\n          this.tokenizer.consume();\n        } else if (next === '') {\n          // The HTML tokenizer ran out of characters, so we are either\n          // encountering mustache or <EOF>, HBS side will attach the error\n          // to the next span\n          state = { state: 'Done' };\n          this.pendingError = {\n            mustache(loc: src.SourceSpan) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: modifiers cannot follow parameters list`,\n                loc\n              );\n            },\n            eof(loc: src.SourceOffset) {\n              throw generateSyntaxError(\n                `Invalid block parameters syntax: expecting the tag to be closed with \">\" or \"/>\" after parameters list`,\n                as.start.until(loc)\n              );\n            },\n          };\n        } else if (next === '>' || next === '/') {\n          // Don't consume, let the normal tokenizer code handle the next steps\n          state = { state: 'Done' };\n        } else {\n          // Slurp up the next \"token\" for the error span\n          state = {\n            state: 'Error',\n            message:\n              'Invalid block parameters syntax: expecting the tag to be closed with \">\" or \"/>\" after parameters list',\n            start: this.offset(),\n          };\n          this.tokenizer.consume();\n        }\n      },\n\n      Error: (next: string) => {\n        assert(state.state === 'Error', 'bug in block params parser');\n\n        if (next === '' || next === '/' || next === '>' || isSpace(next)) {\n          throw generateSyntaxError(state.message, state.start.until(this.offset()));\n        } else {\n          // Slurp up the next \"token\" for the error span\n          this.tokenizer.consume();\n        }\n      },\n\n      Done: () => {\n        assert(false, 'This should never be called');\n      },\n    } as const satisfies {\n      [S in keyof States]: Handler;\n    };\n\n    let next: string;\n\n    do {\n      next = this.tokenizer.peek();\n      handlers[state.state](next);\n    } while (state.state !== 'Done' && next !== '');\n\n    assert(state.state === 'Done', 'bug in block params parser');\n  }\n\n  reportSyntaxError(message: string): void {\n    throw generateSyntaxError(message, this.offset().collapsed());\n  }\n\n  assembleConcatenatedValue(\n    parts: (ASTv1.MustacheStatement | ASTv1.TextNode)[]\n  ): ASTv1.ConcatStatement {\n    for (const part of parts) {\n      if (part.type !== 'MustacheStatement' && part.type !== 'TextNode') {\n        throw generateSyntaxError(\n          `Unsupported node in quoted attribute value: ${part['type'] as string}`,\n          (part as ASTv1.BaseNode).loc\n        );\n      }\n    }\n\n    assertPresentArray(parts, `the concatenation parts of an element should not be empty`);\n\n    let first = getFirst(parts);\n    let last = getLast(parts);\n\n    return b.concat({\n      parts,\n      loc: this.source.spanFor(first.loc).extend(this.source.spanFor(last.loc)),\n    });\n  }\n\n  validateEndTag(tag: StartTag | EndTag, element: ASTv1.ElementNode, selfClosing: boolean): void {\n    if (voidMap.has(tag.name) && !selfClosing) {\n      // EngTag is also called by StartTag for void and self-closing tags (i.e.\n      // <input> or <br />, so we need to check for that here. Otherwise, we would\n      // throw an error for those cases.\n      throw generateSyntaxError(\n        `<${tag.name}> elements do not need end tags. You should remove it`,\n        tag.loc\n      );\n    } else if (element.tag === undefined) {\n      throw generateSyntaxError(`Closing tag </${tag.name}> without an open tag`, tag.loc);\n    } else if (element.tag !== tag.name) {\n      throw generateSyntaxError(\n        `Closing tag </${tag.name}> did not match last open tag <${element.tag}> (on line ${element.loc.startPosition.line})`,\n        tag.loc\n      );\n    }\n  }\n\n  assembleAttributeValue(\n    parts: ASTv1.AttrPart[],\n    isQuoted: boolean,\n    isDynamic: boolean,\n    span: src.SourceSpan\n  ): ASTv1.AttrValue {\n    if (isDynamic) {\n      if (isQuoted) {\n        return this.assembleConcatenatedValue(parts);\n      } else {\n        assertPresentArray(parts);\n\n        const [head, a] = parts;\n        if (a === undefined || (a.type === 'TextNode' && a.chars === '/')) {\n          return head;\n        } else {\n          throw generateSyntaxError(\n            `An unquoted attribute value must be a string or a mustache, ` +\n              `preceded by whitespace or a '=' character, and ` +\n              `followed by whitespace, a '>' character, or '/>'`,\n            span\n          );\n        }\n      }\n    } else if (isPresentArray(parts)) {\n      return parts[0];\n    } else {\n      return b.text({ chars: '', loc: span });\n    }\n  }\n}\n\n/**\n  ASTPlugins can make changes to the Glimmer template AST before\n  compilation begins.\n*/\nexport interface ASTPluginBuilder<TEnv extends ASTPluginEnvironment = ASTPluginEnvironment> {\n  (env: TEnv): ASTPlugin;\n}\n\nexport interface ASTPlugin {\n  name: string;\n  visitor: NodeVisitor;\n}\n\nexport interface ASTPluginEnvironment {\n  meta?: object;\n  syntax: Syntax;\n}\n\ninterface HandlebarsParseOptions {\n  srcName?: string;\n  ignoreStandalone?: boolean;\n}\n\nexport interface TemplateIdFn {\n  (src: string): Nullable<string>;\n}\n\nexport interface PrecompileOptions extends PreprocessOptions {\n  id?: TemplateIdFn;\n\n  /**\n   * Additional non-native keywords.\n   *\n   * Local variables (block params or lexical scope) always takes precedence,\n   * but otherwise, suitable free variable candidates (e.g. those are not part\n   * of a path) are matched against this list and turned into keywords.\n   *\n   * In strict mode compilation, keywords suppresses the undefined reference\n   * error and will be resolved by the runtime environment.\n   *\n   * In loose mode, keywords are currently ignored and since all free variables\n   * are already resolved by the runtime environment.\n   */\n  keywords?: readonly string[];\n\n  customizeComponentName?: ((input: string) => string) | undefined;\n}\n\nexport interface PrecompileOptionsWithLexicalScope extends PrecompileOptions {\n  lexicalScope: (variable: string) => boolean;\n}\n\nexport interface PreprocessOptions {\n  strictMode?: boolean;\n  locals?: string[];\n  meta?: {\n    moduleName?: string;\n  };\n  plugins?: {\n    ast?: ASTPluginBuilder[];\n  };\n  parseOptions?: HandlebarsParseOptions;\n  customizeComponentName?: ((input: string) => string) | undefined;\n\n  /**\n    Useful for specifying a group of options together.\n\n    When `'codemod'` we disable all whitespace control in handlebars\n    (to preserve as much as possible) and we also avoid any\n    escaping/unescaping of HTML entity codes.\n   */\n  mode?: 'codemod' | 'precompile';\n}\n\nexport interface Syntax {\n  parse: typeof preprocess;\n  builders: typeof publicBuilder;\n  print: typeof print;\n  traverse: typeof traverse;\n  Walker: typeof Walker;\n}\n\nconst syntax: Syntax = {\n  parse: preprocess,\n  builders: publicBuilder,\n  print,\n  traverse,\n  Walker,\n};\n\nclass CodemodEntityParser extends EntityParser {\n  // match upstream types, but never match an entity\n  constructor() {\n    super({});\n  }\n\n  override parse(): string | undefined {\n    return undefined;\n  }\n}\n\nexport function preprocess(\n  input: string | src.Source | HBS.Program,\n  options: PreprocessOptions = {}\n): ASTv1.Template {\n  let mode = options.mode || 'precompile';\n\n  let source: src.Source;\n  let ast: HBS.Program;\n  if (typeof input === 'string') {\n    source = new src.Source(input, options.meta?.moduleName);\n\n    if (mode === 'codemod') {\n      ast = parseWithoutProcessing(input, options.parseOptions) as HBS.Program;\n    } else {\n      ast = parse(input, options.parseOptions) as HBS.Program;\n    }\n  } else if (input instanceof src.Source) {\n    source = input;\n\n    if (mode === 'codemod') {\n      ast = parseWithoutProcessing(input.source, options.parseOptions) as HBS.Program;\n    } else {\n      ast = parse(input.source, options.parseOptions) as HBS.Program;\n    }\n  } else {\n    source = new src.Source('', options.meta?.moduleName);\n    ast = input;\n  }\n\n  let entityParser = undefined;\n  if (mode === 'codemod') {\n    entityParser = new CodemodEntityParser();\n  }\n\n  let offsets = src.SourceSpan.forCharPositions(source, 0, source.source.length);\n  ast.loc = {\n    source: '(program)',\n    start: offsets.startPosition,\n    end: offsets.endPosition,\n  };\n\n  let template = new TokenizerEventHandlers(source, entityParser, mode).parse(\n    ast,\n    options.locals ?? []\n  );\n\n  if (options?.plugins?.ast) {\n    for (const transform of options.plugins.ast) {\n      let env: ASTPluginEnvironment = assign({}, options, { syntax }, { plugins: undefined });\n\n      let pluginResult = transform(env);\n\n      traverse(template, pluginResult.visitor);\n    }\n  }\n\n  return template;\n}\n","import type * as ASTv1 from './v1/api';\n\nimport { isKeyword } from './keywords';\nimport { preprocess } from './parser/tokenizer-event-handlers';\nimport traverse from './traversal/traverse';\n\ninterface GetTemplateLocalsOptions {\n  includeKeywords?: boolean;\n  includeHtmlElements?: boolean;\n}\n\n/**\n * Gets the correct Token from the Node based on it's type\n */\nfunction tokensFromType(\n  node: ASTv1.Node,\n  scopedTokens: string[],\n  options: GetTemplateLocalsOptions\n): string | void {\n  if (node.type === 'PathExpression') {\n    if (node.head.type === 'AtHead' || node.head.type === 'ThisHead') {\n      return;\n    }\n\n    const possbleToken = node.head.name;\n\n    if (scopedTokens.indexOf(possbleToken) === -1) {\n      return possbleToken;\n    }\n  } else if (node.type === 'ElementNode') {\n    const { tag } = node;\n\n    const char = tag.charAt(0);\n\n    if (char === ':' || char === '@') {\n      return;\n    }\n\n    if (!options.includeHtmlElements && tag.indexOf('.') === -1 && tag.toLowerCase() === tag) {\n      return;\n    }\n\n    if (tag.substr(0, 5) === 'this.') {\n      return;\n    }\n\n    // the tag may be from a yielded object\n    // example:\n    //   <x.button>\n    // An ElementNode does not parse the \"tag\" in to a PathExpression\n    // so we have to split on `.`, just like how `this` presence is checked.\n    if (tag.includes('.')) {\n      let [potentialLocal] = tag.split('.') as [string, ...string[]];\n\n      if (scopedTokens.includes(potentialLocal)) return;\n    }\n\n    if (scopedTokens.includes(tag)) return;\n\n    return tag;\n  }\n}\n\n/**\n * Adds tokens to the tokensSet based on their node.type\n */\nfunction addTokens(\n  tokensSet: Set<string>,\n  node: ASTv1.Node,\n  scopedTokens: string[],\n  options: GetTemplateLocalsOptions\n) {\n  const maybeTokens = tokensFromType(node, scopedTokens, options);\n\n  (Array.isArray(maybeTokens) ? maybeTokens : [maybeTokens]).forEach((maybeToken) => {\n    if (maybeToken !== undefined && maybeToken[0] !== '@') {\n      const maybeTokenFirstSegment = maybeToken.split('.')[0];\n      if (!scopedTokens.includes(maybeTokenFirstSegment)) {\n        tokensSet.add(maybeToken.split('.')[0]);\n      }\n    }\n  });\n}\n\n/**\n * Parses and traverses a given handlebars html template to extract all template locals\n * referenced that could possible come from the parent scope. Can exclude known keywords\n * optionally.\n */\nexport function getTemplateLocals(\n  html: string,\n  options: GetTemplateLocalsOptions = {\n    includeHtmlElements: false,\n    includeKeywords: false,\n  }\n): string[] {\n  const ast = preprocess(html);\n  const tokensSet = new Set<string>();\n  const scopedTokens: string[] = [];\n\n  traverse(ast, {\n    Block: {\n      enter({ blockParams }) {\n        blockParams.forEach((param) => {\n          scopedTokens.push(param);\n        });\n      },\n\n      exit({ blockParams }) {\n        blockParams.forEach(() => {\n          scopedTokens.pop();\n        });\n      },\n    },\n\n    ElementNode: {\n      enter(node) {\n        node.blockParams.forEach((param) => {\n          scopedTokens.push(param);\n        });\n        addTokens(tokensSet, node, scopedTokens, options);\n      },\n\n      exit({ blockParams }) {\n        blockParams.forEach(() => {\n          scopedTokens.pop();\n        });\n      },\n    },\n\n    PathExpression(node) {\n      addTokens(tokensSet, node, scopedTokens, options);\n    },\n  });\n\n  let tokens: string[] = [];\n\n  tokensSet.forEach((s) => tokens.push(s));\n\n  if (!options?.includeKeywords) {\n    tokens = tokens.filter((token) => !isKeyword(token));\n  }\n\n  return tokens;\n}\n","import { assign } from '@glimmer/util';\n\nimport type { SourceSpan } from '../../source/span';\n\nexport interface BaseNodeFields {\n  loc: SourceSpan;\n}\n\n/**\n * This is a convenience function for creating ASTv2 nodes, with an optional name and the node's\n * options.\n *\n * ```ts\n * export class HtmlText extends node('HtmlText').fields<{ chars: string }>() {}\n * ```\n *\n * This creates a new ASTv2 node with the name `'HtmlText'` and one field `chars: string` (in\n * addition to a `loc: SourceOffsets` field, which all nodes have).\n *\n * ```ts\n * export class Args extends node().fields<{\n *  positional: PositionalArguments;\n *  named: NamedArguments\n * }>() {}\n * ```\n *\n * This creates a new un-named ASTv2 node with two fields (`positional: Positional` and `named:\n * Named`, in addition to the generic `loc: SourceOffsets` field).\n *\n * Once you create a node using `node`, it is instantiated with all of its fields (including `loc`):\n *\n * ```ts\n * new HtmlText({ loc: offsets, chars: someString });\n * ```\n */\nexport function node(): {\n  fields<Fields extends object>(): NodeConstructor<Fields & BaseNodeFields>;\n};\nexport function node<T extends string>(\n  name: T\n): {\n  fields<Fields extends object>(): TypedNodeConstructor<T, Fields & BaseNodeFields>;\n};\n\nexport function node<T extends string>(\n  name?: T\n):\n  | {\n      fields<Fields extends object>(): TypedNodeConstructor<T, Fields & BaseNodeFields>;\n    }\n  | {\n      fields<Fields extends object>(): NodeConstructor<Fields & BaseNodeFields>;\n    } {\n  if (name !== undefined) {\n    const type = name;\n    return {\n      fields<Fields extends object>(): TypedNodeConstructor<T, BaseNodeFields & Fields> {\n        return class {\n          // SAFETY: initialized via `assign` in the constructor.\n          declare readonly loc: SourceSpan;\n          readonly type: T;\n\n          constructor(fields: BaseNodeFields & Fields) {\n            this.type = type;\n            assign(this, fields);\n          }\n        } as TypedNodeConstructor<T, BaseNodeFields & Fields>;\n      },\n    };\n  } else {\n    return {\n      fields<Fields>(): NodeConstructor<Fields & BaseNodeFields> {\n        return class {\n          // SAFETY: initialized via `assign` in the constructor.\n          declare readonly loc: SourceSpan;\n\n          constructor(fields: BaseNodeFields & Fields) {\n            assign(this, fields);\n          }\n        } as NodeConstructor<BaseNodeFields & Fields>;\n      },\n    };\n  }\n}\n\nexport interface NodeConstructor<Fields> {\n  new (fields: Fields): Readonly<Fields>;\n}\n\ntype TypedNode<T extends string, Fields> = { type: T } & Readonly<Fields>;\n\nexport interface TypedNodeConstructor<T extends string, Fields> {\n  new (options: Fields): TypedNode<T, Fields>;\n}\n","import type { SourceSlice } from '../../source/slice';\nimport type { SourceSpan } from '../../source/span';\nimport type { ExpressionNode } from './expr';\n\nimport { node } from './node';\n\n/**\n * Corresponds to syntaxes with positional and named arguments:\n *\n * - SubExpression\n * - Invoking Append\n * - Invoking attributes\n * - InvokeBlock\n *\n * If `Args` is empty, the `SourceOffsets` for this node should be the collapsed position\n * immediately after the parent call node's `callee`.\n */\nexport class Args extends node().fields<{\n  positional: PositionalArguments;\n  named: NamedArguments;\n}>() {\n  static empty(loc: SourceSpan): Args {\n    return new Args({\n      loc,\n      positional: PositionalArguments.empty(loc),\n      named: NamedArguments.empty(loc),\n    });\n  }\n\n  static named(named: NamedArguments): Args {\n    return new Args({\n      loc: named.loc,\n      positional: PositionalArguments.empty(named.loc.collapse('end')),\n      named,\n    });\n  }\n\n  nth(offset: number): ExpressionNode | null {\n    return this.positional.nth(offset);\n  }\n\n  get(name: string): ExpressionNode | null {\n    return this.named.get(name);\n  }\n\n  isEmpty(): boolean {\n    return this.positional.isEmpty() && this.named.isEmpty();\n  }\n}\n\n/**\n * Corresponds to positional arguments.\n *\n * If `PositionalArguments` is empty, the `SourceOffsets` for this node should be the collapsed\n * position immediately after the parent call node's `callee`.\n */\nexport class PositionalArguments extends node().fields<{\n  exprs: readonly ExpressionNode[];\n}>() {\n  static empty(loc: SourceSpan): PositionalArguments {\n    return new PositionalArguments({\n      loc,\n      exprs: [],\n    });\n  }\n\n  get size(): number {\n    return this.exprs.length;\n  }\n\n  nth(offset: number): ExpressionNode | null {\n    return this.exprs[offset] || null;\n  }\n\n  isEmpty(): boolean {\n    return this.exprs.length === 0;\n  }\n}\n\n/**\n * Corresponds to named arguments.\n *\n * If `PositionalArguments` and `NamedArguments` are empty, the `SourceOffsets` for this node should\n * be the same as the `Args` node that contains this node.\n *\n * If `PositionalArguments` is not empty but `NamedArguments` is empty, the `SourceOffsets` for this\n * node should be the collapsed position immediately after the last positional argument.\n */\nexport class NamedArguments extends node().fields<{\n  entries: readonly NamedArgument[];\n}>() {\n  static empty(loc: SourceSpan): NamedArguments {\n    return new NamedArguments({\n      loc,\n      entries: [],\n    });\n  }\n\n  get size(): number {\n    return this.entries.length;\n  }\n\n  get(name: string): ExpressionNode | null {\n    let entry = this.entries.filter((e) => e.name.chars === name)[0];\n\n    return entry ? entry.value : null;\n  }\n\n  isEmpty(): boolean {\n    return this.entries.length === 0;\n  }\n}\n\n/**\n * Corresponds to a single named argument.\n *\n * ```hbs\n * x=<expr>\n * ```\n */\nexport class NamedArgument {\n  readonly loc: SourceSpan;\n  readonly name: SourceSlice;\n  readonly value: ExpressionNode;\n\n  constructor(options: { name: SourceSlice; value: ExpressionNode }) {\n    this.loc = options.name.loc.extend(options.value.loc);\n    this.name = options.name;\n    this.value = options.value;\n  }\n}\n","import type { SourceSlice } from '../../source/slice';\nimport type { CallFields } from './base';\nimport type { ExpressionNode } from './expr';\n\nimport { NamedArgument } from './args';\nimport { node } from './node';\n\n/**\n * Attr nodes look like HTML attributes, but are classified as:\n *\n * 1. `HtmlAttr`, which means a regular HTML attribute in Glimmer\n * 2. `SplatAttr`, which means `...attributes`\n * 3. `ComponentArg`, which means an attribute whose name begins with `@`, and it is therefore a\n *    component argument.\n */\nexport type AttrNode = HtmlAttr | SplatAttr | ComponentArg;\n\n/**\n * `HtmlAttr` and `SplatAttr` are grouped together because the order of the `SplatAttr` node,\n * relative to other attributes, matters.\n */\nexport type HtmlOrSplatAttr = HtmlAttr | SplatAttr;\n\n/**\n * \"Attr Block\" nodes are allowed inside an open element tag in templates. They interact with the\n * element (or component).\n */\nexport type AttrBlockNode = AttrNode | ElementModifier;\n\n/**\n * `HtmlAttr` nodes are valid HTML attributes, with or without a value.\n *\n * Exceptions:\n *\n * - `...attributes` is `SplatAttr`\n * - `@x=<value>` is `ComponentArg`\n */\nexport class HtmlAttr extends node('HtmlAttr').fields<AttrNodeOptions>() {}\n\nexport class SplatAttr extends node('SplatAttr').fields<{ symbol: number }>() {}\n\n/**\n * Corresponds to an argument passed by a component (`@x=<value>`)\n */\nexport class ComponentArg extends node().fields<AttrNodeOptions>() {\n  /**\n   * Convert the component argument into a named argument node\n   */\n  toNamedArgument(): NamedArgument {\n    return new NamedArgument({\n      name: this.name,\n      value: this.value,\n    });\n  }\n}\n\n/**\n * An `ElementModifier` is just a normal call node in modifier position.\n */\nexport class ElementModifier extends node('ElementModifier').fields<CallFields>() {}\n\nexport interface AttrNodeOptions {\n  name: SourceSlice;\n  value: ExpressionNode;\n  trusting: boolean;\n}\n","import type { SourceSlice } from '../../source/slice';\nimport type { SymbolTable } from '../../symbol-table';\nimport type { ComponentArg, ElementModifier, HtmlOrSplatAttr } from './attr-block';\nimport type { CallFields } from './base';\nimport type { ExpressionNode } from './expr';\nimport type { NamedBlock, NamedBlocks } from './internal-node';\nimport type { BaseNodeFields } from './node';\n\nimport { SpanList } from '../../source/span-list';\nimport { Args, NamedArguments } from './args';\nimport { node } from './node';\n\n/**\n * Content Nodes are allowed in content positions in templates. They correspond to behavior in the\n * [Data][data] tokenization state in HTML.\n *\n * [data]: https://html.spec.whatwg.org/multipage/parsing.html#data-state\n */\nexport type ContentNode =\n  | HtmlText\n  | HtmlComment\n  | AppendContent\n  | InvokeBlock\n  | InvokeComponent\n  | SimpleElement\n  | GlimmerComment;\n\nexport class GlimmerComment extends node('GlimmerComment').fields<{ text: SourceSlice }>() {}\nexport class HtmlText extends node('HtmlText').fields<{ chars: string }>() {}\nexport class HtmlComment extends node('HtmlComment').fields<{ text: SourceSlice }>() {}\n\nexport class AppendContent extends node('AppendContent').fields<{\n  value: ExpressionNode;\n  trusting: boolean;\n  table: SymbolTable;\n}>() {\n  get callee(): ExpressionNode {\n    if (this.value.type === 'Call') {\n      return this.value.callee;\n    } else {\n      return this.value;\n    }\n  }\n\n  get args(): Args {\n    if (this.value.type === 'Call') {\n      return this.value.args;\n    } else {\n      return Args.empty(this.value.loc.collapse('end'));\n    }\n  }\n}\n\nexport class InvokeBlock extends node('InvokeBlock').fields<\n  CallFields & { blocks: NamedBlocks }\n>() {}\n\ninterface InvokeComponentFields {\n  callee: ExpressionNode;\n  blocks: NamedBlocks;\n  attrs: readonly HtmlOrSplatAttr[];\n  componentArgs: readonly ComponentArg[];\n  modifiers: readonly ElementModifier[];\n}\n\n/**\n * Corresponds to a component invocation. When the content of a component invocation contains no\n * named blocks, `blocks` contains a single named block named `\"default\"`. When a component\n * invocation is self-closing, `blocks` is empty.\n */\nexport class InvokeComponent extends node('InvokeComponent').fields<InvokeComponentFields>() {\n  get args(): Args {\n    let entries = this.componentArgs.map((a) => a.toNamedArgument());\n\n    return Args.named(\n      new NamedArguments({\n        loc: SpanList.range(entries, this.callee.loc.collapse('end')),\n        entries,\n      })\n    );\n  }\n}\n\ninterface SimpleElementOptions extends BaseNodeFields {\n  tag: SourceSlice;\n  body: readonly ContentNode[];\n  attrs: readonly HtmlOrSplatAttr[];\n  componentArgs: readonly ComponentArg[];\n  modifiers: readonly ElementModifier[];\n}\n\n/**\n * Corresponds to a simple HTML element. The AST allows component arguments and modifiers to support\n * future extensions.\n */\nexport class SimpleElement extends node('SimpleElement').fields<SimpleElementOptions>() {\n  get args(): Args {\n    let entries = this.componentArgs.map((a) => a.toNamedArgument());\n\n    return Args.named(\n      new NamedArguments({\n        loc: SpanList.range(entries, this.tag.loc.collapse('end')),\n        entries,\n      })\n    );\n  }\n}\n\nexport type ElementNode = NamedBlock | InvokeComponent | SimpleElement;\n","import type { PresentArray } from '@glimmer/interfaces';\n\nimport type { CallFields } from './base';\nimport type { VariableReference } from './refs';\n\nimport { SourceSlice } from '../../source/slice';\nimport { node } from './node';\n\n/**\n * A Handlebars literal.\n *\n * {@link https://handlebarsjs.com/guide/expressions.html#literal-segments}\n */\nexport type LiteralValue = string | boolean | number | undefined | null;\n\nexport interface LiteralTypes {\n  string: string;\n  boolean: boolean;\n  number: number;\n  null: null;\n  undefined: undefined;\n}\n\n/**\n * Corresponds to a Handlebars literal.\n *\n * @see {LiteralValue}\n */\nexport class LiteralExpression extends node('Literal').fields<{ value: LiteralValue }>() {\n  toSlice(this: StringLiteral): SourceSlice {\n    return new SourceSlice({ loc: this.loc, chars: this.value });\n  }\n}\n\nexport type StringLiteral = LiteralExpression & { value: string };\n\n/**\n * Returns true if an input {@see ExpressionNode} is a literal.\n */\nexport function isLiteral<K extends keyof LiteralTypes = keyof LiteralTypes>(\n  node: ExpressionNode,\n  kind?: K\n): node is StringLiteral {\n  if (node.type === 'Literal') {\n    if (kind === undefined) {\n      return true;\n    } else if (kind === 'null') {\n      return node.value === null;\n    } else {\n      return typeof node.value === kind;\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n * Corresponds to a path in expression position.\n *\n * ```hbs\n * this\n * this.x\n * @x\n * @x.y\n * x\n * x.y\n * ```\n */\nexport class PathExpression extends node('Path').fields<{\n  ref: VariableReference;\n  tail: readonly SourceSlice[];\n}>() {}\n\n/**\n * Corresponds to a known strict-mode keyword. It behaves similarly to a\n * PathExpression with a FreeVarReference, but implies StrictResolution and\n * is guaranteed to not have a tail, since `{{outlet.foo}}` would have been\n * illegal.\n */\nexport class KeywordExpression extends node('Keyword').fields<{\n  name: string;\n  symbol: number;\n}>() {}\n\n/**\n * Corresponds to a parenthesized call expression.\n *\n * ```hbs\n * (x)\n * (x.y)\n * (x y)\n * (x.y z)\n * ```\n */\nexport class CallExpression extends node('Call').fields<CallFields>() {}\n\n/**\n * Corresponds to an interpolation in attribute value position.\n *\n * ```hbs\n * <a href=\"{{url}}.html\"\n * ```\n */\nexport class InterpolateExpression extends node('Interpolate').fields<{\n  parts: PresentArray<ExpressionNode>;\n}>() {}\n\nexport type ExpressionNode =\n  | LiteralExpression\n  | PathExpression\n  | KeywordExpression\n  | CallExpression\n  | InterpolateExpression;\n","import type { SourceSlice } from '../../source/slice';\nimport type { BlockSymbolTable, ProgramSymbolTable } from '../../symbol-table';\nimport type { ComponentArg, ElementModifier, HtmlOrSplatAttr } from './attr-block';\nimport type { GlimmerParentNodeOptions } from './base';\nimport type { BaseNodeFields } from './node';\n\nimport { SpanList } from '../../source/span-list';\nimport { Args, NamedArguments } from './args';\nimport { node } from './node';\n\n/**\n * Corresponds to an entire template.\n */\nexport class Template extends node().fields<\n  {\n    table: ProgramSymbolTable;\n  } & GlimmerParentNodeOptions\n>() {}\n\n/**\n * Represents a block. In principle this could be merged with `NamedBlock`, because all cases\n * involving blocks have at least a notional name.\n */\nexport class Block extends node().fields<\n  { scope: BlockSymbolTable } & GlimmerParentNodeOptions\n>() {}\n\n/**\n * Corresponds to a collection of named blocks.\n */\nexport class NamedBlocks extends node().fields<{ blocks: readonly NamedBlock[] }>() {\n  /**\n   * Get the `NamedBlock` for a given name.\n   */\n  get(name: 'default'): NamedBlock;\n  get(name: string): NamedBlock | null;\n  get(name: string): NamedBlock | null {\n    return this.blocks.filter((block) => block.name.chars === name)[0] || null;\n  }\n}\n\nexport interface NamedBlockFields extends BaseNodeFields {\n  name: SourceSlice;\n  block: Block;\n\n  // these are not currently supported, but are here for future expansion\n  attrs: readonly HtmlOrSplatAttr[];\n  componentArgs: readonly ComponentArg[];\n  modifiers: readonly ElementModifier[];\n}\n\n/**\n * Corresponds to a single named block. This is used for anonymous named blocks (`default` and\n * `else`).\n */\nexport class NamedBlock extends node().fields<NamedBlockFields>() {\n  get args(): Args {\n    let entries = this.componentArgs.map((a) => a.toNamedArgument());\n\n    return Args.named(\n      new NamedArguments({\n        loc: SpanList.range(entries, this.name.loc.collapse('end')),\n        entries,\n      })\n    );\n  }\n}\n","import type { SourceSlice } from '../../source/slice';\nimport type { FreeVarResolution } from './resolution';\n\nimport { node } from './node';\n\n/**\n * Corresponds to `this` at the head of an expression.\n */\nexport class ThisReference extends node('This').fields() {}\n\n/**\n * Corresponds to `@<ident>` at the beginning of an expression.\n */\nexport class ArgReference extends node('Arg').fields<{ name: SourceSlice; symbol: number }>() {}\n\n/**\n * Corresponds to `<ident>` at the beginning of an expression, when `<ident>` is in the current\n * block's scope.\n */\nexport class LocalVarReference extends node('Local').fields<{\n  name: string;\n  isTemplateLocal: boolean;\n  symbol: number;\n}>() {}\n\n/**\n * Corresponds to `<ident>` at the beginning of an expression, when `<ident>` is *not* in the\n * current block's scope.\n *\n * The `resolution: FreeVarResolution` field describes how to resolve the free variable.\n *\n * Note: In strict mode, it must always be a variable that is in a concrete JavaScript scope that\n * the template will be installed into.\n */\nexport class FreeVarReference extends node('Free').fields<{\n  name: string;\n  resolution: FreeVarResolution;\n  symbol: number;\n}>() {}\n\nexport type VariableReference = ThisReference | ArgReference | LocalVarReference | FreeVarReference;\n","/**\n * A free variable is resolved according to a resolution rule:\n *\n * 1. Strict resolution\n * 2. Namespaced resolution\n */\n\nimport type { GetContextualFreeOpcode } from '@glimmer/interfaces';\nimport { SexpOpcodes } from '@glimmer/wire-format';\n\n/**\n * Strict resolution is used:\n *\n * 1. in a strict mode template\n * 2. in an local variable invocation with dot paths\n */\nexport const STRICT_RESOLUTION = {\n  resolution: (): GetContextualFreeOpcode => SexpOpcodes.GetStrictKeyword,\n  serialize: (): SerializedResolution => 'Strict',\n  isAngleBracket: false as const,\n};\n\nexport type StrictResolution = typeof STRICT_RESOLUTION;\n\nexport const HTML_RESOLUTION = {\n  ...STRICT_RESOLUTION,\n  isAngleBracket: true as const,\n};\n\nexport type HtmlResolution = typeof HTML_RESOLUTION;\n\nexport function isStrictResolution(value: unknown): value is StrictResolution {\n  return value === STRICT_RESOLUTION;\n}\n\n/**\n * A `LooseModeResolution` includes one or more namespaces to resolve the variable in\n *\n * In practice, there are a limited number of possible combinations of these degrees of freedom,\n * and they are captured by the `Namespaces` union below.\n */\nexport class LooseModeResolution {\n  /**\n   * Namespaced resolution is used in an unambiguous syntax position:\n   *\n   * 1. `(sexp)` (namespace: `Helper`)\n   * 2. `{{#block}}` (namespace: `Component`)\n   * 3. `<a {{modifier}}>` (namespace: `Modifier`)\n   * 4. `<Component />` (namespace: `Component`)\n   */\n  static namespaced(namespace: FreeVarNamespace, isAngleBracket = false): LooseModeResolution {\n    return new LooseModeResolution([namespace], isAngleBracket);\n  }\n\n  /**\n   * Append resolution is used when the variable should be resolved in both the `component` and\n   * `helper` namespaces.\n   *\n   * ```hbs\n   * {{x}}\n   * ```\n   *\n   * ```hbs\n   * {{x y}}\n   * ```\n   *\n   * ^ In either case, `x` should be resolved in the `component` and `helper` namespaces.\n   */\n  static append(): LooseModeResolution {\n    return new LooseModeResolution([FreeVarNamespace.Component, FreeVarNamespace.Helper]);\n  }\n\n  /**\n   * Trusting append resolution is used when the variable should be resolved only in the\n   * `helper` namespaces.\n   *\n   * ```hbs\n   * {{{x}}}\n   * ```\n   *\n   * ```hbs\n   * {{{x y}}}\n   * ```\n   *\n   * ^ In either case, `x` should be resolved in the `helper` namespace.\n   */\n  static trustingAppend(): LooseModeResolution {\n    return this.namespaced(FreeVarNamespace.Helper);\n  }\n\n  constructor(\n    readonly namespaces: Namespaces,\n    readonly isAngleBracket = false\n  ) {}\n\n  resolution(): GetContextualFreeOpcode {\n    if (this.namespaces.length === 1) {\n      switch (this.namespaces[0]) {\n        case FreeVarNamespace.Helper:\n          return SexpOpcodes.GetFreeAsHelperHead;\n        case FreeVarNamespace.Modifier:\n          return SexpOpcodes.GetFreeAsModifierHead;\n        case FreeVarNamespace.Component:\n          return SexpOpcodes.GetFreeAsComponentHead;\n      }\n    } else {\n      return SexpOpcodes.GetFreeAsComponentOrHelperHead;\n    }\n  }\n\n  serialize(): SerializedResolution {\n    if (this.namespaces.length === 1) {\n      return this.namespaces[0];\n    } else {\n      return 'ComponentOrHelper';\n    }\n  }\n}\n\nexport enum FreeVarNamespace {\n  Helper = 'Helper',\n  Modifier = 'Modifier',\n  Component = 'Component',\n}\n\nexport const HELPER_NAMESPACE = FreeVarNamespace.Helper;\nexport const MODIFIER_NAMESPACE = FreeVarNamespace.Modifier;\nexport const COMPONENT_NAMESPACE = FreeVarNamespace.Component;\n\n/**\n * A `Namespaced` must be resolved in one or more namespaces.\n *\n * ```hbs\n * <X />\n * ```\n *\n * ^ `X` is resolved in the `component` namespace\n *\n * ```hbs\n * (x)\n * ```\n *\n * ^ `x` is resolved in the `helper` namespace\n *\n * ```hbs\n * <a {{x}} />\n * ```\n *\n * ^ `x` is resolved in the `modifier` namespace\n */\ntype Namespaces =\n  | [FreeVarNamespace.Helper]\n  | [FreeVarNamespace.Modifier]\n  | [FreeVarNamespace.Component]\n  | [FreeVarNamespace.Component, FreeVarNamespace.Helper];\n\nexport type FreeVarResolution = StrictResolution | HtmlResolution | LooseModeResolution;\n\n// Serialization\nexport type SerializedResolution =\n  | 'Strict'\n  | 'Helper'\n  | 'Modifier'\n  | 'Component'\n  | 'ComponentOrHelper';\n\nexport function loadResolution(resolution: SerializedResolution): FreeVarResolution {\n  if (resolution === 'Strict') {\n    return STRICT_RESOLUTION;\n  } else if (resolution === 'ComponentOrHelper') {\n    return LooseModeResolution.append();\n  } else {\n    return LooseModeResolution.namespaced(resolution as FreeVarNamespace);\n  }\n}\n","import type { Core, Dict } from '@glimmer/interfaces';\nimport { dict, unwrap } from '@glimmer/util';\nimport { SexpOpcodes } from '@glimmer/wire-format';\n\nimport * as ASTv2 from './v2/api';\n\nexport interface Upvar {\n  readonly name: string;\n  readonly resolution: ASTv2.FreeVarResolution;\n}\n\ninterface SymbolTableOptions {\n  customizeComponentName: (input: string) => string;\n  lexicalScope: (variable: string) => boolean;\n}\n\nexport abstract class SymbolTable {\n  static top(\n    locals: readonly string[],\n    keywords: readonly string[],\n    options: SymbolTableOptions\n  ): ProgramSymbolTable {\n    return new ProgramSymbolTable(locals, keywords, options);\n  }\n\n  abstract has(name: string): boolean;\n  abstract get(name: string): [symbol: number, isRoot: boolean];\n\n  abstract hasKeyword(name: string): boolean;\n  abstract getKeyword(name: string): number;\n\n  abstract hasLexical(name: string): boolean;\n\n  abstract getLocalsMap(): Dict<number>;\n  abstract getDebugInfo(): Core.DebugInfo;\n  abstract setHasDebugger(): void;\n\n  abstract allocateFree(name: string, resolution: ASTv2.FreeVarResolution): number;\n  abstract allocateNamed(name: string): number;\n  abstract allocateBlock(name: string): number;\n  abstract allocate(identifier: string): number;\n\n  child(locals: string[]): BlockSymbolTable {\n    let symbols = locals.map((name) => this.allocate(name));\n    return new BlockSymbolTable(this, locals, symbols);\n  }\n}\n\nexport class ProgramSymbolTable extends SymbolTable {\n  constructor(\n    private templateLocals: readonly string[],\n    private keywords: readonly string[],\n    private options: SymbolTableOptions\n  ) {\n    super();\n  }\n\n  public symbols: string[] = [];\n  public upvars: string[] = [];\n\n  private size = 1;\n  private named = dict<number>();\n  private blocks = dict<number>();\n  private usedTemplateLocals: string[] = [];\n\n  #hasDebugger = false;\n\n  hasLexical(name: string): boolean {\n    return this.options.lexicalScope(name);\n  }\n\n  hasKeyword(name: string): boolean {\n    return this.keywords.includes(name);\n  }\n\n  getKeyword(name: string): number {\n    return this.allocateFree(name, ASTv2.STRICT_RESOLUTION);\n  }\n\n  getUsedTemplateLocals(): string[] {\n    return this.usedTemplateLocals;\n  }\n\n  setHasDebugger(): void {\n    this.#hasDebugger = true;\n  }\n\n  get hasEval(): boolean {\n    return this.#hasDebugger;\n  }\n\n  has(name: string): boolean {\n    return this.templateLocals.includes(name);\n  }\n\n  get(name: string): [number, boolean] {\n    let index = this.usedTemplateLocals.indexOf(name);\n\n    if (index !== -1) {\n      return [index, true];\n    }\n\n    index = this.usedTemplateLocals.length;\n    this.usedTemplateLocals.push(name);\n    return [index, true];\n  }\n\n  getLocalsMap(): Dict<number> {\n    return dict();\n  }\n\n  getDebugInfo(): Core.DebugInfo {\n    return Object.values(this.getLocalsMap());\n  }\n\n  allocateFree(name: string, resolution: ASTv2.FreeVarResolution): number {\n    // If the name in question is an uppercase (i.e. angle-bracket) component invocation, run\n    // the optional `customizeComponentName` function provided to the precompiler.\n    if (\n      resolution.resolution() === SexpOpcodes.GetFreeAsComponentHead &&\n      resolution.isAngleBracket\n    ) {\n      name = this.options.customizeComponentName(name);\n    }\n\n    let index = this.upvars.indexOf(name);\n\n    if (index !== -1) {\n      return index;\n    }\n\n    index = this.upvars.length;\n    this.upvars.push(name);\n    return index;\n  }\n\n  allocateNamed(name: string): number {\n    let named = this.named[name];\n\n    if (!named) {\n      named = this.named[name] = this.allocate(name);\n    }\n\n    return named;\n  }\n\n  allocateBlock(name: string): number {\n    if (name === 'inverse') {\n      name = 'else';\n    }\n\n    let block = this.blocks[name];\n\n    if (!block) {\n      block = this.blocks[name] = this.allocate(`&${name}`);\n    }\n\n    return block;\n  }\n\n  allocate(identifier: string): number {\n    this.symbols.push(identifier);\n    return this.size++;\n  }\n}\n\nexport class BlockSymbolTable extends SymbolTable {\n  constructor(\n    private parent: SymbolTable,\n    public symbols: string[],\n    public slots: number[]\n  ) {\n    super();\n  }\n\n  get locals(): string[] {\n    return this.symbols;\n  }\n\n  hasLexical(name: string): boolean {\n    return this.parent.hasLexical(name);\n  }\n\n  getKeyword(name: string): number {\n    return this.parent.getKeyword(name);\n  }\n\n  hasKeyword(name: string): boolean {\n    return this.parent.hasKeyword(name);\n  }\n\n  has(name: string): boolean {\n    return this.symbols.indexOf(name) !== -1 || this.parent.has(name);\n  }\n\n  get(name: string): [number, boolean] {\n    let local = this.#get(name);\n    return local ? [local, false] : this.parent.get(name);\n  }\n\n  #get(name: string): number | null {\n    let slot = this.symbols.indexOf(name);\n    return slot === -1 ? null : unwrap(this.slots[slot]);\n  }\n\n  getLocalsMap(): Dict<number> {\n    let dict = this.parent.getLocalsMap();\n    this.symbols.forEach((symbol) => (dict[symbol] = this.get(symbol)[0]));\n    return dict;\n  }\n\n  getDebugInfo(): Core.DebugInfo {\n    return Object.values(this.getLocalsMap());\n  }\n\n  setHasDebugger(): void {\n    this.parent.setHasDebugger();\n  }\n\n  allocateFree(name: string, resolution: ASTv2.FreeVarResolution): number {\n    return this.parent.allocateFree(name, resolution);\n  }\n\n  allocateNamed(name: string): number {\n    return this.parent.allocateNamed(name);\n  }\n\n  allocateBlock(name: string): number {\n    return this.parent.allocateBlock(name);\n  }\n\n  allocate(identifier: string): number {\n    return this.parent.allocate(identifier);\n  }\n}\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { assert, assertPresentArray, assign } from '@glimmer/util';\n\nimport type { SourceSpan } from '../source/span';\nimport type { BlockSymbolTable, ProgramSymbolTable, SymbolTable } from '../symbol-table';\n\nimport { SourceSlice } from '../source/slice';\nimport { SpanList } from '../source/span-list';\nimport * as ASTv2 from './api';\n\nexport interface CallParts {\n  callee: ASTv2.CalleeNode;\n  args: ASTv2.Args;\n}\n\nexport class Builder {\n  // TEMPLATE //\n\n  template(\n    symbols: ProgramSymbolTable,\n    body: ASTv2.ContentNode[],\n    loc: SourceSpan\n  ): ASTv2.Template {\n    return new ASTv2.Template({\n      table: symbols,\n      body,\n      loc,\n    });\n  }\n\n  // INTERNAL (these nodes cannot be reached when doing general-purpose visiting) //\n\n  block(symbols: BlockSymbolTable, body: ASTv2.ContentNode[], loc: SourceSpan): ASTv2.Block {\n    return new ASTv2.Block({\n      scope: symbols,\n      body,\n      loc,\n    });\n  }\n\n  namedBlock(name: SourceSlice, block: ASTv2.Block, loc: SourceSpan): ASTv2.NamedBlock {\n    return new ASTv2.NamedBlock({\n      name,\n      block,\n      attrs: [],\n      componentArgs: [],\n      modifiers: [],\n      loc,\n    });\n  }\n\n  simpleNamedBlock(name: SourceSlice, block: ASTv2.Block, loc: SourceSpan): ASTv2.NamedBlock {\n    return new BuildElement({\n      selfClosing: false,\n      attrs: [],\n      componentArgs: [],\n      modifiers: [],\n      comments: [],\n    }).named(name, block, loc);\n  }\n\n  slice(chars: string, loc: SourceSpan): SourceSlice {\n    return new SourceSlice({\n      loc,\n      chars,\n    });\n  }\n\n  args(\n    positional: ASTv2.PositionalArguments,\n    named: ASTv2.NamedArguments,\n    loc: SourceSpan\n  ): ASTv2.Args {\n    return new ASTv2.Args({\n      loc,\n      positional,\n      named,\n    });\n  }\n\n  positional(exprs: ASTv2.ExpressionNode[], loc: SourceSpan): ASTv2.PositionalArguments {\n    return new ASTv2.PositionalArguments({\n      loc,\n      exprs,\n    });\n  }\n\n  namedArgument(key: SourceSlice, value: ASTv2.ExpressionNode): ASTv2.NamedArgument {\n    return new ASTv2.NamedArgument({\n      name: key,\n      value,\n    });\n  }\n\n  named(entries: ASTv2.NamedArgument[], loc: SourceSpan): ASTv2.NamedArguments {\n    return new ASTv2.NamedArguments({\n      loc,\n      entries,\n    });\n  }\n\n  attr(\n    {\n      name,\n      value,\n      trusting,\n    }: { name: SourceSlice; value: ASTv2.ExpressionNode; trusting: boolean },\n    loc: SourceSpan\n  ): ASTv2.HtmlAttr {\n    return new ASTv2.HtmlAttr({\n      loc,\n      name,\n      value,\n      trusting,\n    });\n  }\n\n  splatAttr(symbol: number, loc: SourceSpan): ASTv2.SplatAttr {\n    return new ASTv2.SplatAttr({\n      symbol,\n      loc,\n    });\n  }\n\n  arg(\n    {\n      name,\n      value,\n      trusting,\n    }: { name: SourceSlice; value: ASTv2.ExpressionNode; trusting: boolean },\n    loc: SourceSpan\n  ): ASTv2.ComponentArg {\n    return new ASTv2.ComponentArg({\n      name,\n      value,\n      trusting,\n      loc,\n    });\n  }\n\n  // EXPRESSIONS //\n\n  path(head: ASTv2.VariableReference, tail: SourceSlice[], loc: SourceSpan): ASTv2.PathExpression {\n    return new ASTv2.PathExpression({\n      loc,\n      ref: head,\n      tail,\n    });\n  }\n\n  keyword(name: string, symbol: number, loc: SourceSpan): ASTv2.KeywordExpression {\n    return new ASTv2.KeywordExpression({\n      loc,\n      name,\n      symbol,\n    });\n  }\n\n  self(loc: SourceSpan): ASTv2.VariableReference {\n    return new ASTv2.ThisReference({\n      loc,\n    });\n  }\n\n  at(name: string, symbol: number, loc: SourceSpan): ASTv2.VariableReference {\n    // the `@` should be included so we have a complete source range\n    assert(name[0] === '@', `call builders.at() with a string that starts with '@'`);\n\n    return new ASTv2.ArgReference({\n      loc,\n      name: new SourceSlice({ loc, chars: name }),\n      symbol,\n    });\n  }\n\n  freeVar({\n    name,\n    context,\n    symbol,\n    loc,\n  }: {\n    name: string;\n    context: ASTv2.FreeVarResolution;\n    symbol: number;\n    loc: SourceSpan;\n  }): ASTv2.FreeVarReference {\n    assert(\n      name !== 'this',\n      `You called builders.freeVar() with 'this'. Call builders.this instead`\n    );\n    assert(\n      name[0] !== '@',\n      `You called builders.freeVar() with '${name}'. Call builders.at('${name}') instead`\n    );\n\n    return new ASTv2.FreeVarReference({\n      name,\n      resolution: context,\n      symbol,\n      loc,\n    });\n  }\n\n  localVar(\n    name: string,\n    symbol: number,\n    isTemplateLocal: boolean,\n    loc: SourceSpan\n  ): ASTv2.VariableReference {\n    assert(name !== 'this', `You called builders.var() with 'this'. Call builders.this instead`);\n    assert(\n      name[0] !== '@',\n      `You called builders.var() with '${name}'. Call builders.at('${name}') instead`\n    );\n\n    return new ASTv2.LocalVarReference({\n      loc,\n      name,\n      isTemplateLocal,\n      symbol,\n    });\n  }\n\n  sexp(parts: CallParts, loc: SourceSpan): ASTv2.CallExpression {\n    return new ASTv2.CallExpression({\n      loc,\n      callee: parts.callee,\n      args: parts.args,\n    });\n  }\n\n  interpolate(parts: ASTv2.ExpressionNode[], loc: SourceSpan): ASTv2.InterpolateExpression {\n    assertPresentArray(parts);\n\n    return new ASTv2.InterpolateExpression({\n      loc,\n      parts,\n    });\n  }\n\n  literal(value: string, loc: SourceSpan): ASTv2.LiteralExpression & { value: string };\n  literal(value: number, loc: SourceSpan): ASTv2.LiteralExpression & { value: number };\n  literal(value: boolean, loc: SourceSpan): ASTv2.LiteralExpression & { value: boolean };\n  literal(value: null, loc: SourceSpan): ASTv2.LiteralExpression & { value: null };\n  literal(value: undefined, loc: SourceSpan): ASTv2.LiteralExpression & { value: undefined };\n  literal(\n    value: string | number | boolean | null | undefined,\n    loc: SourceSpan\n  ): ASTv2.LiteralExpression;\n  literal(\n    value: string | number | boolean | null | undefined,\n    loc: SourceSpan\n  ): ASTv2.LiteralExpression {\n    return new ASTv2.LiteralExpression({\n      loc,\n      value,\n    });\n  }\n\n  // STATEMENTS //\n\n  append(\n    {\n      table,\n      trusting,\n      value,\n    }: { table: SymbolTable; trusting: boolean; value: ASTv2.ExpressionNode },\n    loc: SourceSpan\n  ): ASTv2.AppendContent {\n    return new ASTv2.AppendContent({\n      table,\n      trusting,\n      value,\n      loc,\n    });\n  }\n\n  modifier({ callee, args }: CallParts, loc: SourceSpan): ASTv2.ElementModifier {\n    return new ASTv2.ElementModifier({\n      loc,\n      callee,\n      args,\n    });\n  }\n\n  namedBlocks(blocks: ASTv2.NamedBlock[], loc: SourceSpan): ASTv2.NamedBlocks {\n    return new ASTv2.NamedBlocks({\n      loc,\n      blocks,\n    });\n  }\n\n  blockStatement(\n    {\n      program,\n      inverse = null,\n      ...call\n    }: {\n      symbols: SymbolTable;\n      program: ASTv2.Block;\n      inverse?: ASTv2.Block | null;\n    } & CallParts,\n    loc: SourceSpan\n  ): ASTv2.InvokeBlock {\n    let blocksLoc = program.loc;\n    let blocks: PresentArray<ASTv2.NamedBlock> = [\n      this.namedBlock(SourceSlice.synthetic('default'), program, program.loc),\n    ];\n    if (inverse) {\n      blocksLoc = blocksLoc.extend(inverse.loc);\n      blocks.push(this.namedBlock(SourceSlice.synthetic('else'), inverse, inverse.loc));\n    }\n\n    return new ASTv2.InvokeBlock({\n      loc,\n      blocks: this.namedBlocks(blocks, blocksLoc),\n      callee: call.callee,\n      args: call.args,\n    });\n  }\n\n  element(options: BuildBaseElement): BuildElement {\n    return new BuildElement(options);\n  }\n}\n\nexport interface BuildBaseElement {\n  selfClosing: boolean;\n  attrs: ASTv2.HtmlOrSplatAttr[];\n  componentArgs: ASTv2.ComponentArg[];\n  modifiers: ASTv2.ElementModifier[];\n  comments: ASTv2.GlimmerComment[];\n}\n\nexport class BuildElement {\n  readonly builder: Builder;\n  constructor(readonly base: BuildBaseElement) {\n    this.builder = new Builder();\n  }\n\n  simple(tag: SourceSlice, body: ASTv2.ContentNode[], loc: SourceSpan): ASTv2.SimpleElement {\n    return new ASTv2.SimpleElement(\n      assign(\n        {\n          tag,\n          body,\n          componentArgs: [],\n          loc,\n        },\n        this.base\n      )\n    );\n  }\n\n  named(name: SourceSlice, block: ASTv2.Block, loc: SourceSpan): ASTv2.NamedBlock {\n    return new ASTv2.NamedBlock(\n      assign(\n        {\n          name,\n          block,\n          componentArgs: [],\n          loc,\n        },\n        this.base\n      )\n    );\n  }\n\n  selfClosingComponent(callee: ASTv2.ExpressionNode, loc: SourceSpan): ASTv2.InvokeComponent {\n    return new ASTv2.InvokeComponent(\n      assign(\n        {\n          loc,\n          callee,\n          // point the empty named blocks at the `/` self-closing tag\n          blocks: new ASTv2.NamedBlocks({\n            blocks: [],\n            loc: loc.sliceEndChars({ skipEnd: 1, chars: 1 }),\n          }),\n        },\n        this.base\n      )\n    );\n  }\n\n  componentWithDefaultBlock(\n    callee: ASTv2.ExpressionNode,\n    children: ASTv2.ContentNode[],\n    symbols: BlockSymbolTable,\n    loc: SourceSpan\n  ): ASTv2.InvokeComponent {\n    let block = this.builder.block(symbols, children, loc);\n    let namedBlock = this.builder.namedBlock(SourceSlice.synthetic('default'), block, loc); // BUILDER.simpleNamedBlock('default', children, symbols, loc);\n\n    return new ASTv2.InvokeComponent(\n      assign(\n        {\n          loc,\n          callee,\n          blocks: this.builder.namedBlocks([namedBlock], namedBlock.loc),\n        },\n        this.base\n      )\n    );\n  }\n\n  componentWithNamedBlocks(\n    callee: ASTv2.ExpressionNode,\n    blocks: PresentArray<ASTv2.NamedBlock>,\n    loc: SourceSpan\n  ): ASTv2.InvokeComponent {\n    return new ASTv2.InvokeComponent(\n      assign(\n        {\n          loc,\n          callee,\n          blocks: this.builder.namedBlocks(blocks, SpanList.range(blocks)),\n        },\n        this.base\n      )\n    );\n  }\n}\n","import type * as ASTv1 from '../v1/api';\n\nimport * as ASTv2 from './api';\n\nexport interface AstCallParts {\n  path: ASTv1.Expression;\n  params: ASTv1.Expression[];\n  hash: ASTv1.Hash;\n}\n\nexport interface VarPath extends ASTv1.PathExpression {\n  head: ASTv1.VarHead;\n}\n\nexport function SexpSyntaxContext(node: ASTv1.SubExpression): ASTv2.FreeVarResolution | null {\n  if (isSimpleCallee(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.HELPER_NAMESPACE);\n  } else {\n    return null;\n  }\n}\n\nexport function ModifierSyntaxContext(\n  node: ASTv1.ElementModifierStatement\n): ASTv2.FreeVarResolution | null {\n  if (isSimpleCallee(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.MODIFIER_NAMESPACE);\n  } else {\n    return null;\n  }\n}\n\nexport function BlockSyntaxContext(node: ASTv1.BlockStatement): ASTv2.FreeVarResolution | null {\n  if (isSimpleCallee(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.COMPONENT_NAMESPACE);\n  } else {\n    return null;\n  }\n}\n\nexport function ComponentSyntaxContext(node: ASTv1.PathExpression): ASTv2.FreeVarResolution | null {\n  if (isSimplePath(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.COMPONENT_NAMESPACE, true);\n  } else {\n    return null;\n  }\n}\n\n/**\n * This corresponds to attribute curlies (<Foo bar={{...}}>).\n * In strict mode, this also corresponds to arg curlies.\n */\nexport function AttrValueSyntaxContext(\n  node: ASTv1.MustacheStatement\n): ASTv2.FreeVarResolution | null {\n  if (isSimpleCallee(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.HELPER_NAMESPACE);\n  } else {\n    return null;\n  }\n}\n\n/**\n * This corresponds to append positions text curlies.\n */\nexport function AppendSyntaxContext(node: ASTv1.MustacheStatement): ASTv2.FreeVarResolution | null {\n  let isSimple = isSimpleCallee(node);\n  let trusting = node.trusting;\n\n  if (isSimple) {\n    return trusting\n      ? ASTv2.LooseModeResolution.trustingAppend()\n      : ASTv2.LooseModeResolution.append();\n  } else {\n    return null;\n  }\n}\n\nexport type Resolution<P extends AstCallParts | ASTv1.PathExpression> = (\n  call: P\n) => ASTv2.FreeVarResolution | null;\n\n// UTILITIES\n\n/**\n * A call node has a simple callee if its head is:\n *\n * - a `PathExpression`\n * - the `PathExpression`'s head is a `VarHead`\n * - it has no tail\n *\n * Simple heads:\n *\n * ```\n * {{x}}\n * {{x y}}\n * ```\n *\n * Not simple heads:\n *\n * ```\n * {{x.y}}\n * {{x.y z}}\n * {{@x}}\n * {{@x a}}\n * {{this}}\n * {{this a}}\n * ```\n */\nfunction isSimpleCallee(node: AstCallParts): boolean {\n  return isSimplePath(node.path);\n}\n\ntype SimplePath = ASTv1.PathExpression & { head: ASTv1.VarHead };\n\nfunction isSimplePath(node: ASTv1.Expression): node is SimplePath {\n  if (node.type === 'PathExpression' && node.head.type === 'VarHead') {\n    return node.tail.length === 0;\n  } else {\n    return false;\n  }\n}\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { asPresentArray, assert, assign, isPresentArray } from '@glimmer/util';\n\nimport type {\n  PrecompileOptions,\n  PrecompileOptionsWithLexicalScope,\n} from '../parser/tokenizer-event-handlers';\nimport type { SourceLocation } from '../source/location';\nimport type { Source } from '../source/source';\nimport type { SourceSpan } from '../source/span';\nimport type { BlockSymbolTable, ProgramSymbolTable } from '../symbol-table';\nimport type * as ASTv1 from '../v1/api';\nimport type { BuildElement, CallParts } from './builders';\nimport type { Resolution } from './loose-resolution';\n\nimport Printer from '../generation/printer';\nimport { preprocess } from '../parser/tokenizer-event-handlers';\nimport { SourceSlice } from '../source/slice';\nimport { SpanList } from '../source/span-list';\nimport { SymbolTable } from '../symbol-table';\nimport { generateSyntaxError } from '../syntax-error';\nimport { isLowerCase, isUpperCase } from '../utils';\nimport b from '../v1/parser-builders';\nimport * as ASTv2 from './api';\nimport { Builder } from './builders';\nimport {\n  AppendSyntaxContext,\n  AttrValueSyntaxContext,\n  BlockSyntaxContext,\n  ComponentSyntaxContext,\n  ModifierSyntaxContext,\n  SexpSyntaxContext,\n} from './loose-resolution';\n\nexport function normalize(\n  source: Source,\n  options: PrecompileOptionsWithLexicalScope = { lexicalScope: () => false }\n): [ast: ASTv2.Template, locals: string[]] {\n  let ast = preprocess(source, options);\n\n  let normalizeOptions = {\n    strictMode: false,\n    ...options,\n    locals: ast.blockParams,\n    keywords: options.keywords ?? [],\n  };\n\n  let top = SymbolTable.top(normalizeOptions.locals, normalizeOptions.keywords, {\n    customizeComponentName: options.customizeComponentName ?? ((name) => name),\n    lexicalScope: options.lexicalScope,\n  });\n  let block = new BlockContext(source, normalizeOptions, top);\n  let normalizer = new StatementNormalizer(block);\n\n  let astV2 = new TemplateChildren(\n    block.loc(ast.loc),\n    ast.body.map((b) => normalizer.normalize(b)),\n    block\n  ).assertTemplate(top);\n\n  let locals = top.getUsedTemplateLocals();\n\n  return [astV2, locals];\n}\n\n/**\n * A `BlockContext` represents the block that a particular AST node is contained inside of.\n *\n * `BlockContext` is aware of template-wide options (such as strict mode), as well as the bindings\n * that are in-scope within that block.\n *\n * Concretely, it has the `PrecompileOptions` and current `SymbolTable`, and provides\n * facilities for working with those options.\n *\n * `BlockContext` is stateless.\n */\nexport class BlockContext<Table extends SymbolTable = SymbolTable> {\n  readonly builder: Builder;\n\n  constructor(\n    readonly source: Source,\n    private readonly options: PrecompileOptions,\n    readonly table: Table\n  ) {\n    this.builder = new Builder();\n  }\n\n  get strict(): boolean {\n    return this.options.strictMode || false;\n  }\n\n  loc(loc: SourceLocation): SourceSpan {\n    return this.source.spanFor(loc);\n  }\n\n  resolutionFor<N extends ASTv1.CallNode | ASTv1.PathExpression>(\n    node: N,\n    resolution: Resolution<N>\n  ): { result: ASTv2.FreeVarResolution } | { result: 'error'; path: string; head: string } {\n    if (this.strict) {\n      return { result: ASTv2.STRICT_RESOLUTION };\n    }\n\n    if (this.isFreeVar(node)) {\n      let r = resolution(node);\n\n      if (r === null) {\n        return {\n          result: 'error',\n          path: printPath(node),\n          head: printHead(node),\n        };\n      }\n\n      return { result: r };\n    } else {\n      return { result: ASTv2.STRICT_RESOLUTION };\n    }\n  }\n\n  isLexicalVar(variable: string): boolean {\n    return this.table.hasLexical(variable);\n  }\n\n  isKeyword(name: string): boolean {\n    return this.strict && !this.table.hasLexical(name) && this.table.hasKeyword(name);\n  }\n\n  private isFreeVar(callee: ASTv1.CallNode | ASTv1.PathExpression): boolean {\n    if (callee.type === 'PathExpression') {\n      if (callee.head.type !== 'VarHead') {\n        return false;\n      }\n\n      return !this.table.has(callee.head.name);\n    } else if (callee.path.type === 'PathExpression') {\n      return this.isFreeVar(callee.path);\n    } else {\n      return false;\n    }\n  }\n\n  hasBinding(name: string): boolean {\n    return this.table.has(name) || this.table.hasLexical(name);\n  }\n\n  child(blockParams: string[]): BlockContext<BlockSymbolTable> {\n    return new BlockContext(this.source, this.options, this.table.child(blockParams));\n  }\n\n  customizeComponentName(input: string): string {\n    if (this.options.customizeComponentName) {\n      return this.options.customizeComponentName(input);\n    } else {\n      return input;\n    }\n  }\n}\n\n/**\n * An `ExpressionNormalizer` normalizes expressions within a block.\n *\n * `ExpressionNormalizer` is stateless.\n */\nclass ExpressionNormalizer {\n  constructor(private block: BlockContext) {}\n\n  /**\n   * The `normalize` method takes an arbitrary expression and its original syntax context and\n   * normalizes it to an ASTv2 expression.\n   *\n   * @see {SyntaxContext}\n   */\n  normalize(expr: ASTv1.Literal): ASTv2.LiteralExpression;\n  normalize(expr: ASTv1.SubExpression): ASTv2.CallExpression;\n  normalize(\n    expr: ASTv1.MinimalPathExpression,\n    resolution: ASTv2.FreeVarResolution\n  ): ASTv2.PathExpression;\n  normalize(expr: ASTv1.Expression, resolution: ASTv2.FreeVarResolution): ASTv2.ExpressionNode;\n  normalize(\n    expr: ASTv1.Expression | ASTv1.MinimalPathExpression,\n    resolution?: ASTv2.FreeVarResolution\n  ): ASTv2.ExpressionNode {\n    switch (expr.type) {\n      case 'NullLiteral':\n      case 'BooleanLiteral':\n      case 'NumberLiteral':\n      case 'StringLiteral':\n      case 'UndefinedLiteral':\n        return this.block.builder.literal(expr.value, this.block.loc(expr.loc));\n      case 'PathExpression':\n        assert(resolution, '[BUG] resolution is required');\n        return this.path(expr, resolution);\n      case 'SubExpression': {\n        // expr.path used to incorrectly have the type ASTv1.Expression\n        if (isLiteral(expr.path)) {\n          assertIllegalLiteral(expr.path, expr.loc);\n        }\n\n        let resolution = this.block.resolutionFor(expr, SexpSyntaxContext);\n\n        if (resolution.result === 'error') {\n          throw generateSyntaxError(\n            `You attempted to invoke a path (\\`${resolution.path}\\`) but ${resolution.head} was not in scope`,\n            expr.loc\n          );\n        }\n\n        return this.block.builder.sexp(\n          this.callParts(expr, resolution.result),\n          this.block.loc(expr.loc)\n        );\n      }\n    }\n  }\n\n  private path(\n    expr: ASTv1.MinimalPathExpression,\n    resolution: ASTv2.FreeVarResolution\n  ): ASTv2.KeywordExpression | ASTv2.PathExpression {\n    let loc = this.block.loc(expr.loc);\n\n    if (\n      expr.head.type === 'VarHead' &&\n      expr.tail.length === 0 &&\n      this.block.isKeyword(expr.head.name)\n    ) {\n      return this.block.builder.keyword(\n        expr.head.name,\n        this.block.table.getKeyword(expr.head.name),\n        loc\n      );\n    }\n\n    let headOffsets = this.block.loc(expr.head.loc);\n\n    let tail = [];\n\n    // start with the head\n    let offset = headOffsets;\n\n    for (let part of expr.tail) {\n      offset = offset.sliceStartChars({ chars: part.length, skipStart: 1 });\n      tail.push(\n        new SourceSlice({\n          loc: offset,\n          chars: part,\n        })\n      );\n    }\n\n    return this.block.builder.path(this.ref(expr.head, resolution), tail, loc);\n  }\n\n  /**\n   * The `callParts` method takes ASTv1.CallParts as well as a syntax context and normalizes\n   * it to an ASTv2 CallParts.\n   */\n  callParts(parts: ASTv1.CallParts, context: ASTv2.FreeVarResolution): CallParts {\n    let { path, params, hash, loc } = parts;\n\n    let callee = this.normalize(path, context);\n    let paramList = params.map((p) => this.normalize(p, ASTv2.STRICT_RESOLUTION));\n    let paramLoc = SpanList.range(paramList, callee.loc.collapse('end'));\n    let namedLoc = this.block.loc(hash.loc);\n    let argsLoc = SpanList.range([paramLoc, namedLoc]);\n\n    let positional = this.block.builder.positional(\n      params.map((p) => this.normalize(p, ASTv2.STRICT_RESOLUTION)),\n      paramLoc\n    );\n\n    let named = this.block.builder.named(\n      hash.pairs.map((p) => this.namedArgument(p)),\n      this.block.loc(hash.loc)\n    );\n\n    switch (callee.type) {\n      case 'Literal':\n        throw generateSyntaxError(\n          `Invalid invocation of a literal value (\\`${callee.value}\\`)`,\n          loc\n        );\n\n      // This really shouldn't be possible, something has gone pretty wrong\n      case 'Interpolate':\n        throw generateSyntaxError(`Invalid invocation of a interpolated string`, loc);\n    }\n\n    return {\n      callee,\n      args: this.block.builder.args(positional, named, argsLoc),\n    };\n  }\n\n  private namedArgument(pair: ASTv1.HashPair): ASTv2.NamedArgument {\n    let offsets = this.block.loc(pair.loc);\n\n    let keyOffsets = offsets.sliceStartChars({ chars: pair.key.length });\n\n    return this.block.builder.namedArgument(\n      new SourceSlice({ chars: pair.key, loc: keyOffsets }),\n      this.normalize(pair.value, ASTv2.STRICT_RESOLUTION)\n    );\n  }\n\n  /**\n   * The `ref` method normalizes an `ASTv1.PathHead` into an `ASTv2.VariableReference`.\n   * This method is extremely important, because it is responsible for normalizing free\n   * variables into an an ASTv2.PathHead *with appropriate context*.\n   *\n   * The syntax context is originally determined by the syntactic position that this `PathHead`\n   * came from, and is ultimately attached to the `ASTv2.VariableReference` here. In ASTv2,\n   * the `VariableReference` node bears full responsibility for loose mode rules that control\n   * the behavior of free variables.\n   */\n  private ref(head: ASTv1.PathHead, resolution: ASTv2.FreeVarResolution): ASTv2.VariableReference {\n    let { block } = this;\n    let { builder, table } = block;\n    let offsets = block.loc(head.loc);\n\n    switch (head.type) {\n      case 'ThisHead':\n        return builder.self(offsets);\n      case 'AtHead': {\n        let symbol = table.allocateNamed(head.name);\n        return builder.at(head.name, symbol, offsets);\n      }\n      case 'VarHead': {\n        if (block.hasBinding(head.name)) {\n          let [symbol, isRoot] = table.get(head.name);\n\n          return block.builder.localVar(head.name, symbol, isRoot, offsets);\n        } else {\n          let context = block.strict ? ASTv2.STRICT_RESOLUTION : resolution;\n          let symbol = block.table.allocateFree(head.name, context);\n\n          return block.builder.freeVar({\n            name: head.name,\n            context,\n            symbol,\n            loc: offsets,\n          });\n        }\n      }\n    }\n  }\n}\n\n/**\n * `TemplateNormalizer` normalizes top-level ASTv1 statements to ASTv2.\n */\nclass StatementNormalizer {\n  constructor(private readonly block: BlockContext) {}\n\n  normalize(node: ASTv1.Statement): ASTv2.ContentNode | ASTv2.NamedBlock {\n    switch (node.type) {\n      case 'BlockStatement':\n        return this.BlockStatement(node);\n      case 'ElementNode':\n        return new ElementNormalizer(this.block).ElementNode(node);\n      case 'MustacheStatement':\n        return this.MustacheStatement(node);\n\n      // These are the same in ASTv2\n      case 'MustacheCommentStatement':\n        return this.MustacheCommentStatement(node);\n\n      case 'CommentStatement': {\n        let loc = this.block.loc(node.loc);\n        return new ASTv2.HtmlComment({\n          loc,\n          text: loc.slice({ skipStart: 4, skipEnd: 3 }).toSlice(node.value),\n        });\n      }\n\n      case 'TextNode':\n        return new ASTv2.HtmlText({\n          loc: this.block.loc(node.loc),\n          chars: node.chars,\n        });\n    }\n  }\n\n  MustacheCommentStatement(node: ASTv1.MustacheCommentStatement): ASTv2.GlimmerComment {\n    let loc = this.block.loc(node.loc);\n    let textLoc: SourceSpan;\n\n    if (loc.asString().slice(0, 5) === '{{!--') {\n      textLoc = loc.slice({ skipStart: 5, skipEnd: 4 });\n    } else {\n      textLoc = loc.slice({ skipStart: 3, skipEnd: 2 });\n    }\n\n    return new ASTv2.GlimmerComment({\n      loc,\n      text: textLoc.toSlice(node.value),\n    });\n  }\n\n  /**\n   * Normalizes an ASTv1.MustacheStatement to an ASTv2.AppendStatement\n   */\n  MustacheStatement(mustache: ASTv1.MustacheStatement): ASTv2.AppendContent {\n    let { path, params, hash, trusting } = mustache;\n    let loc = this.block.loc(mustache.loc);\n    let value: ASTv2.ExpressionNode;\n\n    if (isLiteral(path)) {\n      if (params.length === 0 && hash.pairs.length === 0) {\n        value = this.expr.normalize(path);\n      } else {\n        assertIllegalLiteral(path, loc);\n      }\n    } else {\n      let resolution = this.block.resolutionFor(mustache, AppendSyntaxContext);\n\n      if (resolution.result === 'error') {\n        throw generateSyntaxError(\n          `You attempted to render a path (\\`{{${resolution.path}}}\\`), but ${resolution.head} was not in scope`,\n          loc\n        );\n      }\n\n      // Normalize the call parts in AppendSyntaxContext\n      let callParts = this.expr.callParts(\n        {\n          path,\n          params,\n          hash,\n          loc,\n        },\n        resolution.result\n      );\n\n      value = callParts.args.isEmpty() ? callParts.callee : this.block.builder.sexp(callParts, loc);\n    }\n\n    return this.block.builder.append(\n      {\n        table: this.block.table,\n        trusting,\n        value,\n      },\n      loc\n    );\n  }\n\n  /**\n   * Normalizes a ASTv1.BlockStatement to an ASTv2.BlockStatement\n   */\n  BlockStatement(block: ASTv1.BlockStatement): ASTv2.InvokeBlock {\n    let { program, inverse } = block;\n    let loc = this.block.loc(block.loc);\n\n    // block.path used to incorrectly have the type ASTv1.Expression\n    if (isLiteral(block.path)) {\n      assertIllegalLiteral(block.path, loc);\n    }\n\n    let resolution = this.block.resolutionFor(block, BlockSyntaxContext);\n\n    if (resolution.result === 'error') {\n      throw generateSyntaxError(\n        `You attempted to invoke a path (\\`{{#${resolution.path}}}\\`) but ${resolution.head} was not in scope`,\n        loc\n      );\n    }\n\n    let callParts = this.expr.callParts(block, resolution.result);\n\n    return this.block.builder.blockStatement(\n      assign(\n        {\n          symbols: this.block.table,\n          program: this.Block(program),\n          inverse: inverse ? this.Block(inverse) : null,\n        },\n        callParts\n      ),\n      loc\n    );\n  }\n\n  Block({ body, loc, blockParams }: ASTv1.Block): ASTv2.Block {\n    let child = this.block.child(blockParams);\n    let normalizer = new StatementNormalizer(child);\n    return new BlockChildren(\n      this.block.loc(loc),\n      body.map((b) => normalizer.normalize(b)),\n      this.block\n    ).assertBlock(child.table);\n  }\n\n  private get expr(): ExpressionNormalizer {\n    return new ExpressionNormalizer(this.block);\n  }\n}\n\nclass ElementNormalizer {\n  constructor(private readonly ctx: BlockContext) {}\n\n  /**\n   * Normalizes an ASTv1.ElementNode to:\n   *\n   * - ASTv2.NamedBlock if the tag name begins with `:`\n   * - ASTv2.Component if the tag name matches the component heuristics\n   * - ASTv2.SimpleElement if the tag name doesn't match the component heuristics\n   *\n   * A tag name represents a component if:\n   *\n   * - it begins with `@`\n   * - it is exactly `this` or begins with `this.`\n   * - the part before the first `.` is a reference to an in-scope variable binding\n   * - it begins with an uppercase character\n   */\n  ElementNode(element: ASTv1.ElementNode): ASTv2.ElementNode {\n    let { tag, selfClosing, comments } = element;\n    let loc = this.ctx.loc(element.loc);\n\n    let [tagHead, ...rest] = asPresentArray(tag.split('.'));\n\n    // the head, attributes and modifiers are in the current scope\n    let path = this.classifyTag(tagHead, rest, element.loc);\n\n    let attrs = element.attributes.filter((a) => a.name[0] !== '@').map((a) => this.attr(a));\n    let args = element.attributes.filter((a) => a.name[0] === '@').map((a) => this.arg(a));\n\n    let modifiers = element.modifiers.map((m) => this.modifier(m));\n\n    // the element's block params are in scope for the children\n    let child = this.ctx.child(element.blockParams);\n    let normalizer = new StatementNormalizer(child);\n\n    let childNodes = element.children.map((s) => normalizer.normalize(s));\n\n    let el = this.ctx.builder.element({\n      selfClosing,\n      attrs,\n      componentArgs: args,\n      modifiers,\n      comments: comments.map((c) => new StatementNormalizer(this.ctx).MustacheCommentStatement(c)),\n    });\n\n    let children = new ElementChildren(el, loc, childNodes, this.ctx);\n\n    let offsets = this.ctx.loc(element.loc);\n    let tagOffsets = offsets.sliceStartChars({ chars: tag.length, skipStart: 1 });\n\n    if (path === 'ElementHead') {\n      if (tag[0] === ':') {\n        return children.assertNamedBlock(\n          tagOffsets.slice({ skipStart: 1 }).toSlice(tag.slice(1)),\n          child.table\n        );\n      } else {\n        return children.assertElement(tagOffsets.toSlice(tag), element.blockParams.length > 0);\n      }\n    }\n\n    if (element.selfClosing) {\n      return el.selfClosingComponent(path, loc);\n    } else {\n      let blocks = children.assertComponent(tag, child.table, element.blockParams.length > 0);\n      return el.componentWithNamedBlocks(path, blocks, loc);\n    }\n  }\n\n  private modifier(m: ASTv1.ElementModifierStatement): ASTv2.ElementModifier {\n    // modifier.path used to incorrectly have the type ASTv1.Expression\n    if (isLiteral(m.path)) {\n      assertIllegalLiteral(m.path, m.loc);\n    }\n\n    let resolution = this.ctx.resolutionFor(m, ModifierSyntaxContext);\n\n    if (resolution.result === 'error') {\n      throw generateSyntaxError(\n        `You attempted to invoke a path (\\`{{${resolution.path}}}\\`) as a modifier, but ${resolution.head} was not in scope`,\n        m.loc\n      );\n    }\n\n    let callParts = this.expr.callParts(m, resolution.result);\n    return this.ctx.builder.modifier(callParts, this.ctx.loc(m.loc));\n  }\n\n  /**\n   * This method handles attribute values that are curlies, as well as curlies nested inside of\n   * interpolations:\n   *\n   * ```hbs\n   * <a href={{url}} />\n   * <a href=\"{{url}}.html\" />\n   * ```\n   */\n  private mustacheAttr(mustache: ASTv1.MustacheStatement): ASTv2.ExpressionNode {\n    let { path, params, hash, loc } = mustache;\n\n    if (isLiteral(path)) {\n      if (params.length === 0 && hash.pairs.length === 0) {\n        return this.expr.normalize(path);\n      } else {\n        assertIllegalLiteral(path, loc);\n      }\n    }\n\n    // Normalize the call parts in AttrValueSyntaxContext\n    let resolution = this.ctx.resolutionFor(mustache, AttrValueSyntaxContext);\n\n    if (resolution.result === 'error') {\n      throw generateSyntaxError(\n        `You attempted to render a path (\\`{{${resolution.path}}}\\`), but ${resolution.head} was not in scope`,\n        mustache.loc\n      );\n    }\n\n    let sexp = this.ctx.builder.sexp(\n      this.expr.callParts(mustache as ASTv1.CallParts, resolution.result),\n      this.ctx.loc(mustache.loc)\n    );\n\n    // If there are no params or hash, just return the function part as its own expression\n    if (sexp.args.isEmpty()) {\n      return sexp.callee;\n    } else {\n      return sexp;\n    }\n  }\n\n  /**\n   * attrPart is the narrowed down list of valid attribute values that are also\n   * allowed as a concat part (you can't nest concats).\n   */\n  private attrPart(part: ASTv1.MustacheStatement | ASTv1.TextNode): {\n    expr: ASTv2.ExpressionNode;\n    trusting: boolean;\n  } {\n    switch (part.type) {\n      case 'MustacheStatement':\n        return { expr: this.mustacheAttr(part), trusting: part.trusting };\n      case 'TextNode':\n        return {\n          expr: this.ctx.builder.literal(part.chars, this.ctx.loc(part.loc)),\n          trusting: true,\n        };\n    }\n  }\n\n  private attrValue(part: ASTv1.MustacheStatement | ASTv1.TextNode | ASTv1.ConcatStatement): {\n    expr: ASTv2.ExpressionNode;\n    trusting: boolean;\n  } {\n    switch (part.type) {\n      case 'ConcatStatement': {\n        let parts = part.parts.map((p) => this.attrPart(p).expr);\n        return {\n          expr: this.ctx.builder.interpolate(parts, this.ctx.loc(part.loc)),\n          trusting: false,\n        };\n      }\n      default:\n        return this.attrPart(part);\n    }\n  }\n\n  private attr(m: ASTv1.AttrNode): ASTv2.HtmlOrSplatAttr {\n    assert(m.name[0] !== '@', 'An attr name must not start with `@`');\n\n    if (m.name === '...attributes') {\n      return this.ctx.builder.splatAttr(this.ctx.table.allocateBlock('attrs'), this.ctx.loc(m.loc));\n    }\n\n    let offsets = this.ctx.loc(m.loc);\n    let nameSlice = offsets.sliceStartChars({ chars: m.name.length }).toSlice(m.name);\n    let value = this.attrValue(m.value);\n\n    return this.ctx.builder.attr(\n      { name: nameSlice, value: value.expr, trusting: value.trusting },\n      offsets\n    );\n  }\n\n  // An arg curly <Foo @bar={{...}} /> is the same as an attribute curly for\n  // our purposes, except that in loose mode <Foo @bar={{baz}} /> is an error:\n  private checkArgCall(arg: ASTv1.AttrNode): void {\n    let { value } = arg;\n\n    if (value.type !== 'MustacheStatement') {\n      return;\n    }\n\n    if (value.params.length !== 0 || value.hash.pairs.length !== 0) {\n      return;\n    }\n\n    let { path } = value;\n\n    if (path.type !== 'PathExpression') {\n      return;\n    }\n\n    if (path.tail.length > 0) {\n      return;\n    }\n\n    let resolution = this.ctx.resolutionFor(path, () => {\n      // We deliberately don't want this to resolve anything. The purpose of\n      // calling `resolutionFor` here is to check for strict mode, in-scope\n      // local variables, etc.\n      return null;\n    });\n\n    if (resolution.result === 'error' && resolution.path !== 'has-block') {\n      throw generateSyntaxError(\n        `You attempted to pass a path as argument (\\`${arg.name}={{${resolution.path}}}\\`) but ${resolution.head} was not in scope. Try:\\n` +\n          `* \\`${arg.name}={{this.${resolution.path}}}\\` if this is meant to be a property lookup, or\\n` +\n          `* \\`${arg.name}={{(${resolution.path})}}\\` if this is meant to invoke the resolved helper, or\\n` +\n          `* \\`${arg.name}={{helper \"${resolution.path}\"}}\\` if this is meant to pass the resolved helper by value`,\n        arg.loc\n      );\n    }\n  }\n\n  private arg(arg: ASTv1.AttrNode): ASTv2.ComponentArg {\n    assert(arg.name[0] === '@', 'An arg name must start with `@`');\n    this.checkArgCall(arg);\n\n    let offsets = this.ctx.loc(arg.loc);\n    let nameSlice = offsets.sliceStartChars({ chars: arg.name.length }).toSlice(arg.name);\n    let value = this.attrValue(arg.value);\n\n    return this.ctx.builder.arg(\n      { name: nameSlice, value: value.expr, trusting: value.trusting },\n      offsets\n    );\n  }\n\n  /**\n   * This function classifies the head of an ASTv1.Element into an ASTv2.PathHead (if the\n   * element is a component) or `'ElementHead'` (if the element is a simple element).\n   *\n   * Rules:\n   *\n   * 1. If the variable is an `@arg`, return an `AtHead`\n   * 2. If the variable is `this`, return a `ThisHead`\n   * 3. If the variable is in the current scope:\n   *   a. If the scope is the root scope, then return a Free `LocalVarHead`\n   *   b. Else, return a standard `LocalVarHead`\n   * 4. If the tag name is a path and the variable is not in the current scope, Syntax Error\n   * 5. If the variable is uppercase return a FreeVar(ResolveAsComponentHead)\n   * 6. Otherwise, return `'ElementHead'`\n   */\n  private classifyTag(\n    variable: string,\n    tail: string[],\n    loc: SourceSpan\n  ): ASTv2.ExpressionNode | 'ElementHead' {\n    let uppercase = isUpperCase(variable);\n    let inScope = variable[0] === '@' || variable === 'this' || this.ctx.hasBinding(variable);\n\n    if (this.ctx.strict && !inScope) {\n      if (uppercase) {\n        throw generateSyntaxError(\n          `Attempted to invoke a component that was not in scope in a strict mode template, \\`<${variable}>\\`. If you wanted to create an element with that name, convert it to lowercase - \\`<${variable.toLowerCase()}>\\``,\n          loc\n        );\n      }\n\n      // In strict mode, values are always elements unless they are in scope\n      return 'ElementHead';\n    }\n\n    // Since the parser handed us the HTML element name as a string, we need\n    // to convert it into an ASTv1 path so it can be processed using the\n    // expression normalizer.\n    let isComponent = inScope || uppercase;\n\n    let variableLoc = loc.sliceStartChars({ skipStart: 1, chars: variable.length });\n\n    let tailLength = tail.reduce((accum, part) => accum + 1 + part.length, 0);\n    let pathEnd = variableLoc.getEnd().move(tailLength);\n    let pathLoc = variableLoc.withEnd(pathEnd);\n\n    if (isComponent) {\n      let path = b.path({\n        head: b.head({ original: variable, loc: variableLoc }),\n        tail,\n        loc: pathLoc,\n      });\n\n      let resolution = this.ctx.isLexicalVar(variable)\n        ? { result: ASTv2.STRICT_RESOLUTION }\n        : this.ctx.resolutionFor(path, ComponentSyntaxContext);\n\n      if (resolution.result === 'error') {\n        throw generateSyntaxError(\n          `You attempted to invoke a path (\\`<${resolution.path}>\\`) but ${resolution.head} was not in scope`,\n          loc\n        );\n      }\n\n      return new ExpressionNormalizer(this.ctx).normalize(path, resolution.result);\n    } else {\n      this.ctx.table.allocateFree(variable, ASTv2.STRICT_RESOLUTION);\n    }\n\n    // If the tag name wasn't a valid component but contained a `.`, it's\n    // a syntax error.\n    if (tail.length > 0) {\n      throw generateSyntaxError(\n        `You used ${variable}.${tail.join('.')} as a tag name, but ${variable} is not in scope`,\n        loc\n      );\n    }\n\n    return 'ElementHead';\n  }\n\n  private get expr(): ExpressionNormalizer {\n    return new ExpressionNormalizer(this.ctx);\n  }\n}\n\nclass Children {\n  readonly namedBlocks: ASTv2.NamedBlock[];\n  readonly hasSemanticContent: boolean;\n  readonly nonBlockChildren: ASTv2.ContentNode[];\n\n  constructor(\n    readonly loc: SourceSpan,\n    readonly children: (ASTv2.ContentNode | ASTv2.NamedBlock)[],\n    readonly block: BlockContext\n  ) {\n    this.namedBlocks = children.filter((c): c is ASTv2.NamedBlock => c instanceof ASTv2.NamedBlock);\n    this.hasSemanticContent = Boolean(\n      children.filter((c): c is ASTv2.ContentNode => {\n        if (c instanceof ASTv2.NamedBlock) {\n          return false;\n        }\n        switch (c.type) {\n          case 'GlimmerComment':\n          case 'HtmlComment':\n            return false;\n          case 'HtmlText':\n            return !/^\\s*$/u.test(c.chars);\n          default:\n            return true;\n        }\n      }).length\n    );\n    this.nonBlockChildren = children.filter(\n      (c): c is ASTv2.ContentNode => !(c instanceof ASTv2.NamedBlock)\n    );\n  }\n}\n\nclass TemplateChildren extends Children {\n  assertTemplate(table: ProgramSymbolTable): ASTv2.Template {\n    if (isPresentArray(this.namedBlocks)) {\n      throw generateSyntaxError(`Unexpected named block at the top-level of a template`, this.loc);\n    }\n\n    return this.block.builder.template(table, this.nonBlockChildren, this.block.loc(this.loc));\n  }\n}\n\nclass BlockChildren extends Children {\n  assertBlock(table: BlockSymbolTable): ASTv2.Block {\n    if (isPresentArray(this.namedBlocks)) {\n      throw generateSyntaxError(`Unexpected named block nested in a normal block`, this.loc);\n    }\n\n    return this.block.builder.block(table, this.nonBlockChildren, this.loc);\n  }\n}\n\nclass ElementChildren extends Children {\n  constructor(\n    private el: BuildElement,\n    loc: SourceSpan,\n    children: (ASTv2.ContentNode | ASTv2.NamedBlock)[],\n    block: BlockContext\n  ) {\n    super(loc, children, block);\n  }\n\n  assertNamedBlock(name: SourceSlice, table: BlockSymbolTable): ASTv2.NamedBlock {\n    if (this.el.base.selfClosing) {\n      throw generateSyntaxError(\n        `<:${name.chars}/> is not a valid named block: named blocks cannot be self-closing`,\n        this.loc\n      );\n    }\n\n    if (isPresentArray(this.namedBlocks)) {\n      throw generateSyntaxError(\n        `Unexpected named block inside <:${name.chars}> named block: named blocks cannot contain nested named blocks`,\n        this.loc\n      );\n    }\n\n    if (!isLowerCase(name.chars)) {\n      throw generateSyntaxError(\n        `<:${name.chars}> is not a valid named block, and named blocks must begin with a lowercase letter`,\n        this.loc\n      );\n    }\n\n    if (\n      this.el.base.attrs.length > 0 ||\n      this.el.base.componentArgs.length > 0 ||\n      this.el.base.modifiers.length > 0\n    ) {\n      throw generateSyntaxError(\n        `named block <:${name.chars}> cannot have attributes, arguments, or modifiers`,\n        this.loc\n      );\n    }\n\n    let offsets = SpanList.range(this.nonBlockChildren, this.loc);\n\n    return this.block.builder.namedBlock(\n      name,\n      this.block.builder.block(table, this.nonBlockChildren, offsets),\n      this.loc\n    );\n  }\n\n  assertElement(name: SourceSlice, hasBlockParams: boolean): ASTv2.SimpleElement {\n    if (hasBlockParams) {\n      throw generateSyntaxError(\n        `Unexpected block params in <${name.chars}>: simple elements cannot have block params`,\n        this.loc\n      );\n    }\n\n    if (isPresentArray(this.namedBlocks)) {\n      let names = this.namedBlocks.map((b) => b.name);\n\n      if (names.length === 1) {\n        throw generateSyntaxError(\n          `Unexpected named block <:foo> inside <${name.chars}> HTML element`,\n          this.loc\n        );\n      } else {\n        let printedNames = names.map((n) => `<:${n.chars}>`).join(', ');\n        throw generateSyntaxError(\n          `Unexpected named blocks inside <${name.chars}> HTML element (${printedNames})`,\n          this.loc\n        );\n      }\n    }\n\n    return this.el.simple(name, this.nonBlockChildren, this.loc);\n  }\n\n  assertComponent(\n    name: string,\n    table: BlockSymbolTable,\n    hasBlockParams: boolean\n  ): PresentArray<ASTv2.NamedBlock> {\n    if (isPresentArray(this.namedBlocks) && this.hasSemanticContent) {\n      throw generateSyntaxError(\n        `Unexpected content inside <${name}> component invocation: when using named blocks, the tag cannot contain other content`,\n        this.loc\n      );\n    }\n\n    if (isPresentArray(this.namedBlocks)) {\n      if (hasBlockParams) {\n        throw generateSyntaxError(\n          `Unexpected block params list on <${name}> component invocation: when passing named blocks, the invocation tag cannot take block params`,\n          this.loc\n        );\n      }\n\n      let seenNames = new Set<string>();\n\n      for (let block of this.namedBlocks) {\n        let name = block.name.chars;\n\n        if (seenNames.has(name)) {\n          throw generateSyntaxError(\n            `Component had two named blocks with the same name, \\`<:${name}>\\`. Only one block with a given name may be passed`,\n            this.loc\n          );\n        }\n\n        if (\n          (name === 'inverse' && seenNames.has('else')) ||\n          (name === 'else' && seenNames.has('inverse'))\n        ) {\n          throw generateSyntaxError(\n            `Component has both <:else> and <:inverse> block. <:inverse> is an alias for <:else>`,\n            this.loc\n          );\n        }\n\n        seenNames.add(name);\n      }\n\n      return this.namedBlocks;\n    } else {\n      return [\n        this.block.builder.namedBlock(\n          SourceSlice.synthetic('default'),\n          this.block.builder.block(table, this.nonBlockChildren, this.loc),\n          this.loc\n        ),\n      ];\n    }\n  }\n}\n\nfunction isLiteral(node: ASTv1.Expression): node is ASTv1.Literal {\n  switch (node.type) {\n    case 'StringLiteral':\n    case 'BooleanLiteral':\n    case 'NumberLiteral':\n    case 'UndefinedLiteral':\n    case 'NullLiteral':\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction assertIllegalLiteral(node: ASTv1.Literal, loc: SourceSpan): never {\n  let value = node.type === 'StringLiteral' ? JSON.stringify(node.value) : String(node.value);\n  throw generateSyntaxError(`Unexpected literal \\`${value}\\``, loc);\n}\n\nfunction printPath(node: ASTv1.PathExpression | ASTv1.CallNode): string {\n  if (node.type !== 'PathExpression' && node.path.type === 'PathExpression') {\n    return printPath(node.path);\n  } else {\n    return new Printer({ entityEncoding: 'raw' }).print(node);\n  }\n}\n\nfunction printHead(node: ASTv1.PathExpression | ASTv1.CallNode): string {\n  if (node.type === 'PathExpression') {\n    return node.head.original;\n  } else if (node.path.type === 'PathExpression') {\n    return printHead(node.path);\n  } else {\n    return new Printer({ entityEncoding: 'raw' }).print(node);\n  }\n}\n"],"names":["Char","ATTR_VALUE_REGEX_TEST","ATTR_VALUE_REGEX_REPLACE","RegExp","source","TEXT_REGEX_TEST","TEXT_REGEX_REPLACE","attrValueReplacer","char","charCodeAt","NBSP","QUOT","AMP","textReplacer","LT","GT","sortByLoc","a","b","loc","isInvisible","startPosition","line","column","voidMap","Set","getVoidTags","NON_WHITESPACE","isVoidTag","tag","has","toLowerCase","Printer","buffer","options","constructor","this","handledByOverride","node","ensureLeadingWhitespace","undefined","override","result","test","Node","type","TopLevelStatement","Expression","ConcatStatement","Hash","HashPair","ElementModifierStatement","expression","Literal","PathExpression","SubExpression","literal","StringLiteral","BooleanLiteral","NumberLiteral","UndefinedLiteral","NullLiteral","statement","MustacheStatement","BlockStatement","MustacheCommentStatement","CommentStatement","TextNode","ElementNode","Block","Template","AttrNode","template","TopLevelStatements","body","block","chained","statements","forEach","el","OpenElementNode","children","CloseElementNode","parts","attributes","modifiers","comments","sort","part","blockParams","length","BlockParams","selfClosing","attr","name","value","chars","AttrNodeValue","text","isAttr","attrValue","entityEncoding","replace","escapeText","mustache","trusting","strip","open","path","Params","params","hash","close","inverseStrip","openStrip","program","inverse","closeStrip","join","concat","comment","mod","original","sexp","param","pairs","pair","key","str","JSON","stringify","bool","number","print","build","ast","isKeyword","word","KEYWORDS_TYPES","includes","action","component","debugger","each","helper","if","let","log","modifier","mount","mut","outlet","readonly","unbound","unless","yield","UNKNOWN_POSITION","Object","freeze","SYNTHETIC_LOCATION","start","end","NON_EXISTENT_LOCATION","BROKEN_LOCATION","OffsetKind","MatchAny","IsInvisible","WhenList","_whens","whens","first","kind","when","match","isPresentArray","When","_map","Map","get","pattern","or","set","add","out","Broken","InternalsSynthetic","NonExistent","patternFor","exact","fallback","push","callback","Matcher","check","left","right","matchFor","nesteds","assert","SourceSlice","synthetic","offsets","src","load","slice","getString","serialize","SourceSpan","NON_EXISTENT","InvisibleSpan","wrap","serialized","forCharPositions","Array","isArray","broken","assertNever","forHbsLoc","HbsPosition","HbsSpan","startPos","endPos","CharPosition","CharPositionSpan","pos","data","getStart","getEnd","span","toHbsSpan","toHbsLoc","module","getModule","endPosition","toJSON","withStart","other","withEnd","asString","toSlice","expected","position","locDidUpdate","collapse","where","collapsed","extend","skipStart","skipEnd","move","sliceStartChars","sliceEndChars","_locPosSpan","charPositions","charPos","locPosSpan","toHbsPos","BROKEN","toCharPosSpan","_charPosSpan","_providedHbsLoc","hbsPositions","providedHbsLoc","updateProvided","edge","hbsPos","charPosSpan","toCharPos","string","InvisiblePosition","m","rightCharPos","leftCharPos","_","SourceOffset","forHbsPos","offset","eql","until","by","_locPos","hbs","locPos","hbsPosFor","_charPos","charPosNumber","charPosFor","Source","from","meta","moduleName","offsetFor","spanFor","seenLines","seenChars","nextLine","indexOf","sourceLength","SpanList","range","map","getRangeOffset","_span","getFirst","last","getLast","hasSpan","maybeLoc","location","generateSyntaxError","message","code","quotedCode","split","error","Error","visitorKeys","TraversalError","parent","call","stack","prototype","create","cannotRemoveNode","cannotReplaceNode","cannotReplaceOrRemoveInKeyHandlerYet","WalkerPath","parentKey","parentNode","parents","Symbol","iterator","PathParentsIterator","next","done","getEnterFunction","handler","enter","getExitFunction","exit","visitNode","visitor","nodeType","Program","deprecate","All","getNodeHandler","visitArray","keys","i","visitKey","keyEnter","keyExit","keyHandler","keyVisitor","getKeyHandler","assignKey","array","unwrap","spliceArray","index","splice","traverse","Walker","order","visit","pop","walkBody","walker","child","appendChild","childrenFor","isHBSLiteral","_SOURCE","SOURCE","buildVar","var","buildLoc","buildPath","head","tail","asPresentArray","headNode","buildHead","buildLiteral","buildHash","buildBlockParams","p","buildBlockItself","blockItself","buildTemplate","args","startLine","startColumn","endLine","endColumn","_source","publicBuilder","_defaultBlock","_elseBlock","defaultBlock","elseBlock","mustacheComment","element","attrs","openTag","closeTag","_closeTag","endsWith","elementModifier","sexpr","fullPath","at","atName","boolean","null","DEFAULT_STRIP","defineProperty","enumerable","buildLegacyMustache","_selfClosing","shift","startsWith","values","unshift","buildLegacyPath","_name","buildLegacyLiteral","Parser","elementStack","lines","currentAttribute","currentNode","tokenizer","entityParser","EntityParser","namedCharRefs","mode","EventedTokenizer","finish","assign","currentAttr","expect","currentTag","currentStartTag","currentEndTag","currentComment","currentData","acceptNode","currentElement","sourceForNode","endNode","lastLine","lastColumn","firstLine","currentLine","firstColumn","BEFORE_ATTRIBUTE_NAME","HandlebarsNodeVisitors","pendingError","parse","parseProgram","eof","poppedNode","state","appendToCommentData","acceptCallNodes","content","limit","nameStart","rawMustache","escaped","addElementModifier","beginAttributeValue","finishAttributeValue","transitionTo","appendDynamicAttributeValuePart","finalizeTextPart","isDynamic","currentPart","startTextPart","ContentStatement","columns","difference","lineCount","calculateRightStrippedOffsets","updateTokenizerLocation","tokenizePart","flushData","rawComment","PartialStatement","partial","PartialBlockStatement","partialBlock","Decorator","decorator","DecoratorBlock","decoratorBlock","pathHead","thisHead","undef","nul","compiler","toString","e","printLiteral","isSpace","TokenizerEventHandlers","tagOpenLine","tagOpenColumn","reset","beginComment","finishComment","beginData","appendToData","finishData","tagOpen","beginStartTag","nameEnd","beginEndTag","finishTag","finishStartTag","finishEndTag","nameLoc","isVoid","closeTagStart","validateEndTag","markTagAsSelfClosing","appendToTagName","beginAttribute","isQuoted","valueSpan","appendToAttributeName","parsePossibleBlockParams","appendToAttributeValue","lastPart","current","tokenizerPos","assembleAttributeValue","attribute","ID_INVERSE_PATTERN","as","handlers","PossibleAs","consume","BeforeStartPipe","BeforeBlockParamName","BlockParamName","AfterEndPipe","Done","peek","reportSyntaxError","assembleConcatenatedValue","assertPresentArray","syntax","preprocess","builders","CodemodEntityParser","super","input","parseWithoutProcessing","parseOptions","locals","plugins","transform","addTokens","tokensSet","scopedTokens","maybeTokens","possbleToken","charAt","includeHtmlElements","substr","potentialLocal","tokensFromType","maybeToken","maybeTokenFirstSegment","getTemplateLocals","html","includeKeywords","tokens","s","filter","token","fields","Args","empty","positional","PositionalArguments","named","NamedArguments","nth","isEmpty","exprs","size","entries","entry","NamedArgument","HtmlAttr","SplatAttr","ComponentArg","toNamedArgument","ElementModifier","GlimmerComment","HtmlText","HtmlComment","AppendContent","callee","InvokeBlock","InvokeComponent","componentArgs","SimpleElement","LiteralExpression","KeywordExpression","CallExpression","InterpolateExpression","NamedBlocks","blocks","NamedBlock","ThisReference","ArgReference","LocalVarReference","FreeVarReference","STRICT_RESOLUTION","resolution","SexpOpcodes","GetStrictKeyword","isAngleBracket","HTML_RESOLUTION","LooseModeResolution","namespaced","namespace","append","FreeVarNamespace","Component","Helper","trustingAppend","namespaces","GetFreeAsComponentOrHelperHead","GetFreeAsHelperHead","Modifier","GetFreeAsModifierHead","GetFreeAsComponentHead","HELPER_NAMESPACE","MODIFIER_NAMESPACE","COMPONENT_NAMESPACE","SymbolTable","top","keywords","ProgramSymbolTable","symbols","allocate","BlockSymbolTable","templateLocals","upvars","dict","usedTemplateLocals","hasDebugger","hasLexical","lexicalScope","hasKeyword","getKeyword","allocateFree","ASTv2","getUsedTemplateLocals","setHasDebugger","hasEval","getLocalsMap","getDebugInfo","customizeComponentName","allocateNamed","allocateBlock","identifier","slots","local","slot","symbol","Builder","table","scope","namedBlock","simpleNamedBlock","BuildElement","namedArgument","splatAttr","arg","ref","keyword","self","freeVar","context","localVar","isTemplateLocal","interpolate","namedBlocks","blockStatement","blocksLoc","builder","base","simple","selfClosingComponent","componentWithDefaultBlock","componentWithNamedBlocks","SexpSyntaxContext","isSimpleCallee","ModifierSyntaxContext","BlockSyntaxContext","ComponentSyntaxContext","isSimplePath","AttrValueSyntaxContext","AppendSyntaxContext","isSimple","normalize","normalizeOptions","strictMode","BlockContext","normalizer","StatementNormalizer","astV2","TemplateChildren","assertTemplate","strict","resolutionFor","isFreeVar","r","printPath","printHead","isLexicalVar","variable","hasBinding","ExpressionNormalizer","expr","isLiteral","assertIllegalLiteral","callParts","paramList","paramLoc","namedLoc","argsLoc","keyOffsets","isRoot","ElementNormalizer","textLoc","BlockChildren","assertBlock","ctx","tagHead","rest","classifyTag","childNodes","c","ElementChildren","tagOffsets","assertNamedBlock","assertElement","assertComponent","mustacheAttr","attrPart","nameSlice","checkArgCall","uppercase","toUpperCase","inScope","isComponent","variableLoc","tailLength","reduce","accum","pathEnd","pathLoc","Children","hasSemanticContent","nonBlockChildren","Boolean","hasBlockParams","names","printedNames","n","seenNames","String"],"mappings":"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"}