{"version":3,"file":"splitter.js","sourceRoot":"","sources":["../ts/splitter.ts"],"names":[],"mappings":"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","sourcesContent":["import makeDebug from 'debug';\nimport Analyzer, { Import, LiteralImport, TemplateImport } from './analyzer';\nimport Package, { DepResolution } from './package';\nimport { shallowEqual } from './util';\nimport { flatten, partition } from 'lodash';\nimport BundleConfig from './bundle-config';\nimport { join } from 'path';\nimport { satisfies } from 'semver';\n\nconst debug = makeDebug('ember-auto-import:splitter');\n\nexport interface ResolvedImport {\n  requestedSpecifier: string;\n  resolvedSpecifier: string;\n  packageName: string;\n  packageRoot: string;\n  importedBy: LiteralImport[];\n}\n\nexport interface ResolvedTemplateImport {\n  cookedQuasis: string[];\n  expressionNameHints: string[];\n  packageName: string;\n  packageRoot: string;\n  importedBy: TemplateImport[];\n}\n\nexport interface BundleDependencies {\n  staticImports: ResolvedImport[];\n  staticTemplateImports: ResolvedTemplateImport[];\n  dynamicImports: ResolvedImport[];\n  dynamicTemplateImports: ResolvedTemplateImport[];\n}\n\nexport interface SplitterOptions {\n  // list of bundle names in priority order\n  bundles: BundleConfig;\n  analyzers: Map<Analyzer, Package>;\n}\n\nexport default class Splitter {\n  private lastImports: Import[][] | undefined;\n  private lastDeps: Map<string, BundleDependencies> | null = null;\n  private packageVersions: Map<string, string> = new Map();\n\n  constructor(private options: SplitterOptions) {}\n\n  async deps(): Promise<Map<string, BundleDependencies>> {\n    if (this.importsChanged()) {\n      this.lastDeps = await this.computeDeps(this.options.analyzers);\n      debug('output %s', new LazyPrintDeps(this.lastDeps));\n    }\n    return this.lastDeps!;\n  }\n\n  private importsChanged(): boolean {\n    let imports = [...this.options.analyzers.keys()].map(\n      (analyzer) => analyzer.imports\n    );\n    if (!this.lastImports || !shallowEqual(this.lastImports, imports)) {\n      this.lastImports = imports;\n      return true;\n    }\n    return false;\n  }\n\n  private async computeTargets(analyzers: Map<Analyzer, Package>) {\n    let targets: Map<string, ResolvedImport> = new Map();\n    let templateTargets: Map<string, ResolvedTemplateImport> = new Map();\n    let imports = flatten(\n      [...analyzers.keys()].map((analyzer) => analyzer.imports)\n    );\n    await Promise.all(\n      imports.map(async (imp) => {\n        if ('specifier' in imp) {\n          await this.handleLiteralImport(imp, targets);\n        } else {\n          await this.handleTemplateImport(imp, templateTargets);\n        }\n      })\n    );\n    return { targets, templateTargets };\n  }\n\n  private async handleLiteralImport(\n    imp: LiteralImport,\n    targets: Map<string, ResolvedImport>\n  ) {\n    let target = imp.package.resolve(imp.specifier, imp.path);\n\n    if (!target) {\n      return;\n    }\n\n    if (target.type === 'url') {\n      // people can statically import from URLs if they want to, that's clearly\n      // nothing to do with us (though in practice the rest of ember-cli will\n      // generally be sad about this)\n      return;\n    }\n\n    if (target.type === 'local') {\n      // we're only trying to identify imports of external NPM\n      // packages, so relative imports are never relevant.\n      if (imp.isDynamic) {\n        throw new Error(\n          `ember-auto-import does not support dynamic relative imports. \"${imp.specifier}\" is relative. To make this work, you need to upgrade to Embroider.`\n        );\n      }\n      return;\n    }\n\n    let seenAlready = targets.get(imp.specifier);\n    if (seenAlready) {\n      await this.assertSafeVersion(seenAlready, imp, target);\n      seenAlready.importedBy.push(imp);\n    } else {\n      targets.set(imp.specifier, {\n        requestedSpecifier: imp.specifier,\n        resolvedSpecifier: target.resolvedSpecifier,\n        packageName: target.packageName,\n        packageRoot: target.packageRoot,\n        importedBy: [imp],\n      });\n    }\n  }\n\n  private async handleTemplateImport(\n    imp: TemplateImport,\n    targets: Map<string, ResolvedTemplateImport>\n  ) {\n    let [leadingQuasi] = imp.cookedQuasis;\n\n    let target = imp.package.resolve(leadingQuasi, imp.path, true);\n\n    if (!target) {\n      throw new Error(\n        `ember-auto-import is unable to handle '${leadingQuasi}'. ` +\n          `The attempted import of '${imp.cookedQuasis.join(\n            ''\n          )}' is located in ${imp.path}`\n      );\n    }\n\n    if (target.type === 'local') {\n      return;\n    }\n\n    if (target.type === 'imprecise') {\n      throw new Error(\n        `Dynamic imports must target unambiguous package names. '${leadingQuasi}' is ambiguous. ` +\n          `The attempted import of '${imp.cookedQuasis.join(\n            ''\n          )}' is located in ${imp.path}`\n      );\n    }\n\n    if (target.type === 'url') {\n      return;\n    }\n\n    // this just makes the key look pleasantly like the original template\n    // string, there's nothing magical about \"e\" here, it just means \"an\n    // expression goes here and we don't care which one\".c\n    let specifierKey = imp.cookedQuasis.join('${e}');\n\n    let seenAlready = targets.get(specifierKey);\n    if (seenAlready) {\n      await this.assertSafeVersion(seenAlready, imp, target);\n      seenAlready.importedBy.push(imp);\n    } else {\n      targets.set(specifierKey, {\n        packageName: target.packageName,\n        packageRoot: target.packageRoot,\n        cookedQuasis: imp.cookedQuasis,\n        expressionNameHints: imp.expressionNameHints.map(\n          (hint, index) => hint || `arg${index}`\n        ),\n        importedBy: [imp],\n      });\n    }\n  }\n\n  private async versionOfPackage(packageRoot: string) {\n    if (this.packageVersions.has(packageRoot)) {\n      return this.packageVersions.get(packageRoot);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    let pkg = require(join(packageRoot, 'package.json'));\n    let version = pkg.version;\n    this.packageVersions.set(packageRoot, version);\n    return version;\n  }\n\n  private async assertSafeVersion(\n    alreadyResolved: ResolvedImport | ResolvedTemplateImport,\n    nextImport: Import,\n    nextTarget: DepResolution\n  ) {\n    if (alreadyResolved.packageRoot === nextTarget.packageRoot) {\n      // the next import is resolving to the same copy of the package we are\n      // already using. This is the normal and happy case.\n      return;\n    }\n\n    let requestedRange = nextImport.package.requestedRange(\n      nextTarget.packageName\n    );\n    if (!requestedRange) {\n      // this is probably an error condition, but it's not the error condition\n      // that this particular assertion is checking. Our job is just to make\n      // sure nobody's requested semver ranges are violated. If you don't have\n      // any range, we can't violate it. In practice if you lacked a declared\n      // dependency, Package#resolve would have failed earlier than this because\n      // it ensures we only resolve declared dependencies.\n      return;\n    }\n\n    let haveVersion = await this.versionOfPackage(alreadyResolved.packageRoot);\n\n    if (!satisfies(haveVersion, requestedRange, { includePrerelease: true })) {\n      throw new Error(\n        `${nextImport.package.name} needs ${\n          nextTarget.packageName\n        } satisfying ${requestedRange}, but we have version ${haveVersion} because of ${alreadyResolved.importedBy\n          .map((i) => i.package.name)\n          .join(', ')}`\n      );\n    }\n  }\n\n  private async computeDeps(\n    analyzers: SplitterOptions['analyzers']\n  ): Promise<Map<string, BundleDependencies>> {\n    let targets = await this.computeTargets(analyzers);\n    let deps: Map<string, BundleDependencies> = new Map();\n\n    this.options.bundles.names.forEach((bundleName) => {\n      deps.set(bundleName, {\n        staticImports: [],\n        staticTemplateImports: [],\n        dynamicImports: [],\n        dynamicTemplateImports: [],\n      });\n    });\n\n    for (let target of targets.targets.values()) {\n      let [dynamicUses, staticUses] = partition(\n        target.importedBy,\n        (imp) => imp.isDynamic\n      );\n      if (staticUses.length > 0) {\n        let bundleName = this.chooseBundle(staticUses);\n        deps.get(bundleName)!.staticImports.push(target);\n      }\n      if (dynamicUses.length > 0) {\n        let bundleName = this.chooseBundle(dynamicUses);\n        deps.get(bundleName)!.dynamicImports.push(target);\n      }\n    }\n\n    for (let target of targets.templateTargets.values()) {\n      let [dynamicUses, staticUses] = partition(\n        target.importedBy,\n        (imp) => imp.isDynamic\n      );\n      if (staticUses.length > 0) {\n        let bundleName = this.chooseBundle(staticUses);\n        deps.get(bundleName)!.staticTemplateImports.push(target);\n      }\n      if (dynamicUses.length > 0) {\n        let bundleName = this.chooseBundle(dynamicUses);\n        deps.get(bundleName)!.dynamicTemplateImports.push(target);\n      }\n    }\n\n    this.sortDependencies(deps);\n\n    return deps;\n  }\n\n  private sortDependencies(deps: Map<string, BundleDependencies>) {\n    for (const bundle of deps.values()) {\n      this.sortBundle(bundle);\n    }\n  }\n\n  private sortBundle(bundle: BundleDependencies) {\n    bundle.staticImports.sort((a, b) =>\n      a.requestedSpecifier.localeCompare(b.requestedSpecifier)\n    );\n    bundle.dynamicImports.sort((a, b) =>\n      a.requestedSpecifier.localeCompare(b.requestedSpecifier)\n    );\n    bundle.dynamicTemplateImports.sort((a, b) =>\n      a.cookedQuasis[0].localeCompare(b.cookedQuasis[0])\n    );\n  }\n\n  // given that a module is imported by the given list of paths, which\n  // bundle should it go in?\n  private chooseBundle(importedBy: Import[]) {\n    let usedInBundles = {} as { [bundleName: string]: boolean };\n    importedBy.forEach((usage) => {\n      usedInBundles[this.bundleFor(usage)] = true;\n    });\n    return this.options.bundles.names.find((bundle) => usedInBundles[bundle])!;\n  }\n\n  private bundleFor(usage: Import) {\n    let bundleName =\n      usage.treeType === undefined ||\n      typeof this.options.bundles.bundleForTreeType !== 'function'\n        ? this.options.bundles.bundleForPath(usage.path)\n        : this.options.bundles.bundleForTreeType(usage.treeType);\n\n    if (this.options.bundles.names.indexOf(bundleName) === -1) {\n      throw new Error(\n        `bundleForPath(\"${\n          usage.path\n        }\") returned ${bundleName}\" but the only configured bundle names are ${this.options.bundles.names.join(\n          ','\n        )}`\n      );\n    }\n    debug('bundleForPath(\"%s\")=%s', usage.path, bundleName);\n    return bundleName;\n  }\n}\n\nclass LazyPrintDeps {\n  constructor(private deps: Map<string, BundleDependencies>) {}\n\n  private describeResolvedImport(imp: ResolvedImport) {\n    return {\n      requestedSpecifier: imp.requestedSpecifier,\n      resolvedSpecifier: imp.resolvedSpecifier,\n      packageRoot: imp.packageRoot,\n      importedBy: imp.importedBy.map(this.describeImport.bind(this)),\n    };\n  }\n\n  private describeImport(imp: Import) {\n    return {\n      package: imp.package.name,\n      path: imp.path,\n    };\n  }\n\n  private describeTemplateImport(imp: ResolvedTemplateImport) {\n    return {\n      cookedQuasis: imp.cookedQuasis,\n      expressionNameHints: imp.expressionNameHints,\n      importedBy: imp.importedBy.map(this.describeImport.bind(this)),\n    };\n  }\n\n  toString() {\n    let output = {} as { [bundle: string]: any };\n    for (let [\n      bundle,\n      { staticImports, dynamicImports, dynamicTemplateImports },\n    ] of this.deps.entries()) {\n      output[bundle] = {\n        static: staticImports.map(this.describeResolvedImport.bind(this)),\n        dynamic: dynamicImports.map(this.describeResolvedImport.bind(this)),\n        dynamicTemplate: dynamicTemplateImports.map(\n          this.describeTemplateImport.bind(this)\n        ),\n      };\n    }\n    return JSON.stringify(output, null, 2);\n  }\n}\n"]}