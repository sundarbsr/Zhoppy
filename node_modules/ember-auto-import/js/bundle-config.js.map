{"version":3,"file":"bundle-config.js","sourceRoot":"","sources":["../ts/bundle-config.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n  This module is the only place where we make assumptions about Ember's default\n  \"app\" vs \"test\" bundles.\n*/\n\nimport { dirname } from 'path';\nconst testsPattern = new RegExp(`^(@[^/]+)?/?[^/]+/(tests|test-support)/`);\n\nimport type { TreeType } from './analyzer';\n\nfunction exhausted(label: string, value: never): never {\n  throw new Error(`Unknown ${label} specified: ${value}`);\n}\n\nexport type BundleName = 'app' | 'tests';\nexport type BundleType = 'js' | 'css';\n\ninterface OutputPaths {\n  vendor: {\n    js: string;\n    css: string;\n  };\n  app: {\n    html: string;\n  };\n}\n\nexport default class BundleConfig {\n  constructor(private outputPaths: OutputPaths) {}\n\n  // This list of valid bundles, in priority order. The first one in the list that\n  // needs a given import will end up with that import.\n  get names(): ReadonlyArray<BundleName> {\n    return Object.freeze(['app', 'tests']);\n  }\n\n  isBuiltInBundleName(name: string): name is BundleName {\n    return this.names.includes(name as BundleName);\n  }\n\n  get types(): ReadonlyArray<BundleType> {\n    return Object.freeze(['js', 'css']);\n  }\n\n  // Which final JS file the given bundle's dependencies should go into.\n  bundleEntrypoint(name: BundleName, type: BundleType): string {\n    switch (name) {\n      case 'tests':\n        switch (type) {\n          case 'js':\n            return 'assets/test-support.js';\n          case 'css':\n            return 'assets/test-support.css';\n          default:\n            exhausted('test bundle type', type);\n        }\n      case 'app':\n        switch (type) {\n          case 'js':\n            return this.outputPaths.vendor.js.replace(/^\\//, '');\n          case 'css':\n            return this.outputPaths.vendor.css.replace(/^\\//, '');\n          default:\n            exhausted('app bundle type', type);\n        }\n      default:\n        exhausted('bundle name', name);\n    }\n  }\n\n  maybeBundleEntrypoint(\n    bundleName: string,\n    type: BundleType\n  ): string | undefined {\n    if (this.isBuiltInBundleName(bundleName)) {\n      return this.bundleEntrypoint(bundleName, type);\n    }\n    return undefined;\n  }\n\n  bundleNameForEntrypoint(\n    entrypoint: string,\n    type: BundleType\n  ): BundleName | undefined {\n    for (let name of this.names) {\n      if (entrypoint.endsWith(this.bundleEntrypoint(name, type))) {\n        return name;\n      }\n    }\n    return undefined;\n  }\n\n  bundleForTreeType(treeType: TreeType): BundleName {\n    switch (treeType) {\n      case 'app':\n      case 'addon':\n      case 'addon-templates':\n      case 'styles':\n      case 'templates':\n        return 'app';\n\n      case 'addon-test-support':\n      case 'test':\n        return 'tests';\n\n      default:\n        exhausted('bundle name', treeType);\n    }\n  }\n\n  // For any relative path to a module in our application, return which bundle its\n  // imports go into.\n  bundleForPath(path: string): BundleName {\n    if (testsPattern.test(path)) {\n      return 'tests';\n    } else {\n      return 'app';\n    }\n  }\n\n  get lazyChunkPath() {\n    return dirname(this.bundleEntrypoint(this.names[0], 'js')!);\n  }\n\n  htmlEntrypoints() {\n    return [this.outputPaths.app.html, 'tests/index.html'];\n  }\n}\n"]}