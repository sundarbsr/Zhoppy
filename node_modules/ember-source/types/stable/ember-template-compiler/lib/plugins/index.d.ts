declare module 'ember-template-compiler/lib/plugins' {
    export const INTERNAL_PLUGINS: {
        readonly AssertAgainstAttrs: typeof import("@ember/template-compiler/lib/plugins/assert-against-attrs").default;
        readonly AssertAgainstNamedOutlets: typeof import("@ember/template-compiler/lib/plugins/assert-against-named-outlets").default;
        readonly AssertInputHelperWithoutBlock: typeof import("@ember/template-compiler/lib/plugins/assert-input-helper-without-block").default;
        readonly AssertReservedNamedArguments: typeof import("@ember/template-compiler/lib/plugins/assert-reserved-named-arguments").default;
        readonly TransformActionSyntax: typeof import("@ember/template-compiler/lib/plugins/transform-action-syntax").default;
        readonly TransformEachInIntoEach: typeof import("@ember/template-compiler/lib/plugins/transform-each-in-into-each").default;
        readonly TransformEachTrackArray: typeof import("@ember/template-compiler/lib/plugins/transform-each-track-array").default;
        readonly TransformInElement: typeof import("@ember/template-compiler/lib/plugins/transform-in-element").default;
        readonly TransformQuotedBindingsIntoJustBindings: typeof import("@ember/template-compiler/lib/plugins/transform-quoted-bindings-into-just-bindings").default;
        readonly TransformResolutions: typeof import("@ember/template-compiler/lib/plugins/transform-resolutions").default;
        readonly TransformWrapMountAndOutlet: typeof import("@ember/template-compiler/lib/plugins/transform-wrap-mount-and-outlet").default;
    };
    export const RESOLUTION_MODE_TRANSFORMS: readonly typeof import("@ember/template-compiler/lib/plugins/assert-against-attrs").default[];
    export const STRICT_MODE_TRANSFORMS: readonly typeof import("@ember/template-compiler/lib/plugins/assert-against-named-outlets").default[];
    export const STRICT_MODE_KEYWORDS: readonly string[];
}