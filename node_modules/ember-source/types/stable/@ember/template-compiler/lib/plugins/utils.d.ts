declare module '@ember/template-compiler/lib/plugins/utils' {
    import type { AST } from "@glimmer/syntax";
    import type { EmberASTPluginEnvironment } from "@ember/template-compiler/lib/types";
    export function isPath(node: AST.Node): node is AST.PathExpression;
    export function isStringLiteral(node: AST.Expression): node is AST.StringLiteral;
    export function inScope(env: EmberASTPluginEnvironment, name: string): boolean;
    export function trackLocals(env: EmberASTPluginEnvironment): {
        hasLocal: (key: string) => boolean;
        node: {
            enter(node: AST.Template | AST.Block | AST.ElementNode): void;
            exit(node: AST.Template | AST.Block | AST.ElementNode): void;
        };
        visitor: {
            Template: {
                enter(node: AST.Template | AST.Block | AST.ElementNode): void;
                exit(node: AST.Template | AST.Block | AST.ElementNode): void;
            };
            ElementNode: {
                enter(node: AST.Template | AST.Block | AST.ElementNode): void;
                exit(node: AST.Template | AST.Block | AST.ElementNode): void;
            };
            Block: {
                enter(node: AST.Template | AST.Block | AST.ElementNode): void;
                exit(node: AST.Template | AST.Block | AST.ElementNode): void;
            };
        };
    };
}