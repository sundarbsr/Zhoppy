"use strict";
/*
  This class exists because:
   - before template compilation starts, we need to pass a `locals` array to
     ember-template-compiler
   - the JSUtils API can mutate the scope during template compilation
   - those scope mutations need to update both the original `locals` array and
     our own name mapping, keeping them in sync.
*/
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ScopeLocals_instances, _ScopeLocals_mapping, _ScopeLocals_locals, _ScopeLocals_params, _ScopeLocals_isInJsScope;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScopeLocals = exports.ALLOWED_GLOBALS = void 0;
const hbs_utils_1 = require("./hbs-utils");
const read_only_array_1 = require("./read-only-array");
/**
 * RFC: https://github.com/emberjs/rfcs/pull/1070
 *
 * Criteria for inclusion in this list:
 *
 *   Any of:
 *     - begins with an uppercase letter
 *     - guaranteed to never be added to glimmer as a keyword (e.g.: globalThis)
 *
 *   And:
 *     - must not need new to invoke
 *     - must not require lifetime management (e.g.: setTimeout)
 *     - must not be a single-word lower-case API, because of potential collision with future new HTML elements
 *     - if the API is a function, the return value should not be a promise
 *     - must be one one of these lists:
 *        - https://tc39.es/ecma262/#sec-global-object
 *        - https://tc39.es/ecma262/#sec-function-properties-of-the-global-object
 *        - https://html.spec.whatwg.org/multipage/nav-history-apis.html#window
 *        - https://html.spec.whatwg.org/multipage/indices.html#all-interfaces
 *        - https://html.spec.whatwg.org/multipage/webappapis.html
 */
exports.ALLOWED_GLOBALS = new Set([
    // ////////////////
    // namespaces
    // ////////////////
    //   TC39
    'globalThis',
    'Atomics',
    'JSON',
    'Math',
    'Reflect',
    //   WHATWG
    'localStorage',
    'sessionStorage',
    // ////////////////
    // functions / utilities
    // ////////////////
    //   TC39
    'isNaN',
    'isFinite',
    'parseInt',
    'parseFloat',
    'decodeURI',
    'decodeURIComponent',
    'encodeURI',
    'encodeURIComponent',
    //   WHATWG
    'postMessage',
    'structuredClone',
    // ////////////////
    // new-less Constructors (still functions)
    // ////////////////
    //   TC39
    'Array', // different behavior from (array)
    'BigInt',
    'Boolean',
    'Date',
    'Number',
    'Object', // different behavior from (hash)
    'String',
    // ////////////////
    // Values
    // ////////////////
    //   TC39
    'Infinity',
    'NaN',
    //   WHATWG
    'isSecureContext',
]);
class ScopeLocals {
    constructor(params) {
        _ScopeLocals_instances.add(this);
        _ScopeLocals_mapping.set(this, {});
        _ScopeLocals_locals.set(this, []);
        _ScopeLocals_params.set(this, void 0);
        __classPrivateFieldSet(this, _ScopeLocals_params, params, "f");
    }
    get locals() {
        return (0, read_only_array_1.readOnlyArray)(__classPrivateFieldGet(this, _ScopeLocals_locals, "f"), 'The only supported way to manipulate locals is via the jsutils API\nhttps://github.com/emberjs/babel-plugin-ember-template-compilation#jsutils-manipulating-javascript-from-within-ast-transforms');
    }
    has(key) {
        return key in __classPrivateFieldGet(this, _ScopeLocals_mapping, "f");
    }
    get(key) {
        return __classPrivateFieldGet(this, _ScopeLocals_mapping, "f")[key];
    }
    isEmpty() {
        return __classPrivateFieldGet(this, _ScopeLocals_locals, "f").length === 0;
    }
    entries() {
        return Object.entries(__classPrivateFieldGet(this, _ScopeLocals_mapping, "f"));
    }
    add(hbsName, jsName) {
        __classPrivateFieldGet(this, _ScopeLocals_mapping, "f")[hbsName] = jsName !== null && jsName !== void 0 ? jsName : hbsName;
        if (!__classPrivateFieldGet(this, _ScopeLocals_locals, "f").includes(hbsName)) {
            __classPrivateFieldGet(this, _ScopeLocals_locals, "f").push(hbsName);
        }
    }
    // this AST transform discovers all possible upvars in HBS that refer to valid
    // bindings in JS, and then depending on the mode adjusts our actual scope bag
    // contents.
    crawl() {
        return (_env) => {
            let seen;
            return {
                name: 'scope-locals-crawl',
                visitor: {
                    Template: {
                        enter: () => {
                            seen = new Set();
                        },
                        exit: (_node, _path) => {
                            if (__classPrivateFieldGet(this, _ScopeLocals_params, "f").mode === 'implicit') {
                                // all hbs upvars that have matching JS bindings go into the
                                // scope
                                for (let name of seen) {
                                    if (name === 'this') {
                                        if (__classPrivateFieldGet(this, _ScopeLocals_params, "f").mayUseLexicalThis) {
                                            this.add(name);
                                        }
                                    }
                                    else if (__classPrivateFieldGet(this, _ScopeLocals_instances, "m", _ScopeLocals_isInJsScope).call(this, name, __classPrivateFieldGet(this, _ScopeLocals_params, "f").jsPath)) {
                                        this.add(name);
                                    }
                                }
                            }
                            else {
                                // in explicit form, we might prune back the preexising scope in
                                // the case where another AST transform has eliminated the use
                                // of the original binding. But we don't add anything new. The
                                // only way for new bindings to be introduced into scope is for
                                // another AST transform to explicitly call the jsutils, which
                                // calls our `add`.
                                for (let name of Object.keys(__classPrivateFieldGet(this, _ScopeLocals_mapping, "f"))) {
                                    if (!seen.has(name)) {
                                        __classPrivateFieldGet(this, _ScopeLocals_locals, "f").splice(__classPrivateFieldGet(this, _ScopeLocals_locals, "f").indexOf(name), 1);
                                        delete __classPrivateFieldGet(this, _ScopeLocals_mapping, "f")[name];
                                    }
                                }
                            }
                        },
                    },
                    PathExpression: (node, path) => {
                        switch (node.head.type) {
                            case 'ThisHead':
                                if (!(0, hbs_utils_1.astNodeHasBinding)(path, 'this')) {
                                    seen.add('this');
                                }
                                break;
                            case 'VarHead': {
                                const name = node.head.name;
                                if (!(0, hbs_utils_1.astNodeHasBinding)(path, name)) {
                                    seen.add(name);
                                }
                            }
                        }
                    },
                    ElementNode: (node, path) => {
                        const name = node.tag.split('.')[0];
                        if (!(0, hbs_utils_1.astNodeHasBinding)(path, name)) {
                            seen.add(name);
                        }
                    },
                },
            };
        };
    }
}
exports.ScopeLocals = ScopeLocals;
_ScopeLocals_mapping = new WeakMap(), _ScopeLocals_locals = new WeakMap(), _ScopeLocals_params = new WeakMap(), _ScopeLocals_instances = new WeakSet(), _ScopeLocals_isInJsScope = function _ScopeLocals_isInJsScope(hbsName, jsPath) {
    var _a;
    let jsName = (_a = __classPrivateFieldGet(this, _ScopeLocals_mapping, "f")[hbsName]) !== null && _a !== void 0 ? _a : hbsName;
    return exports.ALLOWED_GLOBALS.has(jsName) || jsPath.scope.getBinding(jsName);
};
//# sourceMappingURL=data:application/json;base64,