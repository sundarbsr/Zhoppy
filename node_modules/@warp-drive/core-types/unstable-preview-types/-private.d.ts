declare module '@warp-drive/core-types/-private' {
  type UniversalTransientKey = 'REQ_ID';
  type UniversalKey = `(transient) ${UniversalTransientKey}` | 'RequestMap' | 'PromiseCache' | 'RequestCache' | 'SkipCache' | 'EnableHydration' | 'WarpDriveRuntimeConfig';
  type TransientKey = 'TRANSACTION' | 'transactionRef' | 'configuredGenerationMethod' | 'configuredUpdateMethod' | 'configuredForgetMethod' | 'configuredResetMethod' | 'configuredKeyInfoMethod';
  type GlobalKey = `(transient) ${TransientKey}` | 'AdapterError' | 'InvalidError' | 'TimeoutError' | 'AbortError' | 'UnauthorizedError' | 'ForbiddenError' | 'NotFoundError' | 'ConflictError' | 'ServerError' | 'Signals' | 'AvailableShims' | 'FAKE_ARR' | '#signal' | '#source' | '#update' | '#notify' | 'IS_COLLECTION' | 'Touching' | 'RequestPromise' | 'SaveOp' | 'LEGACY_SUPPORT' | 'LegacySupport' | 'Graphs' | 'IS_FROZEN' | 'IS_CACHE_HANDLER' | 'CONFIG' | 'DEBUG_MAP' | 'IDENTIFIERS' | 'DOCUMENTS' | 'CacheForIdentifierCache' | 'RecordCache' | 'StoreMap' | 'Store' | '$type' | 'TransformName' | 'RequestSignature' | 'IS_FUTURE' | 'DOC' | 'ManagedArrayMap' | 'ManagedObjectMap' | 'Support' | 'SOURCE' | 'MUTATE' | 'ARRAY_SIGNAL' | 'OBJECT_SIGNAL' | 'NOTIFY' | 'Destroy' | 'Identifier' | 'Editable' | 'EmbeddedPath' | 'EmbeddedType' | 'Parent' | 'Checkout' | 'Legacy';
  type UniqueSymbol<T extends string> = `___(unique) Symbol(${T})`;
  type UniqueSymbolOr<T, K extends string> = T extends symbol ? UniqueSymbol<K> : T;
  export function getOrSetGlobal<T, K extends GlobalKey>(key: K, value: T): UniqueSymbolOr<T, K>;
  export function peekTransient<T>(key: TransientKey): T | null;
  export function setTransient<T>(key: TransientKey, value: T): T;
  export function getOrSetUniversal<T, K extends UniversalKey>(key: K, value: T): UniqueSymbolOr<T, K>;
  export function peekUniversalTransient<T>(key: UniversalTransientKey): T | null;
  export function setUniversalTransient<T>(key: UniversalTransientKey, value: T): T;
  export {};
}
//# sourceMappingURL=-private.d.ts.map