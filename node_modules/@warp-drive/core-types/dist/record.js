/*
 * @module @warp-drive/core-types
 */

/**
 * Records may be anything, They don't even
 * have to be objects.
 *
 * Whatever they are, if they have a Type
 * property, that property will be used by EmberData
 * and WarpDrive to provide better type safety and
 * intellisense.
 *
 * @class TypedRecordInstance
 * @typedoc
 */

/**
 * A type utility that extracts the Type if available,
 * otherwise it returns never.
 *
 * @typedoc
 */

/**
 * A type utility that extracts the Type if available,
 * otherwise it returns string
 *
 * @typedoc
 */

/**
 * A Utility that extracts either resource types or resource paths from a TypedRecordInstance.
 *
 * Its limitations are mostly around its intentional non-recursiveness. It presumes that APIs which
 * implement includes will not allow cyclical include paths, and will collapse includes by type.
 *
 * This follows closer to the JSON:API fields spec than to the includes spec in nature, but in
 * practice it is so impracticle for an API to allow z-algo include paths that this is probably
 * reasonable.
 *
 * We may need to revisit this in the future, opting to either make this restriction optional or
 * to allow for other strategies.
 *
 * There's a 90% chance this particular implementation belongs being in the JSON:API package instead
 * of core-types, but it's here for now.
 *
 * @typedoc
 */

/**
 * A utility that provides the union of all ResourceName for all potential
 * includes for the given TypedRecordInstance.
 *
 * @typedoc
 */

// ToPaths<ExpandIgnore<T, true>, false>;

/**
 * A utility that provides the union type of all valid include paths for the given
 * TypedRecordInstance.
 *
 * Cyclical paths are filtered out.
 *
 * @typedoc
 */

function createIncludeValidator() {
  return function validateIncludes(includes) {
    return includes;
  };
}
export { createIncludeValidator };