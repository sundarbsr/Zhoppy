{"version":3,"file":"babel-plugin-transform-asserts.cjs","sources":["../cjs-src/transforms/babel-plugin-transform-asserts.js"],"sourcesContent":["const { ImportUtil } = require('babel-import-util');\n\nconst Utils = new Set(['assert']);\n\n/*\n// Before\nimport { assert } from '@warp-drive/build-config/macros';\n\nassert('foo', true);\n\n// After\n(macroCondition(isDevelopingApp()) ? function assert(test) { if (!test) { throw new Error('foo'); } }(true) : {});\n*/\n\n// => _macros.getGlobalConfig().WarpDrive.env.DEBUG\nfunction buildMacroConstDEBUG(types, binding, state) {\n  return types.memberExpression(\n    types.memberExpression(\n      types.memberExpression(\n        types.callExpression(state.importer.import(binding, '@embroider/macros', 'getGlobalConfig'), []),\n        types.identifier('WarpDrive')\n      ),\n      types.identifier('env')\n    ),\n    types.identifier('DEBUG')\n  );\n}\n\n// => _macros.macroCondition(_macros.getGlobalConfig().WarpDrive.env.DEBUG)\nfunction buildMacroConditionDEBUG(types, binding, state) {\n  return types.callExpression(state.importer.import(binding, '@embroider/macros', 'macroCondition'), [\n    buildMacroConstDEBUG(types, binding, state),\n  ]);\n}\n\n// (test) => { if (!test) { throw new Error(someMessage); } }(someCond)\nfunction buildAssert(types, originalCallExpression) {\n  const desc = originalCallExpression.arguments[0];\n  const test = originalCallExpression.arguments[1] ?? types.booleanLiteral(false);\n  // prettier-ignore\n  return types.callExpression(\n    types.arrowFunctionExpression([types.identifier('test')],         // (test) =>\n      types.blockStatement([                                          // {\n        types.ifStatement(                                            // if\n          types.unaryExpression('!', types.identifier('test')),       // (!test)\n          types.blockStatement([                                      // {\n            types.throwStatement(                                     // throw\n              types.newExpression(types.identifier('Error'), [desc])  // new Error(desc)\n            )])                                                       // }\n          )])                                                         // }\n        ),\n    [test]                                                            // (someCond)\n  );\n}\n\n// => ( <debug-macro> ? <assert-exp> : {});\nfunction buildAssertTernary(types, binding, state, originalCallExpression) {\n  return types.expressionStatement(\n    types.conditionalExpression(\n      buildMacroConditionDEBUG(types, binding, state),\n      buildAssert(types, originalCallExpression),\n      types.objectExpression([])\n    )\n  );\n}\n\nexport default function (babel) {\n  const { types: t } = babel;\n\n  return {\n    name: 'ast-transform', // not required\n    visitor: {\n      ImportDeclaration(path, state) {\n        const importPath = path.node.source.value;\n\n        if (importPath === '@warp-drive/build-config/macros') {\n          const specifiers = path.get('specifiers');\n\n          specifiers.forEach((specifier) => {\n            const name = specifier.node.imported.name;\n            if (!Utils.has(name)) {\n              throw new Error(`Unexpected import '${name}' imported from '@warp-drive/build-config/macros'`);\n            }\n\n            const localBindingName = specifier.node.local.name;\n            const binding = specifier.scope.getBinding(localBindingName);\n\n            binding.referencePaths.forEach((p) => {\n              const originalCallExpression = p.parentPath.node;\n\n              if (!t.isCallExpression(originalCallExpression)) {\n                throw new Error('Expected a call expression');\n              }\n\n              const assertTernary = buildAssertTernary(t, binding, state, originalCallExpression);\n              p.parentPath.replaceWith(assertTernary);\n            });\n            specifier.scope.removeOwnBinding(localBindingName);\n            specifier.remove();\n          });\n\n          if (path.get('specifiers').length === 0) {\n            path.remove();\n          }\n        }\n      },\n\n      Program(path, state) {\n        state.importer = new ImportUtil(t, path);\n      },\n    },\n  };\n}\n"],"names":["ImportUtil","require","Utils","Set","buildMacroConstDEBUG","types","binding","state","memberExpression","callExpression","importer","import","identifier","buildMacroConditionDEBUG","buildAssert","originalCallExpression","desc","arguments","test","booleanLiteral","arrowFunctionExpression","blockStatement","ifStatement","unaryExpression","throwStatement","newExpression","buildAssertTernary","expressionStatement","conditionalExpression","objectExpression","babel","t","name","visitor","ImportDeclaration","path","importPath","node","source","value","specifiers","get","forEach","specifier","imported","has","Error","localBindingName","local","scope","getBinding","referencePaths","p","parentPath","isCallExpression","assertTernary","replaceWith","removeOwnBinding","remove","length","Program"],"mappings":"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"}