{"version":3,"file":"index.js","sources":["../../lib/node-dom-helper.ts","../../lib/serialize-builder.ts"],"sourcesContent":["import type {\n  Bounds,\n  Nullable,\n  SimpleDocument,\n  SimpleElement,\n  SimpleNode,\n} from '@glimmer/interfaces';\nimport { ConcreteBounds, DOMTreeConstruction } from '@glimmer/runtime';\nimport createHTMLDocument from '@simple-dom/document';\n\nexport default class NodeDOMTreeConstruction extends DOMTreeConstruction {\n  declare protected document: SimpleDocument; // Hides property on base class\n  constructor(doc: Nullable<SimpleDocument>) {\n    super(doc || createHTMLDocument());\n  }\n\n  // override to prevent usage of `this.document` until after the constructor\n  protected override setupUselessElement() {}\n\n  override insertHTMLBefore(\n    parent: SimpleElement,\n    reference: Nullable<SimpleNode>,\n    html: string\n  ): Bounds {\n    // eslint-disable-next-line @typescript-eslint/no-deprecated, @typescript-eslint/no-non-null-assertion\n    let raw = this.document.createRawHTMLSection!(html);\n    parent.insertBefore(raw, reference);\n    return new ConcreteBounds(parent, raw, raw);\n  }\n\n  // override to avoid SVG detection/work when in node (this is not needed in SSR)\n  override createElement(tag: string) {\n    return this.document.createElement(tag);\n  }\n\n  // override to avoid namespace shenanigans when in node (this is not needed in SSR)\n  override setAttribute(element: SimpleElement, name: string, value: string) {\n    element.setAttribute(name, value);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-enum-comparison */\nimport type {\n  Bounds,\n  Environment,\n  Maybe,\n  ModifierInstance,\n  Nullable,\n  SimpleElement,\n  SimpleNode,\n  SimpleText,\n  TreeBuilder,\n} from '@glimmer/interfaces';\nimport type { RemoteBlock } from '@glimmer/runtime';\nimport { ConcreteBounds, NewTreeBuilder } from '@glimmer/runtime';\n\nconst TEXT_NODE = 3;\n\nconst NEEDS_EXTRA_CLOSE = new WeakMap<SimpleNode>();\n\nfunction currentNode(\n  cursor: TreeBuilder | { element: SimpleElement; nextSibling: SimpleNode }\n): Nullable<SimpleNode> {\n  let { element, nextSibling } = cursor;\n\n  if (nextSibling === null) {\n    return element.lastChild;\n  } else {\n    return nextSibling.previousSibling;\n  }\n}\n\nclass SerializeBuilder extends NewTreeBuilder implements TreeBuilder {\n  private serializeBlockDepth = 0;\n\n  override __openBlock(): void {\n    let { tagName } = this.element;\n\n    if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {\n      let depth = this.serializeBlockDepth++;\n      this.__appendComment(`%+b:${depth}%`);\n    }\n\n    super.__openBlock();\n  }\n\n  override __closeBlock(): void {\n    let { tagName } = this.element;\n\n    super.__closeBlock();\n\n    if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {\n      let depth = --this.serializeBlockDepth;\n      this.__appendComment(`%-b:${depth}%`);\n    }\n  }\n\n  override __appendHTML(html: string): Bounds {\n    let { tagName } = this.element;\n\n    if (tagName === 'TITLE' || tagName === 'SCRIPT' || tagName === 'STYLE') {\n      return super.__appendHTML(html);\n    }\n\n    // Do we need to run the html tokenizer here?\n    let first = this.__appendComment('%glmr%');\n    if (tagName === 'TABLE') {\n      let openIndex = html.indexOf('<');\n      if (openIndex > -1) {\n        let tr = html.slice(openIndex + 1, openIndex + 3);\n        if (tr === 'tr') {\n          html = `<tbody>${html}</tbody>`;\n        }\n      }\n    }\n    if (html === '') {\n      this.__appendComment('% %');\n    } else {\n      super.__appendHTML(html);\n    }\n\n    let last = this.__appendComment('%glmr%');\n    return new ConcreteBounds(this.element, first, last);\n  }\n\n  override __appendText(string: string): SimpleText {\n    let { tagName } = this.element;\n    let current = currentNode(this);\n\n    if (tagName === 'TITLE' || tagName === 'SCRIPT' || tagName === 'STYLE') {\n      return super.__appendText(string);\n    } else if (string === '') {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return this.__appendComment('% %') as any as SimpleText;\n    } else if (current && current.nodeType === TEXT_NODE) {\n      this.__appendComment('%|%');\n    }\n\n    return super.__appendText(string);\n  }\n\n  override closeElement(): Nullable<ModifierInstance[]> {\n    if (NEEDS_EXTRA_CLOSE.has(this.element)) {\n      NEEDS_EXTRA_CLOSE.delete(this.element);\n      super.closeElement();\n    }\n\n    return super.closeElement();\n  }\n\n  override openElement(tag: string) {\n    if (tag === 'tr') {\n      if (\n        this.element.tagName !== 'TBODY' &&\n        this.element.tagName !== 'THEAD' &&\n        this.element.tagName !== 'TFOOT'\n      ) {\n        this.openElement('tbody');\n        // This prevents the closeBlock comment from being re-parented\n        // under the auto inserted tbody. Rehydration builder needs to\n        // account for the insertion since it is injected here and not\n        // really in the template.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme\n        NEEDS_EXTRA_CLOSE.set(this.constructing!, true);\n        this.flushElement(null);\n      }\n    }\n\n    return super.openElement(tag);\n  }\n\n  override pushRemoteElement(\n    element: SimpleElement,\n    cursorId: string,\n    insertBefore: Maybe<SimpleNode> = null\n  ): RemoteBlock {\n    let { dom } = this;\n    let script = dom.createElement('script');\n    script.setAttribute('glmr', cursorId);\n    dom.insertBefore(element, script, insertBefore);\n    return super.pushRemoteElement(element, cursorId, insertBefore);\n  }\n}\n\nexport function serializeBuilder(\n  env: Environment,\n  cursor: { element: SimpleElement; nextSibling: Nullable<SimpleNode> }\n): TreeBuilder {\n  return SerializeBuilder.forInitialRender(env, cursor);\n}\n"],"names":["NodeDOMTreeConstruction","DOMTreeConstruction","constructor","doc","super","createHTMLDocument","setupUselessElement","insertHTMLBefore","parent","reference","html","raw","this","document","createRawHTMLSection","insertBefore","ConcreteBounds","createElement","tag","setAttribute","element","name","value","NEEDS_EXTRA_CLOSE","WeakMap","SerializeBuilder","NewTreeBuilder","__openBlock","tagName","depth","serializeBlockDepth","__appendComment","__closeBlock","__appendHTML","first","openIndex","indexOf","slice","last","__appendText","string","current","cursor","nextSibling","lastChild","previousSibling","currentNode","nodeType","closeElement","has","delete","openElement","set","constructing","flushElement","pushRemoteElement","cursorId","dom","script","args","serializeBuilder","env","forInitialRender"],"mappings":"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"}