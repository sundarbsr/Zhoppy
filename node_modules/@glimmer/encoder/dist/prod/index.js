import{TYPE_SIZE as t,ARG_SHIFT as e}from"@glimmer/vm";class r{constructor(t){this.buffer=t,this.size=0}encode(r,o,...s){if(r>t)throw new Error(`Opcode type over 8-bits. Got ${r}.`);let f=r|o|arguments.length-2<<e;this.buffer.push(f);for(const t of s)this.buffer.push(t);this.size=this.buffer.length}patch(t,e){if(-1!==this.buffer[t+1])throw new Error("Trying to patch operand in populated slot instead of a reserved slot.");this.buffer[t+1]=e}}export{r as InstructionEncoderImpl};
//# sourceMappingURL=index.js.map
