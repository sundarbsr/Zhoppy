{"version":3,"file":"index.js","sources":["../../lib/encoder.ts"],"sourcesContent":["import type {\n  CompilerBuffer,\n  InstructionEncoder,\n  MACHINE_MASK,\n  Operand,\n  SomeVmOp,\n  VmMachineOp,\n  VmOp,\n} from '@glimmer/interfaces';\nimport { ARG_SHIFT, MAX_SIZE, TYPE_SIZE } from '@glimmer/vm';\n\nexport class InstructionEncoderImpl implements InstructionEncoder {\n  constructor(readonly buffer: CompilerBuffer) {}\n\n  size = 0;\n\n  encode(type: VmMachineOp, machine: MACHINE_MASK, ...operands: Operand[]): void;\n  encode(type: VmOp, machine: 0, ...operands: Operand[]): void;\n  encode(type: SomeVmOp, machine: 0 | MACHINE_MASK, ...args: Operand[]) {\n    if ((type as number) > TYPE_SIZE) {\n      throw new Error(`Opcode type over 8-bits. Got ${type}.`);\n    }\n\n    let first = type | machine | ((arguments.length - 2) << ARG_SHIFT);\n\n    this.buffer.push(first);\n\n    for (const op of args) {\n      if (import.meta.env.DEV && typeof op === 'number' && op > MAX_SIZE) {\n        throw new Error(`Operand over 32-bits. Got ${op}.`);\n      }\n      this.buffer.push(op);\n    }\n\n    this.size = this.buffer.length;\n  }\n\n  patch(position: number, target: number) {\n    if (this.buffer[position + 1] === -1) {\n      this.buffer[position + 1] = target;\n    } else {\n      throw new Error('Trying to patch operand in populated slot instead of a reserved slot.');\n    }\n  }\n}\n"],"names":["InstructionEncoderImpl","constructor","buffer","size","encode","type","machine","args","TYPE_SIZE","Error","first","arguments","length","ARG_SHIFT","this","push","op","patch","position","target"],"mappings":"uDAWO,MAAMA,EACXC,WAAAA,CAAqBC,QAAAA,OAAAA,OAErBC,KAAO,CAFuC,CAM9CC,MAAAA,CAAOC,EAAgBC,KAA8BC,GACnD,GAAKF,EAAkBG,EACrB,MAAM,IAAIC,MAAM,gCAAgCJ,MAGlD,IAAIK,EAAQL,EAAOC,EAAWK,UAAWC,OAAS,GAAMC,EAExDC,KAAKZ,OAAOa,KAAKL,GAEjB,IAAK,MAAMM,KAAMT,EAIfO,KAAKZ,OAAOa,KAAKC,GAGnBF,KAAKX,KAAOW,KAAKZ,OAAOU,MAC1B,CAEAK,KAAAA,CAAMC,EAAkBC,GACtB,IAAkC,IAA9BL,KAAKZ,OAAOgB,EAAW,GAGzB,MAAM,IAAIT,MAAM,yEAFhBK,KAAKZ,OAAOgB,EAAW,GAAKC,CAIhC"}