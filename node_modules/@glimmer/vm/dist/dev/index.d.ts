declare const ContentType: {
    readonly Component: 0;
    readonly Helper: 1;
    readonly String: 2;
    readonly Empty: 3;
    readonly SafeString: 4;
    readonly Fragment: 5;
    readonly Node: 6;
    readonly Other: 8;
};

declare const InternalComponentCapabilities: {
    readonly Empty: 0;
    readonly dynamicLayout: 1;
    readonly dynamicTag: 2;
    readonly prepareArgs: 4;
    readonly createArgs: 8;
    readonly attributeHook: 16;
    readonly elementHook: 32;
    readonly dynamicScope: 64;
    readonly createCaller: 128;
    readonly updateHook: 256;
    readonly createInstance: 512;
    readonly wrapped: 1024;
    readonly willDestroy: 2048;
    readonly hasSubOwner: 4096;
};
declare const ARG_SHIFT: 8;
declare const MAX_SIZE: 2147483647;
declare const TYPE_SIZE: 255;
declare const TYPE_MASK: 255;
declare const OPERAND_LEN_MASK: 768;
declare const MACHINE_MASK: 1024;

/**
 * Registers
 *
 * For the most part, these follows MIPS naming conventions, however the
 * register numbers are different.
 */
type $pc = 0;
declare const $pc: $pc;
type $ra = 1;
declare const $ra: $ra;
type $fp = 2;
declare const $fp: $fp;
type $sp = 3;
declare const $sp: $sp;
type $s0 = 4;
declare const $s0: $s0;
type $s1 = 5;
declare const $s1: $s1;
type $t0 = 6;
declare const $t0: $t0;
type $t1 = 7;
declare const $t1: $t1;
type $v0 = 8;
declare const $v0 = 8;
type MachineRegister = $pc | $ra | $fp | $sp;
declare function isLowLevelRegister(register: Register | MachineRegister): register is Register & MachineRegister;
type SavedRegister = $s0 | $s1;
type TemporaryRegister = $t0 | $t1;
type Register = MachineRegister | SavedRegister | TemporaryRegister | $v0;
type SyscallRegister = SavedRegister | TemporaryRegister | $v0;

export { $fp, $pc, $ra, $s0, $s1, $sp, $t0, $t1, $v0, ARG_SHIFT, ContentType, InternalComponentCapabilities, InternalComponentCapabilities as InternalComponentCapability, MACHINE_MASK, MAX_SIZE, type MachineRegister, OPERAND_LEN_MASK, type Register, type SavedRegister, type SyscallRegister, TYPE_MASK, TYPE_SIZE, type TemporaryRegister, isLowLevelRegister };
