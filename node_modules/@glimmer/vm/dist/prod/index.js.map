{"version":3,"file":"index.js","sources":["../../lib/content.ts","../../lib/flags.ts","../../lib/registers.ts"],"sourcesContent":["export const ContentType = {\n  Component: 0,\n  Helper: 1,\n  String: 2,\n  Empty: 3,\n  SafeString: 4,\n  Fragment: 5,\n  Node: 6,\n  Other: 8,\n} as const;\n","import type {\n  ARG_SHIFT as IARG_SHIFT,\n  AttributeHookCapability,\n  CreateArgsCapability,\n  CreateCallerCapability,\n  CreateInstanceCapability,\n  DynamicLayoutCapability,\n  DynamicScopeCapability,\n  DynamicTagCapability,\n  ElementHookCapability,\n  EmptyCapability,\n  HasSubOwnerCapability,\n  MACHINE_MASK as IMACHINE_MASK,\n  MAX_SIZE as IMAX_SIZE,\n  OPERAND_LEN_MASK as IOPERAND_LEN_MASK,\n  PrepareArgsCapability,\n  TYPE_MASK as ITYPE_MASK,\n  TYPE_SIZE as ITYPE_SIZE,\n  UpdateHookCapability,\n  WillDestroyCapability,\n  WrappedCapability,\n} from '@glimmer/interfaces';\n\nexport const InternalComponentCapabilities = {\n  Empty: 0 satisfies EmptyCapability,\n  dynamicLayout: 0b0000000000001 satisfies DynamicLayoutCapability,\n  dynamicTag: 0b0000000000010 satisfies DynamicTagCapability,\n  prepareArgs: 0b0000000000100 satisfies PrepareArgsCapability,\n  createArgs: 0b0000000001000 satisfies CreateArgsCapability,\n  attributeHook: 0b0000000010000 satisfies AttributeHookCapability,\n  elementHook: 0b0000000100000 satisfies ElementHookCapability,\n  dynamicScope: 0b0000001000000 satisfies DynamicScopeCapability,\n  createCaller: 0b0000010000000 satisfies CreateCallerCapability,\n  updateHook: 0b0000100000000 satisfies UpdateHookCapability,\n  createInstance: 0b0001000000000 satisfies CreateInstanceCapability,\n  wrapped: 0b0010000000000 satisfies WrappedCapability,\n  willDestroy: 0b0100000000000 satisfies WillDestroyCapability,\n  hasSubOwner: 0b1000000000000 satisfies HasSubOwnerCapability,\n} as const;\n\nexport const ARG_SHIFT = 8 as const satisfies IARG_SHIFT;\nexport const MAX_SIZE = 0x7fffffff as const satisfies IMAX_SIZE;\nexport const TYPE_SIZE = 0b11111111 as const satisfies ITYPE_SIZE;\nexport const TYPE_MASK = 0b00000000000000000000000011111111 as const satisfies ITYPE_MASK;\nexport const OPERAND_LEN_MASK =\n  0b00000000000000000000001100000000 as const satisfies IOPERAND_LEN_MASK;\nexport const MACHINE_MASK = 0b00000000000000000000010000000000 as const satisfies IMACHINE_MASK;\n","/**\n * Registers\n *\n * For the most part, these follows MIPS naming conventions, however the\n * register numbers are different.\n */\n\n// $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit\nexport type $pc = 0;\nexport const $pc: $pc = 0;\n// $1 or $ra (return address): pointer into `program` for the return\nexport type $ra = 1;\nexport const $ra: $ra = 1;\n// $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack\nexport type $fp = 2;\nexport const $fp: $fp = 2;\n// $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack\nexport type $sp = 3;\nexport const $sp: $sp = 3;\n// $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers\nexport type $s0 = 4;\nexport const $s0: $s0 = 4;\nexport type $s1 = 5;\nexport const $s1: $s1 = 5;\n// $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers\nexport type $t0 = 6;\nexport const $t0: $t0 = 6;\nexport type $t1 = 7;\nexport const $t1: $t1 = 7;\n// $8 or $v0 (return value)\nexport type $v0 = 8;\nexport const $v0 = 8;\n\nexport type MachineRegister = $pc | $ra | $fp | $sp;\n\nexport function isLowLevelRegister(\n  register: Register | MachineRegister\n): register is Register & MachineRegister {\n  return (register as number) <= $sp;\n}\n\nexport type SavedRegister = $s0 | $s1;\nexport type TemporaryRegister = $t0 | $t1;\n\nexport type Register = MachineRegister | SavedRegister | TemporaryRegister | $v0;\nexport type SyscallRegister = SavedRegister | TemporaryRegister | $v0;\n"],"names":["ContentType","Component","Helper","String","Empty","SafeString","Fragment","Node","Other","InternalComponentCapabilities","dynamicLayout","dynamicTag","prepareArgs","createArgs","attributeHook","elementHook","dynamicScope","createCaller","updateHook","createInstance","wrapped","willDestroy","hasSubOwner","ARG_SHIFT","MAX_SIZE","TYPE_SIZE","TYPE_MASK","OPERAND_LEN_MASK","MACHINE_MASK","$pc","$ra","$fp","$sp","$s0","$s1","$t0","$t1","$v0","isLowLevelRegister","register"],"mappings":"MAAaA,EAAc,CACzBC,UAAW,EACXC,OAAQ,EACRC,OAAQ,EACRC,MAAO,EACPC,WAAY,EACZC,SAAU,EACVC,KAAM,EACNC,MAAO,GCeIC,EAAgC,CAC3CL,MAAO,EACPM,cAAe,EACfC,WAAY,EACZC,YAAa,EACbC,WAAY,EACZC,cAAe,GACfC,YAAa,GACbC,aAAc,GACdC,aAAc,IACdC,WAAY,IACZC,eAAgB,IAChBC,QAAS,KACTC,YAAa,KACbC,YAAa,MAGFC,EAAY,EACZC,EAAW,WACXC,EAAY,IACZC,EAAY,IACZC,EACX,IACWC,EAAe,KCrCfC,EAAW,EAGXC,EAAW,EAGXC,EAAW,EAGXC,EAAW,EAGXC,EAAW,EAEXC,EAAW,EAGXC,EAAW,EAEXC,EAAW,EAGXC,EAAM,EAIZ,SAASC,EACdC,GAEA,OAAOA,GApBe,CAqBxB"}