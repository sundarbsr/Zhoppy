declare module '@ember-data/legacy-compat/builders/save-record' {
  /**
   * @module @ember-data/legacy-compat/builders
   */
  import { type StoreRequestInput } from '@ember-data/store';
  import type { StableRecordIdentifier } from '@warp-drive/core-types';
  import type { TypedRecordInstance, TypeFromInstance } from '@warp-drive/core-types/record';
  import type { RequestSignature } from '@warp-drive/core-types/symbols';
  type SaveRecordRequestInput<T extends string = string, RT = unknown> = StoreRequestInput & {
      op: 'createRecord' | 'deleteRecord' | 'updateRecord';
      data: {
          record: StableRecordIdentifier<T>;
          options: SaveRecordBuilderOptions;
      };
      records: [StableRecordIdentifier<T>];
      [RequestSignature]?: RT;
  };
  type SaveRecordBuilderOptions = Record<string, unknown>;
  /**
    This function builds a request config for saving the given record (e.g. creating, updating, or deleting the record).
    When passed to `store.request`, this config will result in the same behavior as a legacy `store.saveRecord` request.
    Additionally, it takes the same options as `store.saveRecord`.
  
    All `@ember-data/legacy-compat` builders exist to enable you to migrate your codebase to using the correct syntax for `store.request` while temporarily preserving legacy behaviors.
    This is useful for quickly upgrading an entire app to a unified syntax while a longer incremental migration is made to shift off of adapters and serializers.
    To that end, these builders are deprecated and will be removed in a future version of Ember Data.
  
    @method saveRecord
    @deprecated
    @public
    @static
    @for @ember-data/legacy-compat/builders
    @param {object} record a record to save
    @param {SaveRecordBuilderOptions} options optional, may include `adapterOptions` hash which will be passed to adapter.saveRecord
    @return {SaveRecordRequestInput} request config
  */
  export function saveRecordBuilder<T extends TypedRecordInstance>(record: T, options?: Record<string, unknown>): SaveRecordRequestInput<TypeFromInstance<T>, T>;
  export {};
}
//# sourceMappingURL=save-record.d.ts.map