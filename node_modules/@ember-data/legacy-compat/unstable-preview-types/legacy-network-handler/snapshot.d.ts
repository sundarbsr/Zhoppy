declare module '@ember-data/legacy-compat/legacy-network-handler/snapshot' {
  import type Store from '@ember-data/store';
  import type { FindRecordOptions } from '@ember-data/store/types';
  import type { StableRecordIdentifier } from '@warp-drive/core-types';
  import type { ChangedAttributesHash } from '@warp-drive/core-types/cache';
  import type { TypedRecordInstance, TypeFromInstance } from '@warp-drive/core-types/record';
  import type { LegacyAttributeField, LegacyRelationshipField } from '@warp-drive/core-types/schema/fields';
  import type { SerializerOptions } from '@ember-data/legacy-compat/legacy-network-handler/minimum-serializer-interface';
  type RecordId = string | null;
  /**
    Snapshot is not directly instantiable.
    Instances are provided to a consuming application's
    adapters and serializers for certain requests.
  
    Snapshots are only available when using `@ember-data/legacy-compat`
    for legacy compatibility with adapters and serializers.
  
    @class Snapshot
    @public
  */
  export class Snapshot<R = unknown> {
      __attributes: Record<keyof R & string, unknown> | null;
      _belongsToRelationships: Record<string, Snapshot>;
      _belongsToIds: Record<string, RecordId>;
      _hasManyRelationships: Record<string, Snapshot[]>;
      _hasManyIds: Record<string, RecordId[]>;
      _changedAttributes: ChangedAttributesHash;
      identifier: StableRecordIdentifier<R extends TypedRecordInstance ? TypeFromInstance<R> : string>;
      modelName: R extends TypedRecordInstance ? TypeFromInstance<R> : string;
      id: string | null;
      include?: string | string[];
      adapterOptions?: Record<string, unknown>;
      _store: Store;
      /**
       * @method constructor
       * @constructor
       * @private
       * @param options
       * @param identifier
       * @param _store
       */
      constructor(options: FindRecordOptions, identifier: StableRecordIdentifier<R extends TypedRecordInstance ? TypeFromInstance<R> : string>, store: Store);
      /**
       The underlying record for this snapshot. Can be used to access methods and
       properties defined on the record.
    
       Example
    
       ```javascript
       let json = snapshot.record.toJSON();
       ```
    
       @property record
       @type {Model}
       @public
       */
      get record(): R | null;
      get _attributes(): Record<keyof R & string, unknown>;
      get isNew(): boolean;
      /**
       Returns the value of an attribute.
    
       Example
    
       ```javascript
       // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
       postSnapshot.attr('author'); // => 'Tomster'
       postSnapshot.attr('title'); // => 'Ember.js rocks'
       ```
    
       Note: Values are loaded eagerly and cached when the snapshot is created.
    
       @method attr
       @param {String} keyName
       @return {Object} The attribute value or undefined
       @public
       */
      attr(keyName: keyof R & string): unknown;
      /**
       Returns all attributes and their corresponding values.
    
       Example
    
       ```javascript
       // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
       postSnapshot.attributes(); // => { author: 'Tomster', title: 'Ember.js rocks' }
       ```
    
       @method attributes
       @return {Object} All attributes of the current snapshot
       @public
       */
      attributes(): Record<keyof R & string, unknown>;
      /**
       Returns all changed attributes and their old and new values.
    
       Example
    
       ```javascript
       // store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });
       postModel.set('title', 'Ember.js rocks!');
       postSnapshot.changedAttributes(); // => { title: ['Ember.js rocks', 'Ember.js rocks!'] }
       ```
    
       @method changedAttributes
       @return {Object} All changed attributes of the current snapshot
       @public
       */
      changedAttributes(): ChangedAttributesHash;
      /**
       Returns the current value of a belongsTo relationship.
    
       `belongsTo` takes an optional hash of options as a second parameter,
       currently supported options are:
    
       - `id`: set to `true` if you only want the ID of the related record to be
       returned.
    
       Example
    
       ```javascript
       // store.push('post', { id: 1, title: 'Hello World' });
       // store.createRecord('comment', { body: 'Lorem ipsum', post: post });
       commentSnapshot.belongsTo('post'); // => Snapshot
       commentSnapshot.belongsTo('post', { id: true }); // => '1'
    
       // store.push('comment', { id: 1, body: 'Lorem ipsum' });
       commentSnapshot.belongsTo('post'); // => undefined
       ```
    
       Calling `belongsTo` will return a new Snapshot as long as there's any known
       data for the relationship available, such as an ID. If the relationship is
       known but unset, `belongsTo` will return `null`. If the contents of the
       relationship is unknown `belongsTo` will return `undefined`.
    
       Note: Relationships are loaded lazily and cached upon first access.
    
       @method belongsTo
       @param {String} keyName
       @param {Object} [options]
       @public
       @return {(Snapshot|String|null|undefined)} A snapshot or ID of a known
       relationship or null if the relationship is known but unset. undefined
       will be returned if the contents of the relationship is unknown.
       */
      belongsTo(keyName: string, options?: {
          id?: boolean;
      }): Snapshot | RecordId | undefined;
      /**
       Returns the current value of a hasMany relationship.
    
       `hasMany` takes an optional hash of options as a second parameter,
       currently supported options are:
    
       - `ids`: set to `true` if you only want the IDs of the related records to be
       returned.
    
       Example
    
       ```javascript
       // store.push('post', { id: 1, title: 'Hello World', comments: [2, 3] });
       postSnapshot.hasMany('comments'); // => [Snapshot, Snapshot]
       postSnapshot.hasMany('comments', { ids: true }); // => ['2', '3']
    
       // store.push('post', { id: 1, title: 'Hello World' });
       postSnapshot.hasMany('comments'); // => undefined
       ```
    
       Note: Relationships are loaded lazily and cached upon first access.
    
       @method hasMany
       @param {String} keyName
       @param {Object} [options]
       @public
       @return {(Array|undefined)} An array of snapshots or IDs of a known
       relationship or an empty array if the relationship is known but unset.
       undefined will be returned if the contents of the relationship is unknown.
       */
      hasMany(keyName: string, options?: {
          ids?: boolean;
      }): RecordId[] | Snapshot[] | undefined;
      /**
        Iterates through all the attributes of the model, calling the passed
        function on each attribute.
    
        Example
    
        ```javascript
        snapshot.eachAttribute(function(name, meta) {
          // ...
        });
        ```
    
        @method eachAttribute
        @param {Function} callback the callback to execute
        @param {Object} [binding] the value to which the callback's `this` should be bound
        @public
      */
      eachAttribute(callback: (key: string, meta: LegacyAttributeField) => void, binding?: unknown): void;
      /**
        Iterates through all the relationships of the model, calling the passed
        function on each relationship.
    
        Example
    
        ```javascript
        snapshot.eachRelationship(function(name, relationship) {
          // ...
        });
        ```
    
        @method eachRelationship
        @param {Function} callback the callback to execute
        @param {Object} [binding] the value to which the callback's `this` should be bound
        @public
      */
      eachRelationship(callback: (key: string, meta: LegacyRelationshipField) => void, binding?: unknown): void;
      /**
        Serializes the snapshot using the serializer for the model.
    
        Example
    
        ```app/adapters/application.js
        import Adapter from '@ember-data/adapter';
    
        export default Adapter.extend({
          createRecord(store, type, snapshot) {
            let data = snapshot.serialize({ includeId: true });
            let url = `/${type.modelName}`;
    
            return fetch(url, {
              method: 'POST',
              body: data,
            }).then((response) => response.json())
          }
        });
        ```
    
        @method serialize
        @param {Object} options
        @return {Object} an object whose values are primitive JSON values only
        @public
       */
      serialize(options?: SerializerOptions): unknown;
  }
  export {};
}
//# sourceMappingURL=snapshot.d.ts.map