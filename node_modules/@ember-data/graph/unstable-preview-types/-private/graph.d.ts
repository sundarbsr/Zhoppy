declare module '@ember-data/graph/-private/graph' {
  import type { CacheCapabilitiesManager } from '@ember-data/store/types';
  import type { StableRecordIdentifier } from '@warp-drive/core-types';
  import type { RelationshipDiff } from '@warp-drive/core-types/cache';
  import type { MergeOperation } from '@warp-drive/core-types/cache/operations';
  import type { CollectionRelationship, ResourceRelationship } from '@warp-drive/core-types/cache/relationship';
  import type { DeleteRecordOperation, LocalRelationshipOperation, RemoteRelationshipOperation } from '@warp-drive/core-types/graph';
  import type { EdgeCache, UpgradedMeta } from '@ember-data/graph/-private/-edge-definition';
  import { type CollectionEdge } from '@ember-data/graph/-private/edges/collection';
  import type { ImplicitEdge } from '@ember-data/graph/-private/edges/implicit';
  import { type ResourceEdge } from '@ember-data/graph/-private/edges/resource';
  export type GraphEdge = ImplicitEdge | CollectionEdge | ResourceEdge;
  export const Graphs: Map<CacheCapabilitiesManager, Graph>;
  type PendingOps = {
      belongsTo?: Map<string, Map<string, RemoteRelationshipOperation[]>>;
      hasMany?: Map<string, Map<string, RemoteRelationshipOperation[]>>;
      deletions: DeleteRecordOperation[];
  };
  export class Graph {
      _definitionCache: EdgeCache;
      _metaCache: Record<string, Record<string, UpgradedMeta>>;
      _potentialPolymorphicTypes: Record<string, Record<string, boolean>>;
      identifiers: Map<StableRecordIdentifier, Record<string, GraphEdge>>;
      store: CacheCapabilitiesManager;
      isDestroyed: boolean;
      _willSyncRemote: boolean;
      _willSyncLocal: boolean;
      silenceNotifications: boolean;
      _pushedUpdates: PendingOps;
      _updatedRelationships: Set<CollectionEdge>;
      _transaction: number | null;
      _removing: StableRecordIdentifier | null;
      constructor(store: CacheCapabilitiesManager);
      has(identifier: StableRecordIdentifier, propertyName: string): boolean;
      getDefinition(identifier: StableRecordIdentifier, propertyName: string): UpgradedMeta;
      get(identifier: StableRecordIdentifier, propertyName: string): GraphEdge;
      getData(identifier: StableRecordIdentifier, propertyName: string): ResourceRelationship | CollectionRelationship;
      getRemoteData(identifier: StableRecordIdentifier, propertyName: string): ResourceRelationship | CollectionRelationship;
      registerPolymorphicType(type1: string, type2: string): void;
      isReleasable(identifier: StableRecordIdentifier): boolean;
      unload(identifier: StableRecordIdentifier, silenceNotifications?: boolean): void;
      _isDirty(identifier: StableRecordIdentifier, field: string): boolean;
      getChanged(identifier: StableRecordIdentifier): Map<string, RelationshipDiff>;
      hasChanged(identifier: StableRecordIdentifier): boolean;
      rollback(identifier: StableRecordIdentifier): string[];
      remove(identifier: StableRecordIdentifier): void;
      push(op: RemoteRelationshipOperation): void;
      update(op: RemoteRelationshipOperation | MergeOperation, isRemote: true): void;
      update(op: LocalRelationshipOperation, isRemote?: false): void;
      _scheduleLocalSync(relationship: CollectionEdge): void;
      _flushRemoteQueue(): void;
      _addToTransaction(relationship: CollectionEdge | ResourceEdge): void;
      _flushLocalQueue(): void;
      destroy(): void;
  }
  export {};
}
//# sourceMappingURL=graph.d.ts.map