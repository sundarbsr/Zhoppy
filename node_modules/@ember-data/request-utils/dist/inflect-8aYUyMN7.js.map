{"version":3,"file":"inflect-8aYUyMN7.js","sources":["../src/-private/string/inflections.ts","../src/-private/string/transform.ts","../src/-private/string/inflect.ts"],"sourcesContent":["export type RulesArray = Array<[RegExp, string]>;\ntype DefaultRulesType = {\n  plurals: RulesArray;\n  singular: RulesArray;\n  irregularPairs: Array<[string, string]>;\n  uncountable: string[];\n};\n\nexport const defaultRules: DefaultRulesType = {\n  plurals: [\n    [/$/, 's'],\n    [/s$/i, 's'],\n    [/^(ax|test)is$/i, '$1es'],\n    [/(octop|vir)us$/i, '$1i'],\n    [/(octop|vir)i$/i, '$1i'],\n    [/(alias|status|bonus)$/i, '$1es'],\n    [/(bu)s$/i, '$1ses'],\n    [/(buffal|tomat)o$/i, '$1oes'],\n    [/([ti])um$/i, '$1a'],\n    [/([ti])a$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:([^f])fe|([lr])f)$/i, '$1$2ves'],\n    [/(hive)$/i, '$1s'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/(x|ch|ss|sh)$/i, '$1es'],\n    [/(matr|vert|ind)(?:ix|ex)$/i, '$1ices'],\n    [/^(m|l)ouse$/i, '$1ice'],\n    [/^(m|l)ice$/i, '$1ice'],\n    [/^(ox)$/i, '$1en'],\n    [/^(oxen)$/i, '$1'],\n    [/(quiz)$/i, '$1zes'],\n  ],\n\n  singular: [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(n)ews$/i, '$1ews'],\n    [/([ti])a$/i, '$1um'],\n    [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, '$1sis'],\n    [/(^analy)(sis|ses)$/i, '$1sis'],\n    [/([^f])ves$/i, '$1fe'],\n    [/(hive)s$/i, '$1'],\n    [/(tive)s$/i, '$1'],\n    [/([lr])ves$/i, '$1f'],\n    [/([^aeiouy]|qu)ies$/i, '$1y'],\n    [/(s)eries$/i, '$1eries'],\n    [/(m)ovies$/i, '$1ovie'],\n    [/(x|ch|ss|sh)es$/i, '$1'],\n    [/^(m|l)ice$/i, '$1ouse'],\n    [/(bus)(es)?$/i, '$1'],\n    [/(o)es$/i, '$1'],\n    [/(shoe)s$/i, '$1'],\n    [/(cris|test)(is|es)$/i, '$1is'],\n    [/^(a)x[ie]s$/i, '$1xis'],\n    [/(octop|vir)(us|i)$/i, '$1us'],\n    [/(alias|status|bonus)(es)?$/i, '$1'],\n    [/^(ox)en/i, '$1'],\n    [/(vert|ind)ices$/i, '$1ex'],\n    [/(matr)ices$/i, '$1ix'],\n    [/(quiz)zes$/i, '$1'],\n    [/(database)s$/i, '$1'],\n  ],\n\n  irregularPairs: [\n    ['person', 'people'],\n    ['man', 'men'],\n    ['child', 'children'],\n    ['sex', 'sexes'],\n    ['move', 'moves'],\n    ['cow', 'kine'],\n    ['zombie', 'zombies'],\n  ],\n\n  uncountable: ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'jeans', 'police'],\n};\n","import { DEBUG } from '@warp-drive/build-config/env';\n\nconst DEFAULT_MAX_CACHE_SIZE = 10_000;\nexport class LRUCache<T, V> {\n  declare size: number;\n  declare state: Map<T, V>;\n  declare doWork: (k: T) => V;\n\n  // debug stats\n  declare _hits: number;\n  declare _misses: number;\n  declare _ejected: number;\n\n  constructor(doWork: (k: T) => V, size?: number) {\n    this.size = size || DEFAULT_MAX_CACHE_SIZE;\n    this.state = new Map();\n    this.doWork = doWork;\n\n    if (DEBUG) {\n      this._hits = 0;\n      this._misses = 0;\n      this._ejected = 0;\n    }\n  }\n  get(key: T) {\n    const value = this.state.get(key);\n    if (value) {\n      if (DEBUG) {\n        this._hits++;\n      }\n      this.state.delete(key);\n      this.state.set(key, value);\n      return value;\n    }\n    if (DEBUG) {\n      this._misses++;\n    }\n\n    const newValue = this.doWork(key);\n    this.set(key, newValue);\n    return newValue;\n  }\n\n  set(key: T, value: V) {\n    if (this.state.size === this.size) {\n      for (const [k] of this.state) {\n        if (DEBUG) {\n          this._ejected++;\n        }\n        this.state.delete(k);\n        break;\n      }\n    }\n    this.state.set(key, value);\n  }\n\n  clear() {\n    this.state.clear();\n    if (DEBUG) {\n      this._hits = 0;\n      this._misses = 0;\n      this._ejected = 0;\n    }\n  }\n}\n\nconst STRING_DASHERIZE_REGEXP = /[ _]/g;\nconst STRING_DECAMELIZE_REGEXP = /([a-z\\d])([A-Z])/g;\nconst STRING_DASHERIZE_CACHE = new LRUCache<string, string>((key: string) =>\n  key.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase().replace(STRING_DASHERIZE_REGEXP, '-')\n);\n\n// eslint-disable-next-line no-useless-escape\nconst STRING_CAMELIZE_REGEXP_1 = /(\\-|\\_|\\.|\\s)+(.)?/g;\nconst STRING_CAMELIZE_REGEXP_2 = /(^|\\/)([A-Z])/g;\nconst CAMELIZE_CACHE = new LRUCache<string, string>((key: string) =>\n  key\n    .replace(STRING_CAMELIZE_REGEXP_1, (_match, _separator, chr: string | null) => (chr ? chr.toUpperCase() : ''))\n    .replace(STRING_CAMELIZE_REGEXP_2, (match /*, separator, chr */) => match.toLowerCase())\n);\n\nconst STRING_UNDERSCORE_REGEXP_1 = /([a-z\\d])([A-Z]+)/g;\n// eslint-disable-next-line no-useless-escape\nconst STRING_UNDERSCORE_REGEXP_2 = /\\-|\\s+/g;\nconst UNDERSCORE_CACHE = new LRUCache<string, string>((str: string) =>\n  str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase()\n);\n\nconst STRING_CAPITALIZE_REGEXP = /(^|\\/)([a-z\\u00C0-\\u024F])/g;\nconst CAPITALIZE_CACHE = new LRUCache<string, string>((str: string) =>\n  str.replace(STRING_CAPITALIZE_REGEXP, (match /*, separator, chr */) => match.toUpperCase())\n);\n\n/**\n  Replaces underscores, spaces, or camelCase with dashes.\n\n  ```js\n  import { dasherize } from '@ember-data/request-utils/string';\n\n  dasherize('innerHTML');                // 'inner-html'\n  dasherize('action_name');              // 'action-name'\n  dasherize('css-class-name');           // 'css-class-name'\n  dasherize('my favorite items');        // 'my-favorite-items'\n  dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'\n  ```\n\n  @typedoc\n*/\nexport function dasherize(str: string): string {\n  return STRING_DASHERIZE_CACHE.get(str);\n}\n\n/**\n  Returns the lowerCamelCase form of a string.\n\n  ```js\n  import { camelize } from '@ember-data/request-utils/string';\n\n  camelize('innerHTML');                   // 'innerHTML'\n  camelize('action_name');                 // 'actionName'\n  camelize('css-class-name');              // 'cssClassName'\n  camelize('my favorite items');           // 'myFavoriteItems'\n  camelize('My Favorite Items');           // 'myFavoriteItems'\n  camelize('private-docs/owner-invoice');  // 'privateDocs/ownerInvoice'\n```\n\n  @typedoc\n*/\nexport function camelize(str: string): string {\n  return CAMELIZE_CACHE.get(str);\n}\n\n/**\n  Returns the lower\\_case\\_and\\_underscored form of a string.\n\n  ```js\n  import { underscore } from '@ember-data/request-utils/string';\n\n  underscore('innerHTML');                 // 'inner_html'\n  underscore('action_name');               // 'action_name'\n  underscore('css-class-name');            // 'css_class_name'\n  underscore('my favorite items');         // 'my_favorite_items'\n  underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'\n  ```\n\n  @typedoc\n*/\nexport function underscore(str: string): string {\n  return UNDERSCORE_CACHE.get(str);\n}\n\n/**\n  Returns the Capitalized form of a string\n\n  ```js\n  import { capitalize } from '@ember-data/request-utils/string';\n\n  capitalize('innerHTML')                 // 'InnerHTML'\n  capitalize('action_name')               // 'Action_name'\n  capitalize('css-class-name')            // 'Css-class-name'\n  capitalize('my favorite items')         // 'My favorite items'\n  capitalize('privateDocs/ownerInvoice'); // 'PrivateDocs/ownerInvoice'\n  ```\n\n  @typedoc\n*/\nexport function capitalize(str: string): string {\n  return CAPITALIZE_CACHE.get(str);\n}\n\nexport function setMaxLRUCacheSize(size: number) {\n  CAMELIZE_CACHE.size = size;\n  UNDERSCORE_CACHE.size = size;\n  CAPITALIZE_CACHE.size = size;\n  STRING_DASHERIZE_CACHE.size = size;\n}\n","import { assert } from '@warp-drive/build-config/macros';\n\nimport { defaultRules } from './inflections';\nimport { capitalize, LRUCache } from './transform';\n\nconst BLANK_REGEX = /^\\s*$/;\nconst LAST_WORD_DASHED_REGEX = /([\\w/-]+[_/\\s-])([a-z\\d]+$)/;\nconst LAST_WORD_CAMELIZED_REGEX = /([\\w/\\s-]+)([A-Z][a-z\\d]*$)/;\nconst CAMELIZED_REGEX = /[A-Z][a-z\\d]*$/;\n\nconst SINGULARS = new LRUCache<string, string>((word: string) => {\n  return _singularize(word);\n});\nconst PLURALS = new LRUCache<string, string>((word: string) => {\n  return _pluralize(word);\n});\nconst UNCOUNTABLE = new Set(defaultRules.uncountable);\nconst IRREGULAR: Map<string, string> = new Map();\nconst INVERSE_IRREGULAR: Map<string, string> = new Map();\nconst SINGULAR_RULES = new Map(defaultRules.singular.reverse());\nconst PLURAL_RULES = new Map(defaultRules.plurals.reverse());\n\nexport function uncountable(word: string) {\n  UNCOUNTABLE.add(word.toLowerCase());\n}\n\nexport function loadUncountable(uncountables: string[]) {\n  uncountables.forEach((word) => {\n    uncountable(word);\n  });\n}\n\nexport function irregular(single: string, plur: string) {\n  //pluralizing\n  IRREGULAR.set(single.toLowerCase(), plur);\n  IRREGULAR.set(plur.toLowerCase(), plur);\n\n  //singularizing\n  INVERSE_IRREGULAR.set(plur.toLowerCase(), single);\n  INVERSE_IRREGULAR.set(single.toLowerCase(), single);\n}\n\nexport function loadIrregular(irregularPairs: Array<[string, string]>) {\n  irregularPairs.forEach((pair) => {\n    //pluralizing\n    IRREGULAR.set(pair[0].toLowerCase(), pair[1]);\n    IRREGULAR.set(pair[1].toLowerCase(), pair[1]);\n\n    //singularizing\n    INVERSE_IRREGULAR.set(pair[1].toLowerCase(), pair[0]);\n    INVERSE_IRREGULAR.set(pair[0].toLowerCase(), pair[0]);\n  });\n}\nloadIrregular(defaultRules.irregularPairs);\n\nexport function clear() {\n  SINGULARS.clear();\n  PLURALS.clear();\n}\n\nexport function resetToDefaults() {\n  clearRules();\n  defaultRules.uncountable.forEach((v) => UNCOUNTABLE.add(v));\n  defaultRules.singular.forEach((v) => SINGULAR_RULES.set(v[0], v[1]));\n  defaultRules.plurals.forEach((v) => PLURAL_RULES.set(v[0], v[1]));\n  loadIrregular(defaultRules.irregularPairs);\n}\n\nexport function clearRules() {\n  SINGULARS.clear();\n  PLURALS.clear();\n  UNCOUNTABLE.clear();\n  IRREGULAR.clear();\n  INVERSE_IRREGULAR.clear();\n  SINGULAR_RULES.clear();\n  PLURAL_RULES.clear();\n}\n\nexport function singularize(word: string) {\n  assert(`singularize expects to receive a non-empty string`, typeof word === 'string' && word.length > 0);\n  if (!word) return '';\n  return SINGULARS.get(word);\n}\n\nexport function pluralize(word: string) {\n  assert(`pluralize expects to receive a non-empty string`, typeof word === 'string' && word.length > 0);\n  if (!word) return '';\n  return PLURALS.get(word);\n}\n\nfunction unshiftMap<K, V>(v: [K, V], map: Map<K, V>) {\n  // reorder\n  const rules = [v, ...map.entries()];\n  map.clear();\n  rules.forEach((rule) => {\n    map.set(rule[0], rule[1]);\n  });\n}\n\nexport function plural(regex: RegExp, string: string) {\n  // rule requires reordering if exists, so remove it first\n  if (PLURAL_RULES.has(regex)) {\n    PLURAL_RULES.delete(regex);\n  }\n\n  // reorder\n  unshiftMap([regex, string], PLURAL_RULES);\n}\n\nexport function singular(regex: RegExp, string: string) {\n  // rule requires reordering if exists, so remove it first\n  if (SINGULAR_RULES.has(regex)) {\n    SINGULAR_RULES.delete(regex);\n  }\n\n  // reorder\n  unshiftMap([regex, string], SINGULAR_RULES);\n}\n\nfunction _pluralize(word: string) {\n  return inflect(word, PLURAL_RULES, IRREGULAR);\n}\n\nfunction _singularize(word: string) {\n  return inflect(word, SINGULAR_RULES, INVERSE_IRREGULAR);\n}\n\nfunction inflect(word: string, typeRules: Map<RegExp, string>, irregulars: Map<string, string>) {\n  // empty strings\n  const isBlank = !word || BLANK_REGEX.test(word);\n  if (isBlank) {\n    return word;\n  }\n\n  // basic uncountables\n  const lowercase = word.toLowerCase();\n  if (UNCOUNTABLE.has(lowercase)) {\n    return word;\n  }\n\n  // adv uncountables\n  const wordSplit = LAST_WORD_DASHED_REGEX.exec(word) || LAST_WORD_CAMELIZED_REGEX.exec(word);\n  const lastWord = wordSplit ? wordSplit[2].toLowerCase() : null;\n  if (lastWord && UNCOUNTABLE.has(lastWord)) {\n    return word;\n  }\n\n  // handle irregulars\n  const isCamelized = CAMELIZED_REGEX.test(word);\n  for (let [rule, substitution] of irregulars) {\n    if (lowercase.match(rule + '$')) {\n      if (isCamelized && lastWord && irregulars.has(lastWord)) {\n        substitution = capitalize(substitution);\n        rule = capitalize(rule);\n      }\n\n      return word.replace(new RegExp(rule, 'i'), substitution);\n    }\n  }\n\n  // do the actual inflection\n  for (const [rule, substitution] of typeRules) {\n    if (rule.test(word)) {\n      return word.replace(rule, substitution);\n    }\n  }\n\n  return word;\n}\n"],"names":["defaultRules","plurals","singular","irregularPairs","uncountable","DEFAULT_MAX_CACHE_SIZE","LRUCache","constructor","doWork","size","state","Map","macroCondition","getGlobalConfig","WarpDrive","env","DEBUG","_hits","_misses","_ejected","get","key","value","delete","set","newValue","k","clear","STRING_DASHERIZE_REGEXP","STRING_DECAMELIZE_REGEXP","STRING_DASHERIZE_CACHE","replace","toLowerCase","STRING_CAMELIZE_REGEXP_1","STRING_CAMELIZE_REGEXP_2","CAMELIZE_CACHE","_match","_separator","chr","toUpperCase","match","STRING_UNDERSCORE_REGEXP_1","STRING_UNDERSCORE_REGEXP_2","UNDERSCORE_CACHE","str","STRING_CAPITALIZE_REGEXP","CAPITALIZE_CACHE","dasherize","camelize","underscore","capitalize","setMaxLRUCacheSize","BLANK_REGEX","LAST_WORD_DASHED_REGEX","LAST_WORD_CAMELIZED_REGEX","CAMELIZED_REGEX","SINGULARS","word","_singularize","PLURALS","_pluralize","UNCOUNTABLE","Set","IRREGULAR","INVERSE_IRREGULAR","SINGULAR_RULES","reverse","PLURAL_RULES","add","loadUncountable","uncountables","forEach","irregular","single","plur","loadIrregular","pair","resetToDefaults","clearRules","v","singularize","test","Error","length","pluralize","unshiftMap","map","rules","entries","rule","plural","regex","string","has","inflect","typeRules","irregulars","isBlank","lowercase","wordSplit","exec","lastWord","isCamelized","substitution","RegExp"],"mappings":"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"}