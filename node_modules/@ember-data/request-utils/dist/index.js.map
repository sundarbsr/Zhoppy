{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { deprecate } from '@ember/debug';\n\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport { getOrSetGlobal } from '@warp-drive/core-types/-private';\nimport type { Cache } from '@warp-drive/core-types/cache';\nimport type { StableDocumentIdentifier } from '@warp-drive/core-types/identifier';\nimport type { QueryParamsSerializationOptions, QueryParamsSource, Serializable } from '@warp-drive/core-types/params';\nimport type { ImmutableRequestInfo, ResponseInfo } from '@warp-drive/core-types/request';\n\ntype UnsubscribeToken = object;\ntype CacheOperation = 'added' | 'removed' | 'updated' | 'state';\ntype DocumentCacheOperation = 'invalidated' | 'added' | 'removed' | 'updated' | 'state';\n\nexport interface NotificationCallback {\n  (identifier: StableRecordIdentifier, notificationType: 'attributes' | 'relationships', key?: string): void;\n  (identifier: StableRecordIdentifier, notificationType: 'errors' | 'meta' | 'identity' | 'state'): void;\n  // (identifier: StableRecordIdentifier, notificationType: NotificationType, key?: string): void;\n}\n\ninterface ResourceOperationCallback {\n  // resource updates\n  (identifier: StableRecordIdentifier, notificationType: CacheOperation): void;\n}\n\ninterface DocumentOperationCallback {\n  // document updates\n  (identifier: StableDocumentIdentifier, notificationType: DocumentCacheOperation): void;\n}\n\ntype NotificationManager = {\n  subscribe(identifier: StableRecordIdentifier, callback: NotificationCallback): UnsubscribeToken;\n  subscribe(identifier: 'resource', callback: ResourceOperationCallback): UnsubscribeToken;\n  subscribe(identifier: 'document' | StableDocumentIdentifier, callback: DocumentOperationCallback): UnsubscribeToken;\n\n  notify(identifier: StableRecordIdentifier, value: 'attributes' | 'relationships', key?: string): boolean;\n  notify(identifier: StableRecordIdentifier, value: 'errors' | 'meta' | 'identity' | 'state'): boolean;\n  notify(identifier: StableRecordIdentifier, value: CacheOperation): boolean;\n  notify(identifier: StableDocumentIdentifier, value: DocumentCacheOperation): boolean;\n};\n\ntype Store = {\n  cache: Cache;\n  notifications: NotificationManager;\n};\n\n/**\n * Simple utility function to assist in url building,\n * query params, and other common request operations.\n *\n * These primitives may be used directly or composed\n * by request builders to provide a consistent interface\n * for building requests.\n *\n * For instance:\n *\n * ```ts\n * import { buildBaseURL, buildQueryParams } from '@ember-data/request-utils';\n *\n * const baseURL = buildBaseURL({\n *   host: 'https://api.example.com',\n *   namespace: 'api/v1',\n *   resourcePath: 'emberDevelopers',\n *   op: 'query',\n *   identifier: { type: 'ember-developer' }\n * });\n * const url = `${baseURL}?${buildQueryParams({ name: 'Chris', include:['pets'] })}`;\n * // => 'https://api.example.com/api/v1/emberDevelopers?include=pets&name=Chris'\n * ```\n *\n * This is useful, but not as useful as the REST request builder for query which is sugar\n * over this (and more!):\n *\n * ```ts\n * import { query } from '@ember-data/rest/request';\n *\n * const options = query('ember-developer', { name: 'Chris', include:['pets'] });\n * // => { url: 'https://api.example.com/api/v1/emberDevelopers?include=pets&name=Chris' }\n * // Note: options will also include other request options like headers, method, etc.\n * ```\n *\n * @module @ember-data/request-utils\n * @main @ember-data/request-utils\n * @public\n */\n\n// prevents the final constructed object from needing to add\n// host and namespace which are provided by the final consuming\n// class to the prototype which can result in overwrite errors\n\nexport interface BuildURLConfig {\n  host: string | null;\n  namespace: string | null;\n}\n\nconst CONFIG: BuildURLConfig = getOrSetGlobal('CONFIG', {\n  host: '',\n  namespace: '',\n});\n\n/**\n * Sets the global configuration for `buildBaseURL`\n * for host and namespace values for the application.\n *\n * These values may still be overridden by passing\n * them to buildBaseURL directly.\n *\n * This method may be called as many times as needed.\n * host values of `''` or `'/'` are equivalent.\n *\n * Except for the value of `/` as host, host should not\n * end with `/`.\n *\n * namespace should not start or end with a `/`.\n *\n * ```ts\n * type BuildURLConfig = {\n *   host: string;\n *   namespace: string'\n * }\n * ```\n *\n * Example:\n *\n * ```ts\n * import { setBuildURLConfig } from '@ember-data/request-utils';\n *\n * setBuildURLConfig({\n *   host: 'https://api.example.com',\n *   namespace: 'api/v1'\n * });\n * ```\n *\n * @method setBuildURLConfig\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {BuildURLConfig} config\n * @return void\n */\nexport function setBuildURLConfig(config: BuildURLConfig) {\n  assert(`setBuildURLConfig: You must pass a config object`, config);\n  assert(\n    `setBuildURLConfig: You must pass a config object with a 'host' or 'namespace' property`,\n    'host' in config || 'namespace' in config\n  );\n\n  CONFIG.host = config.host || '';\n  CONFIG.namespace = config.namespace || '';\n\n  assert(\n    `buildBaseURL: host must NOT end with '/', received '${CONFIG.host}'`,\n    CONFIG.host === '/' || !CONFIG.host.endsWith('/')\n  );\n  assert(\n    `buildBaseURL: namespace must NOT start with '/', received '${CONFIG.namespace}'`,\n    !CONFIG.namespace.startsWith('/')\n  );\n  assert(\n    `buildBaseURL: namespace must NOT end with '/', received '${CONFIG.namespace}'`,\n    !CONFIG.namespace.endsWith('/')\n  );\n}\n\nexport interface FindRecordUrlOptions {\n  op: 'findRecord';\n  identifier: { type: string; id: string };\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface QueryUrlOptions {\n  op: 'query';\n  identifier: { type: string };\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface FindManyUrlOptions {\n  op: 'findMany';\n  identifiers: { type: string; id: string }[];\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\nexport interface FindRelatedCollectionUrlOptions {\n  op: 'findRelatedCollection';\n  identifier: { type: string; id: string };\n  fieldPath: string;\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface FindRelatedResourceUrlOptions {\n  op: 'findRelatedRecord';\n  identifier: { type: string; id: string };\n  fieldPath: string;\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface CreateRecordUrlOptions {\n  op: 'createRecord';\n  identifier: { type: string };\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface UpdateRecordUrlOptions {\n  op: 'updateRecord';\n  identifier: { type: string; id: string };\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface DeleteRecordUrlOptions {\n  op: 'deleteRecord';\n  identifier: { type: string; id: string };\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface GenericUrlOptions {\n  resourcePath: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport type UrlOptions =\n  | FindRecordUrlOptions\n  | QueryUrlOptions\n  | FindManyUrlOptions\n  | FindRelatedCollectionUrlOptions\n  | FindRelatedResourceUrlOptions\n  | CreateRecordUrlOptions\n  | UpdateRecordUrlOptions\n  | DeleteRecordUrlOptions\n  | GenericUrlOptions;\n\nconst OPERATIONS_WITH_PRIMARY_RECORDS = new Set([\n  'findRecord',\n  'findRelatedRecord',\n  'findRelatedCollection',\n  'updateRecord',\n  'deleteRecord',\n]);\n\nfunction isOperationWithPrimaryRecord(\n  options: UrlOptions\n): options is\n  | FindRecordUrlOptions\n  | FindRelatedCollectionUrlOptions\n  | FindRelatedResourceUrlOptions\n  | UpdateRecordUrlOptions\n  | DeleteRecordUrlOptions {\n  return 'op' in options && OPERATIONS_WITH_PRIMARY_RECORDS.has(options.op);\n}\n\nfunction hasResourcePath(options: UrlOptions): options is GenericUrlOptions {\n  return 'resourcePath' in options && typeof options.resourcePath === 'string' && options.resourcePath.length > 0;\n}\n\nfunction resourcePathForType(options: UrlOptions): string {\n  assert(\n    `resourcePathForType: You must pass a valid op as part of options`,\n    'op' in options && typeof options.op === 'string'\n  );\n  return options.op === 'findMany' ? options.identifiers[0].type : options.identifier.type;\n}\n\n/**\n * Builds a URL for a request based on the provided options.\n * Does not include support for building query params (see `buildQueryParams`)\n * so that it may be composed cleanly with other query-params strategies.\n *\n * Usage:\n *\n * ```ts\n * import { buildBaseURL } from '@ember-data/request-utils';\n *\n * const url = buildBaseURL({\n *   host: 'https://api.example.com',\n *   namespace: 'api/v1',\n *   resourcePath: 'emberDevelopers',\n *   op: 'query',\n *   identifier: { type: 'ember-developer' }\n * });\n *\n * // => 'https://api.example.com/api/v1/emberDevelopers'\n * ```\n *\n * On the surface this may seem like a lot of work to do something simple, but\n * it is designed to be composable with other utilities and interfaces that the\n * average product engineer will never need to see or use.\n *\n * A few notes:\n *\n * - `resourcePath` is optional, but if it is not provided, `identifier.type` will be used.\n * - `host` and `namespace` are optional, but if they are not provided, the values globally\n *    configured via `setBuildURLConfig` will be used.\n * - `op` is required and must be one of the following:\n *   - 'findRecord' 'query' 'findMany' 'findRelatedCollection' 'findRelatedRecord'` 'createRecord' 'updateRecord' 'deleteRecord'\n * - Depending on the value of `op`, `identifier` or `identifiers` will be required.\n *\n * @method buildBaseURL\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param urlOptions\n * @return string\n */\nexport function buildBaseURL(urlOptions: UrlOptions): string {\n  const options = Object.assign(\n    {\n      host: CONFIG.host,\n      namespace: CONFIG.namespace,\n    },\n    urlOptions\n  );\n  assert(\n    `buildBaseURL: You must pass \\`op\\` as part of options`,\n    hasResourcePath(options) || (typeof options.op === 'string' && options.op.length > 0)\n  );\n  assert(\n    `buildBaseURL: You must pass \\`identifier\\` as part of options`,\n    hasResourcePath(options) ||\n      options.op === 'findMany' ||\n      (options.identifier && typeof options.identifier === 'object')\n  );\n  assert(\n    `buildBaseURL: You must pass \\`identifiers\\` as part of options`,\n    hasResourcePath(options) ||\n      options.op !== 'findMany' ||\n      (options.identifiers &&\n        Array.isArray(options.identifiers) &&\n        options.identifiers.length > 0 &&\n        options.identifiers.every((i) => i && typeof i === 'object'))\n  );\n  assert(\n    `buildBaseURL: You must pass valid \\`identifier\\` as part of options, expected 'id'`,\n    hasResourcePath(options) ||\n      !isOperationWithPrimaryRecord(options) ||\n      (typeof options.identifier.id === 'string' && options.identifier.id.length > 0)\n  );\n  assert(\n    `buildBaseURL: You must pass \\`identifiers\\` as part of options`,\n    hasResourcePath(options) ||\n      options.op !== 'findMany' ||\n      options.identifiers.every((i) => typeof i.id === 'string' && i.id.length > 0)\n  );\n  assert(\n    `buildBaseURL: You must pass valid \\`identifier\\` as part of options, expected 'type'`,\n    hasResourcePath(options) ||\n      options.op === 'findMany' ||\n      (typeof options.identifier.type === 'string' && options.identifier.type.length > 0)\n  );\n  assert(\n    `buildBaseURL: You must pass valid \\`identifiers\\` as part of options, expected 'type'`,\n    hasResourcePath(options) ||\n      options.op !== 'findMany' ||\n      (typeof options.identifiers[0].type === 'string' && options.identifiers[0].type.length > 0)\n  );\n\n  // prettier-ignore\n  const idPath: string =\n      isOperationWithPrimaryRecord(options) ? encodeURIComponent(options.identifier.id)\n      : '';\n  const resourcePath = options.resourcePath || resourcePathForType(options);\n  const { host, namespace } = options;\n  const fieldPath = 'fieldPath' in options ? options.fieldPath : '';\n\n  assert(\n    `buildBaseURL: You tried to build a url for a ${String(\n      'op' in options ? options.op + ' ' : ''\n    )}request to ${resourcePath} but resourcePath must be set or op must be one of \"${[\n      'findRecord',\n      'findRelatedRecord',\n      'findRelatedCollection',\n      'updateRecord',\n      'deleteRecord',\n      'createRecord',\n      'query',\n      'findMany',\n    ].join('\",\"')}\".`,\n    hasResourcePath(options) ||\n      [\n        'findRecord',\n        'query',\n        'findMany',\n        'findRelatedCollection',\n        'findRelatedRecord',\n        'createRecord',\n        'updateRecord',\n        'deleteRecord',\n      ].includes(options.op)\n  );\n\n  assert(`buildBaseURL: host must NOT end with '/', received '${host}'`, host === '/' || !host.endsWith('/'));\n  assert(`buildBaseURL: namespace must NOT start with '/', received '${namespace}'`, !namespace.startsWith('/'));\n  assert(`buildBaseURL: namespace must NOT end with '/', received '${namespace}'`, !namespace.endsWith('/'));\n  assert(\n    `buildBaseURL: resourcePath must NOT start with '/', received '${resourcePath}'`,\n    !resourcePath.startsWith('/')\n  );\n  assert(`buildBaseURL: resourcePath must NOT end with '/', received '${resourcePath}'`, !resourcePath.endsWith('/'));\n  assert(`buildBaseURL: fieldPath must NOT start with '/', received '${fieldPath}'`, !fieldPath.startsWith('/'));\n  assert(`buildBaseURL: fieldPath must NOT end with '/', received '${fieldPath}'`, !fieldPath.endsWith('/'));\n  assert(`buildBaseURL: idPath must NOT start with '/', received '${idPath}'`, !idPath.startsWith('/'));\n  assert(`buildBaseURL: idPath must NOT end with '/', received '${idPath}'`, !idPath.endsWith('/'));\n\n  const hasHost = host !== '' && host !== '/';\n  const url = [hasHost ? host : '', namespace, resourcePath, idPath, fieldPath].filter(Boolean).join('/');\n  return hasHost ? url : `/${url}`;\n}\n\nconst DEFAULT_QUERY_PARAMS_SERIALIZATION_OPTIONS: QueryParamsSerializationOptions = {\n  arrayFormat: 'comma',\n};\n\nfunction handleInclude(include: string | string[]): string[] {\n  assert(\n    `Expected include to be a string or array, got ${typeof include}`,\n    typeof include === 'string' || Array.isArray(include)\n  );\n  return typeof include === 'string' ? include.split(',') : include;\n}\n\n/**\n * filter out keys of an object that have falsy values or point to empty arrays\n * returning a new object with only those keys that have truthy values / non-empty arrays\n *\n * @method filterEmpty\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {Record<string, Serializable>} source object to filter keys with empty values from\n * @return {Record<string, Serializable>} A new object with the keys that contained empty values removed\n */\nexport function filterEmpty(source: Record<string, Serializable>): Record<string, Serializable> {\n  const result: Record<string, Serializable> = {};\n  for (const key in source) {\n    const value = source[key];\n    // Allow `0` and `false` but filter falsy values that indicate \"empty\"\n    if (value !== undefined && value !== null && value !== '') {\n      if (!Array.isArray(value) || value.length > 0) {\n        result[key] = source[key];\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Sorts query params by both key and value returning a new URLSearchParams\n * object with the keys inserted in sorted order.\n *\n * Treats `included` specially, splicing it into an array if it is a string and sorting the array.\n *\n * Options:\n * - arrayFormat: 'bracket' | 'indices' | 'repeat' | 'comma'\n *\n * 'bracket': appends [] to the key for every value e.g. `&ids[]=1&ids[]=2`\n * 'indices': appends [i] to the key for every value e.g. `&ids[0]=1&ids[1]=2`\n * 'repeat': appends the key for every value e.g. `&ids=1&ids=2`\n * 'comma' (default): appends the key once with a comma separated list of values e.g. `&ids=1,2`\n *\n * @method sortQueryParams\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {URLSearchParams | object} params\n * @param {object} options\n * @return {URLSearchParams} A URLSearchParams with keys inserted in sorted order\n */\nexport function sortQueryParams(params: QueryParamsSource, options?: QueryParamsSerializationOptions): URLSearchParams {\n  const opts = Object.assign({}, DEFAULT_QUERY_PARAMS_SERIALIZATION_OPTIONS, options);\n  const paramsIsObject = !(params instanceof URLSearchParams);\n  const urlParams = new URLSearchParams();\n  const dictionaryParams: Record<string, Serializable> = paramsIsObject ? params : {};\n\n  if (!paramsIsObject) {\n    params.forEach((value, key) => {\n      const hasExisting = key in dictionaryParams;\n      if (!hasExisting) {\n        dictionaryParams[key] = value;\n      } else {\n        const existingValue = dictionaryParams[key];\n        if (Array.isArray(existingValue)) {\n          existingValue.push(value);\n        } else {\n          dictionaryParams[key] = [existingValue, value];\n        }\n      }\n    });\n  }\n\n  if ('include' in dictionaryParams) {\n    dictionaryParams.include = handleInclude(dictionaryParams.include as string | string[]);\n  }\n\n  const sortedKeys = Object.keys(dictionaryParams).sort();\n  sortedKeys.forEach((key) => {\n    const value = dictionaryParams[key];\n    if (Array.isArray(value)) {\n      value.sort();\n      switch (opts.arrayFormat) {\n        case 'indices':\n          value.forEach((v, i) => {\n            urlParams.append(`${key}[${i}]`, String(v));\n          });\n          return;\n        case 'bracket':\n          value.forEach((v) => {\n            urlParams.append(`${key}[]`, String(v));\n          });\n          return;\n        case 'repeat':\n          value.forEach((v) => {\n            urlParams.append(key, String(v));\n          });\n          return;\n        case 'comma':\n        default:\n          urlParams.append(key, value.join(','));\n          return;\n      }\n    } else {\n      urlParams.append(key, String(value));\n    }\n  });\n\n  return urlParams;\n}\n\n/**\n * Sorts query params by both key and value, returning a query params string\n *\n * Treats `included` specially, splicing it into an array if it is a string and sorting the array.\n *\n * Options:\n * - arrayFormat: 'bracket' | 'indices' | 'repeat' | 'comma'\n *\n * 'bracket': appends [] to the key for every value e.g. `ids[]=1&ids[]=2`\n * 'indices': appends [i] to the key for every value e.g. `ids[0]=1&ids[1]=2`\n * 'repeat': appends the key for every value e.g. `ids=1&ids=2`\n * 'comma' (default): appends the key once with a comma separated list of values e.g. `ids=1,2`\n *\n * @method buildQueryParams\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {URLSearchParams | object} params\n * @param {object} [options]\n * @return {string} A sorted query params string without the leading `?`\n */\nexport function buildQueryParams(params: QueryParamsSource, options?: QueryParamsSerializationOptions): string {\n  return sortQueryParams(params, options).toString();\n}\nexport interface CacheControlValue {\n  immutable?: boolean;\n  'max-age'?: number;\n  'must-revalidate'?: boolean;\n  'must-understand'?: boolean;\n  'no-cache'?: boolean;\n  'no-store'?: boolean;\n  'no-transform'?: boolean;\n  'only-if-cached'?: boolean;\n  private?: boolean;\n  'proxy-revalidate'?: boolean;\n  public?: boolean;\n  's-maxage'?: number;\n  'stale-if-error'?: number;\n  'stale-while-revalidate'?: number;\n}\n\ntype CacheControlKey = keyof CacheControlValue;\n\nconst NUMERIC_KEYS = new Set(['max-age', 's-maxage', 'stale-if-error', 'stale-while-revalidate']);\n\n/**\n *  Parses a string Cache-Control header value into an object with the following structure:\n *\n * ```ts\n * interface CacheControlValue {\n *   immutable?: boolean;\n *   'max-age'?: number;\n *   'must-revalidate'?: boolean;\n *   'must-understand'?: boolean;\n *   'no-cache'?: boolean;\n *   'no-store'?: boolean;\n *   'no-transform'?: boolean;\n *   'only-if-cached'?: boolean;\n *   private?: boolean;\n *   'proxy-revalidate'?: boolean;\n *   public?: boolean;\n *   's-maxage'?: number;\n *   'stale-if-error'?: number;\n *   'stale-while-revalidate'?: number;\n * }\n * ```\n * @method parseCacheControl\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {string} header\n * @return {CacheControlValue}\n */\nexport function parseCacheControl(header: string): CacheControlValue {\n  let key: CacheControlKey = '' as CacheControlKey;\n  let value = '';\n  let isParsingKey = true;\n  const cacheControlValue: CacheControlValue = {};\n\n  function parseCacheControlValue(stringToParse: string): number {\n    const parsedValue = Number.parseInt(stringToParse);\n    assert(`Invalid Cache-Control value, expected a number but got - ${stringToParse}`, !Number.isNaN(parsedValue));\n    return parsedValue;\n  }\n\n  for (let i = 0; i < header.length; i++) {\n    const char = header.charAt(i);\n    if (char === ',') {\n      assert(`Invalid Cache-Control value, expected a value`, !isParsingKey || !NUMERIC_KEYS.has(key));\n      assert(\n        `Invalid Cache-Control value, expected a value after \"=\" but got \",\"`,\n        i === 0 || header.charAt(i - 1) !== '='\n      );\n      isParsingKey = true;\n      // @ts-expect-error TS incorrectly thinks that optional keys must have a type that includes undefined\n      cacheControlValue[key] = NUMERIC_KEYS.has(key) ? parseCacheControlValue(value) : true;\n      key = '' as CacheControlKey;\n      value = '';\n      continue;\n    } else if (char === '=') {\n      assert(`Invalid Cache-Control value, expected a value after \"=\"`, i + 1 !== header.length);\n      isParsingKey = false;\n    } else if (char === ' ' || char === `\\t` || char === `\\n`) {\n      continue;\n    } else if (isParsingKey) {\n      key += char;\n    } else {\n      value += char;\n    }\n\n    if (i === header.length - 1) {\n      // @ts-expect-error TS incorrectly thinks that optional keys must have a type that includes undefined\n      cacheControlValue[key] = NUMERIC_KEYS.has(key) ? parseCacheControlValue(value) : true;\n    }\n  }\n\n  return cacheControlValue;\n}\n\nfunction isStale(headers: Headers, expirationTime: number): boolean {\n  // const age = headers.get('age');\n  // const cacheControl = parseCacheControl(headers.get('cache-control') || '');\n  // const expires = headers.get('expires');\n  // const lastModified = headers.get('last-modified');\n  const date = headers.get('date');\n\n  if (!date) {\n    return true;\n  }\n\n  const time = new Date(date).getTime();\n  const now = Date.now();\n  const deadline = time + expirationTime;\n\n  const result = now > deadline;\n\n  return result;\n}\n\nexport type PolicyConfig = { apiCacheSoftExpires: number; apiCacheHardExpires: number };\n\n/**\n * A basic CachePolicy that can be added to the Store service.\n *\n * Determines staleness based on time since the request was last received from the API\n * using the `date` header.\n *\n * Invalidates any request for which `cacheOptions.types` was provided when a createRecord\n * request for that type is successful.\n *\n * For this to work, the `createRecord` request must include the `cacheOptions.types` array\n * with the types that should be invalidated, or its request should specify the identifiers\n * of the records that are being created via `records`. Providing both is valid.\n *\n * > [!NOTE]\n * > only requests that had specified `cacheOptions.types` and occurred prior to the\n * > createRecord request will be invalidated. This means that a given request should always\n * > specify the types that would invalidate it to opt into this behavior. Abstracting this\n * > behavior via builders is recommended to ensure consistency.\n *\n * This allows the Store's CacheHandler to determine if a request is expired and\n * should be refetched upon next request.\n *\n * The `Fetch` handler provided by `@ember-data/request/fetch` will automatically\n * add the `date` header to responses if it is not present.\n *\n * > [!NOTE]\n * > Date headers do not have millisecond precision, so expiration times should\n * > generally be larger than 1000ms.\n *\n * Usage:\n *\n * ```ts\n * import { CachePolicy } from '@ember-data/request-utils';\n * import DataStore from '@ember-data/store';\n *\n * // ...\n *\n * export class Store extends DataStore {\n *   constructor(args) {\n *     super(args);\n *     this.lifetimes = new CachePolicy({ apiCacheSoftExpires: 30_000, apiCacheHardExpires: 60_000 });\n *   }\n * }\n * ```\n *\n * @class CachePolicy\n * @public\n * @module @ember-data/request-utils\n */\nexport class CachePolicy {\n  declare config: PolicyConfig;\n  declare _stores: WeakMap<\n    Store,\n    { invalidated: Set<StableDocumentIdentifier>; types: Map<string, Set<StableDocumentIdentifier>> }\n  >;\n\n  _getStore(store: Store): {\n    invalidated: Set<StableDocumentIdentifier>;\n    types: Map<string, Set<StableDocumentIdentifier>>;\n  } {\n    let set = this._stores.get(store);\n    if (!set) {\n      set = { invalidated: new Set(), types: new Map() };\n      this._stores.set(store, set);\n    }\n    return set;\n  }\n\n  constructor(config: PolicyConfig) {\n    this._stores = new WeakMap();\n\n    const _config = arguments.length === 1 ? config : (arguments[1] as unknown as PolicyConfig);\n    deprecate(\n      `Passing a Store to the CachePolicy is deprecated, please pass only a config instead.`,\n      arguments.length === 1,\n      {\n        id: 'ember-data:request-utils:lifetimes-service-store-arg',\n        since: {\n          enabled: '5.4',\n          available: '4.13',\n        },\n        for: '@ember-data/request-utils',\n        until: '6.0',\n      }\n    );\n    assert(`You must pass a config to the CachePolicy`, _config);\n    assert(`You must pass a apiCacheSoftExpires to the CachePolicy`, typeof _config.apiCacheSoftExpires === 'number');\n    assert(`You must pass a apiCacheHardExpires to the CachePolicy`, typeof _config.apiCacheHardExpires === 'number');\n    this.config = _config;\n  }\n\n  /**\n   * Invalidate a request by its identifier for a given store instance.\n   *\n   * While the store argument may seem redundant, the CachePolicy\n   * is designed to be shared across multiple stores / forks\n   * of the store.\n   *\n   * ```ts\n   * store.lifetimes.invalidateRequest(store, identifier);\n   * ```\n   *\n   * @method invalidateRequest\n   * @public\n   * @param {StableDocumentIdentifier} identifier\n   * @param {Store} store\n   */\n  invalidateRequest(identifier: StableDocumentIdentifier, store: Store): void {\n    this._getStore(store).invalidated.add(identifier);\n  }\n\n  /**\n   * Invalidate all requests associated to a specific type\n   * for a given store instance.\n   *\n   * While the store argument may seem redundant, the CachePolicy\n   * is designed to be shared across multiple stores / forks\n   * of the store.\n   *\n   * This invalidation is done automatically when using this service\n   * for both the CacheHandler and the LegacyNetworkHandler.\n   *\n   * ```ts\n   * store.lifetimes.invalidateRequestsForType(store, 'person');\n   * ```\n   *\n   * @method invalidateRequestsForType\n   * @public\n   * @param {string} type\n   * @param {Store} store\n   */\n  invalidateRequestsForType(type: string, store: Store): void {\n    const storeCache = this._getStore(store);\n    const set = storeCache.types.get(type);\n    const notifications = store.notifications;\n\n    if (set) {\n      // TODO batch notifications\n      set.forEach((id) => {\n        storeCache.invalidated.add(id);\n        notifications.notify(id, 'invalidated');\n      });\n    }\n  }\n\n  /**\n   * Invoked when a request has been fulfilled from the configured request handlers.\n   * This is invoked by the CacheHandler for both foreground and background requests\n   * once the cache has been updated.\n   *\n   * Note, this is invoked by the CacheHandler regardless of whether\n   * the request has a cache-key.\n   *\n   * This method should not be invoked directly by consumers.\n   *\n   * @method didRequest\n   * @public\n   * @param {ImmutableRequestInfo} request\n   * @param {ImmutableResponse} response\n   * @param {Store} store\n   * @param {StableDocumentIdentifier | null} identifier\n   * @return {void}\n   */\n  didRequest(\n    request: ImmutableRequestInfo,\n    response: Response | ResponseInfo | null,\n    identifier: StableDocumentIdentifier | null,\n    store: Store\n  ): void {\n    // if this is a successful createRecord request, invalidate the cacheKey for the type\n    if (request.op === 'createRecord') {\n      const statusNumber = response?.status ?? 0;\n      if (statusNumber >= 200 && statusNumber < 400) {\n        const types = new Set(request.records?.map((r) => r.type));\n        const additionalTypes = request.cacheOptions?.types;\n        additionalTypes?.forEach((type) => {\n          types.add(type);\n        });\n\n        types.forEach((type) => {\n          this.invalidateRequestsForType(type, store);\n        });\n      }\n\n      // add this document's cacheKey to a map for all associated types\n      // it is recommended to only use this for queries\n    } else if (identifier && request.cacheOptions?.types?.length) {\n      const storeCache = this._getStore(store);\n      request.cacheOptions?.types.forEach((type) => {\n        const set = storeCache.types.get(type);\n        if (set) {\n          set.add(identifier);\n          storeCache.invalidated.delete(identifier);\n        } else {\n          storeCache.types.set(type, new Set([identifier]));\n        }\n      });\n    }\n  }\n\n  /**\n   * Invoked to determine if the request may be fulfilled from cache\n   * if possible.\n   *\n   * Note, this is only invoked by the CacheHandler if the request has\n   * a cache-key.\n   *\n   * If no cache entry is found or the entry is hard expired,\n   * the request will be fulfilled from the configured request handlers\n   * and the cache will be updated before returning the response.\n   *\n   * @method isHardExpired\n   * @public\n   * @param {StableDocumentIdentifier} identifier\n   * @param {Store} store\n   * @return {boolean} true if the request is considered hard expired\n   */\n  isHardExpired(identifier: StableDocumentIdentifier, store: Store): boolean {\n    // if we are explicitly invalidated, we are hard expired\n    const storeCache = this._getStore(store);\n    if (storeCache.invalidated.has(identifier)) {\n      return true;\n    }\n    const cache = store.cache;\n    const cached = cache.peekRequest(identifier);\n    return !cached || !cached.response || isStale(cached.response.headers, this.config.apiCacheHardExpires);\n  }\n\n  /**\n   * Invoked if `isHardExpired` is false to determine if the request\n   * should be update behind the scenes if cache data is already available.\n   *\n   * Note, this is only invoked by the CacheHandler if the request has\n   * a cache-key.\n   *\n   * If true, the request will be fulfilled from cache while a backgrounded\n   * request is made to update the cache via the configured request handlers.\n   *\n   * @method isSoftExpired\n   * @public\n   * @param {StableDocumentIdentifier} identifier\n   * @param {Store} store\n   * @return {boolean} true if the request is considered soft expired\n   */\n  isSoftExpired(identifier: StableDocumentIdentifier, store: Store): boolean {\n    const cache = store.cache;\n    const cached = cache.peekRequest(identifier);\n    return !cached || !cached.response || isStale(cached.response.headers, this.config.apiCacheSoftExpires);\n  }\n}\n\nexport class LifetimesService extends CachePolicy {\n  constructor(config: PolicyConfig) {\n    deprecate(\n      `\\`import { LifetimesService } from '@ember-data/request-utils';\\` is deprecated, please use \\`import { CachePolicy } from '@ember-data/request-utils';\\` instead.`,\n      false,\n      {\n        id: 'ember-data:deprecate-lifetimes-service-import',\n        since: {\n          enabled: '5.4',\n          available: '4.13',\n        },\n        for: 'ember-data',\n        until: '6.0',\n      }\n    );\n    super(config);\n  }\n}\n"],"names":["CONFIG","getOrSetGlobal","host","namespace","setBuildURLConfig","config","macroCondition","getGlobalConfig","WarpDrive","env","DEBUG","test","Error","endsWith","startsWith","OPERATIONS_WITH_PRIMARY_RECORDS","Set","isOperationWithPrimaryRecord","options","has","op","hasResourcePath","resourcePath","length","resourcePathForType","identifiers","type","identifier","buildBaseURL","urlOptions","Object","assign","Array","isArray","every","i","id","idPath","encodeURIComponent","fieldPath","String","join","includes","hasHost","url","filter","Boolean","DEFAULT_QUERY_PARAMS_SERIALIZATION_OPTIONS","arrayFormat","handleInclude","include","split","filterEmpty","source","result","key","value","undefined","sortQueryParams","params","opts","paramsIsObject","URLSearchParams","urlParams","dictionaryParams","forEach","hasExisting","existingValue","push","sortedKeys","keys","sort","v","append","buildQueryParams","toString","NUMERIC_KEYS","parseCacheControl","header","isParsingKey","cacheControlValue","parseCacheControlValue","stringToParse","parsedValue","Number","parseInt","isNaN","char","charAt","isStale","headers","expirationTime","date","get","time","Date","getTime","now","deadline","CachePolicy","_getStore","store","set","_stores","invalidated","types","Map","constructor","WeakMap","_config","arguments","deprecate","since","enabled","available","for","until","apiCacheSoftExpires","apiCacheHardExpires","invalidateRequest","add","invalidateRequestsForType","storeCache","notifications","notify","didRequest","request","response","statusNumber","status","records","map","r","additionalTypes","cacheOptions","delete","isHardExpired","cache","cached","peekRequest","isSoftExpired","LifetimesService"],"mappings":"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"}