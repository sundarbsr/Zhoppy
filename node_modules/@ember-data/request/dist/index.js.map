{"version":3,"file":"index.js","sources":["../src/-private/manager.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable no-irregular-whitespace */\n/**\n *\n  <p align=\"center\">\n  <img\n    class=\"project-logo\"\n    src=\"https://raw.githubusercontent.com/emberjs/data/4612c9354e4c54d53327ec2cf21955075ce21294/ember-data-logo-light.svg#gh-light-mode-only\"\n    alt=\"EmberData RequestManager\"\n    width=\"240px\"\n    title=\"EmberData RequestManager\"\n    />\n</p>\n\n<p align=\"center\">‚ö°Ô∏è a simple abstraction over fetch to enable easy management of request/response flows</p>\n\nThis package provides [*Ember*‚Äç**Data**](https://github.com/emberjs/data/)'s `RequestManager`, a framework agnostic library that can be integrated with any Javascript application to make [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) happen.\n\n- [Installation](#installation)\n- [Basic Usage](#üöÄ-basic-usage)\n- [Architecture](#ü™ú-architecture)\n- [Usage](#usage)\n  - [Making Requests](#making-requests)\n    - [Using The Response](#using-the-response)\n  - [Request Handlers](#handling-requests)\n    - [Handling Errors](#handling-errors)\n    - [Handling Abort](#handling-abort)\n    - [Stream Currying](#stream-currying)\n    - [Automatic Currying](#automatic-currying-of-stream-and-response)\n  - [Using as a Service](#using-as-a-service)\n    - [Using with `@ember-data/store`](#using-with-ember-datastore)\n    - [Using with `ember-data`](#using-with-ember-data)\n\n---\n\n## Installation\n\nInstall using your javascript package manager of choice. For instance with [pnpm](https://pnpm.io/)\n\n```no-highlight\npnpm add @ember-data/request\n```\n\n---\n\n## üöÄ Basic Usage\n\nA `RequestManager` provides a request/response flow in which configured handlers are successively given the opportunity to handle, modify, or pass-along a request.\n\nThe RequestManager on its own does not know how to fulfill requests. For this we must register at least one handler. A basic `Fetch` handler is provided that will take the request options provided and execute `fetch`.\n\n```ts\nimport RequestManager from '@ember-data/request';\nimport Fetch from '@ember-data/request/fetch';\nimport { apiUrl } from './config';\n\n// ... create manager and add our Fetch handler\nconst manager = new RequestManager()\n  .use([Fetch]);\n\n// ... execute a request\nconst response = await manager.request({\n  url: `${apiUrl}/users`\n});\n```\n\n---\n\n## ü™ú Architecture\n\nA `RequestManager` receives a request and manages fulfillment via configured handlers. It may be used standalone from the rest of *Ember*‚Äç**Data** and is not specific to any library or framework.\n\nEach handler may choose to fulfill the request using some source of data or to pass the request along to other handlers.\n\nThe same or a separate instance of a `RequestManager` may also be used to fulfill requests issued by [*Ember*‚Äç**Data**{Store}](https://github.com/emberjs/data/tree/main/packages/store)\n\nWhen the same instance is used by both this allows for simple coordination throughout the application. Requests issued by the Store will use the in-memory cache\nand return hydrated responses, requests issued directly to the RequestManager\nwill skip the in-memory cache and return raw responses.\n\n---\n\n## Usage\n\n```ts\nconst userList = await manager.request({\n  url: `/api/v1/users.list`\n});\n\nconst users = userList.content;\n```\n\n---\n\n### Making Requests\n\n`RequestManager` has a single asyncronous method as it's API: `request`\n\n```ts\nclass RequestManager {\n  request<T>(req: RequestInfo): Future<T>;\n}\n```\n\n`manager.request(<RequestInfo>)` accepts an object containing the information\nnecessary for the request to be handled successfully.\n\nThese options extend the [options](https://developer.mozilla.org/en-US/docs/Web/API/fetch#parameters) provided to `fetch`, and can accept a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request). All properties accepted by Request options and fetch options are valid.\n\n```ts\ninterface RequestInfo extends FetchOptions {\n  op?: string;\n  store?: Store;\n\n  url: string;\n   // data that a handler should convert into\n   // the query (GET) or body (POST)\n  data?: Record<string, unknown>;\n\n  // options specifically intended for handlers\n  // to utilize to process the request\n  options?: Record<string, unknown>;\n}\n```\n\n> **note**\n> providing a `signal` is unnecessary as an `AbortController` is automatically provided if none is present.\n\n---\n\n#### Using the Response\n\n`manager.request` returns a `Future`, which allows access to limited information about the request while it is still pending and fulfills with the final state when the request completes and the response has been read.\n\n```ts\nconst usersFuture = manager.request({\n  url: `/api/v1/users.list`\n});\n```\n\nA `Future` is cancellable via `abort`.\n\n```ts\nusersFuture.abort();\n```\n\nHandlers may *optionally* expose a ReadableStream to the `Future` for streaming data; however, when doing so the handler should not resolve until it has fully read the response stream itself.\n\n```ts\ninterface Future<T> extends Promise<StructuredDocument<T>> {\n  abort(): void;\n\n  async getStream(): ReadableStream | null;\n}\n```\n\nA Future resolves or rejects with a `StructuredDocument`.\n\n```ts\ninterface StructuredDocument<T> {\n  request: RequestInfo;\n  response: ResponseInfo | null;\n  content?: T;\n  error?: Error;\n}\n```\n\nThe `RequestInfo` specified by `document.request` is the same as originally provided to `manager.request`. If any handler fulfilled this request using different request info it is not represented here. This contract helps to ensure that `retry` and `caching` are possible since the original arguments are correctly preserved. This also allows handlers to \"fork\" the request or fulfill from multiple sources without the details of fulfillment muddying the original request.\n\nThe `ResponseInfo` is a serializable fulfilled subset of a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) if set via `setResponse`. If no response was ever set this will be `null`.\n\n```ts\ninterface ResponseInfo {\n  headers?: Record<string, string>;\n  ok?: boolean;\n  redirected?: boolean;\n  status?: HTTPStatusCode;\n  statusText?: string;\n  type?: 'basic' | 'cors';\n  url?: string;\n}\n```\n\n---\n\n### Request Handlers\n\nRequests are fulfilled by handlers. A handler receives the request context\nas well as a `next` function with which to pass along a request to the next\nhandler if it so chooses.\n\nA handler may be any object with a `request` method. This allows both stateful and non-stateful\nhandlers to be utilized.\n\nIf a handler calls `next`, it receives a `Future` which resolves to a `StructuredDocument`\nthat it can then compose how it sees fit with its own response.\n\n```ts\n\ntype NextFn<P> = (req: RequestInfo) => Future<P>;\n\ninterface Handler {\n  async request<T>(context: RequestContext, next: NextFn<P>): T;\n}\n```\n\n`RequestContext` contains a readonly version of the RequestInfo as well as a few methods for building up the `StructuredDocument` and `Future` that will be part of the response.\n\n```ts\ninterface RequestContext<T> {\n  readonly request: RequestInfo;\n\n  setStream(stream: ReadableStream | Promise<ReadableStream>): void;\n  setResponse(response: Response | ResponseInfo): void;\n}\n```\n\nA basic `fetch` handler with support for streaming content updates while\nthe download is still underway might look like the following, where we use\n[`response.clone()`](https://developer.mozilla.org/en-US/docs/Web/API/Response/clone) to `tee` the `ReadableStream` into two streams.\n\nA more efficient handler might read from the response stream, building up the\nresponse content before passing along the chunk downstream.\n\n```ts\nconst FetchHandler = {\n  async request(context) {\n    const response = await fetch(context.request);\n    context.setResponse(reponse);\n    context.setStream(response.clone().body);\n\n    return response.json();\n  }\n}\n```\n\nRequest handlers are registered by configuring the manager via `use`\n\n```ts\nmanager.use([Handler1, Handler2])\n```\n\nHandlers will be invoked in the order they are registered (\"fifo\", first-in first-out), and may only be registered up until the first request is made. It is recommended but not required to register all handlers at one time in order to ensure explicitly visible handler ordering.\n\n---\n\n#### Handling Errors\n\nEach handler in the chain can catch errors from upstream and choose to\neither handle the error, re-throw the error, or throw a new error.\n\n```ts\nconst MAX_RETRIES = 5;\n\nconst Handler = {\n  async request(context, next) {\n    let attempts = 0;\n\n    while (attempts < MAX_RETRIES) {\n      attempts++;\n      try {\n        const response = await next(context.request);\n        return response;\n      } catch (e) {\n        if (isTimeoutError(e) && attempts < MAX_RETRIES) {\n          // retry request\n          continue;\n        }\n        // rethrow if it is not a timeout error\n        throw e;\n      }\n    }\n  }\n}\n```\n\n---\n\n#### Handling Abort\n\nAborting a request will reject the current handler in the chain. However,\nevery handler can potentially catch this error. If your handler needs to\nseparate AbortError from other Error types, it is recommended to check\n`context.request.signal.aborted` (or if a custom controller was supplied `controller.signal.aborted`).\n\nIn this manner it is possible for a request to recover from an abort and\nstill proceed; however, as a best practice this should be used for necessary\ncleanup only and the original AbortError rethrown if the abort signal comes\nfrom the root controller.\n\n**AbortControllers are Always Present and Always Entangled**\n\nIf the initial request does not supply an [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController), one will be generated.\n\nThe [signal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) for this controller is automatically added to the request passed into the first handler.\n\nEach handler has the option to supply a new controller to the request when calling `next`. If a new controller is provided it will be automatically\nentangled with the root controller. If the root controller aborts, so will\nany entangled controllers.\n\nIf an entangled controller aborts, the root controller will not abort. This\nallows for advanced request-flow scenarios to abort subsections of the request tree without aborting the entire request.\n\n---\n\n#### Stream Currying\n\n`RequestManager.request` and `next` differ from `fetch` in one **crucial detail** in that the outer Promise resolves only once the response stream has been processed.\n\nFor context, it helps to understand a few of the use-cases that RequestManager\nis intended to allow.\n\n- to manage and return streaming content (such as video files)\n- to fulfill a request from multiple sources or by splitting one request into multiple requests\n  - for instance one API call for a user and another for the user's friends\n  - or e.g. fulfilling part of the request from one source (one API, in-memory, localStorage, IndexedDB\n   etc.) and the rest from another source (a different API, a WebWorker, etc.)\n- to coalesce multiple requests\n- to decorate a request with additional info\n  - e.g. an Auth handler that ensures the correct tokens or headers or cookies are attached.\n\n\n`await fetch(<req>)` resolves at the moment headers are received. This allows for the body of the request to be processed as a stream by application\ncode *while chunks are still being received by the browser*.\n\nWhen an app chooses to `await response.json()` what occurs is the browser reads the stream to completion and then returns the result. Additionally, this stream may only be read **once**.\n\nThe `RequestManager` preserves this ability to subscribe to and utilize the stream by either the application or the handler ‚Äì¬†thereby delivering the full power and flexibility of native APIs ‚Äì without restricting developers in ways that lead to complicated workarounds.\n\nEach handler may call `setStream` only once, but may do so *at any time* until the promise that the handler returns has resolved. The associated promise returned by calling `future.getStream` will resolve with the stream set by `setStream` if that method is called, or `null` if that method\nhas not been called by the time that the handler's request method has resolved.\n\nHandlers that do not create a stream of their own, but which call `next`, should defensively pipe the stream forward. While this is not required (see automatic currying below) it is better to do so in most cases as otherwise the stream may not become available to downstream handlers or the application until the upstream handler has fully read it.\n\n```ts\ncontext.setStream(future.getStream());\n```\n\nHandlers that either call `next` multiple times or otherwise have reason to create multiple  fetch requests should either choose to return no stream, meaningfully combine the streams, or select a single prioritized stream.\n\nOf course, any handler may choose to read and handle the stream, and return either no stream or a different stream in the process.\n\n---\n\n#### Automatic Currying of Stream and Response\n\nIn order to simplify the common case for handlers which decorate a request, if `next` is called only a single time and `setResponse` was never called by the handler, the response set by the next handler in the chain will be applied to that handler's outcome. For instance, this makes the following pattern possible `return (await next(<req>)).content;`.\n\nSimilarly, if `next` is called only a single time and neither `setStream` nor `getStream` was called, we automatically curry the stream from the future returned by `next` onto the future returned by the handler.\n\nFinally, if the return value of a handler is a `Future`, we curry `content` and `errors` as well, thus enabling the simplest form `return next(<req>)`.\n\nIn the case of the `Future` being returned, `Stream` proxying is automatic and immediate and does not wait for the `Future` to resolve.\n\n---\n\n### Using as a Service\n\nMost applications will desire to have a single `RequestManager` instance, which can be achieved using module-state patterns for singletons, or for [Ember](https://emberjs.com) applications by exporting the manager as a [service](https://guides.emberjs.com/release/services/).\n\n*services/request.ts*\n```ts\nimport RequestManager from '@ember-data/request';\nimport Fetch from '@ember-data/request/fetch';\nimport Auth from 'ember-simple-auth/ember-data-handler';\n\nexport default class extends RequestManager {\n  constructor(createArgs) {\n    super(createArgs);\n    this.use([Auth, Fetch]);\n  }\n}\n```\n\n---\n\n#### Using with `@ember-data/store`\n\nTo have a request service unique to a Store:\n\n```ts\nimport Store, { CacheHandler } from '@ember-data/store';\nimport RequestManager from '@ember-data/request';\nimport Fetch from '@ember-data/request/fetch';\n\nclass extends Store {\n  requestManager = new RequestManager()\n    .use([Fetch])\n    .useCache(CacheHandler);\n}\n```\n\n---\n\n#### Using with `ember-data`\n\nIf using the package [ember-data](https://github.com/emberjs/data/tree/main/packages/-ember-data),\nthe following configuration will automatically be done in order to preserve the\nlegacy [Adapter](https://github.com/emberjs/data/tree/main/packages/adapter) and\n[Serializer](https://github.com/emberjs/data/tree/main/packages/serializer) behavior.\nAdditional handlers or a service injection like the above would need to be done by the\nconsuming application in order to make broader use of `RequestManager`.\n\n```ts\nimport Store from 'ember-data/store';\nimport { CacheHandler } from '@ember-data/store';\nimport RequestManager from '@ember-data/request';\nimport Fetch from '@ember-data/request/fetch';\nimport { LegacyNetworkHandler } from '@ember-data/legacy-compat';\n\nexport default class extends Store {\n  requestManager = new RequestManager()\n    .use([LegacyNetworkHandler, Fetch])\n    .useCache(CacheHandler);\n}\n```\n\nTo provide a different configuration, import and extend `ember-data/store`. The\ndefault configuration will be ignored if the `requestManager` property is set,\nthough the store will still register the CacheHandler.\n\nFor usage of the store's `requestManager` via `store.request(<req>)` see the\n[Store](https://api.emberjs.com/ember-data/release/modules/@ember-data%2Fstore) documentation.\n\n *\n * @module @ember-data/request\n * @main @ember-data/request\n */\nimport { importSync } from '@embroider/macros';\n\nimport { DEBUG, TESTING } from '@warp-drive/build-config/env';\nimport { peekUniversalTransient, setUniversalTransient } from '@warp-drive/core-types/-private';\nimport type { StableDocumentIdentifier } from '@warp-drive/core-types/identifier';\nimport type { RequestInfo, StructuredErrorDocument } from '@warp-drive/core-types/request';\n\nimport { assertValidRequest } from './debug';\nimport { upgradePromise } from './future';\nimport { clearRequestResult, getRequestResult, setPromiseResult } from './promise-cache';\nimport type { CacheHandler, Future, GenericCreateArgs, Handler, ManagedRequestPriority } from './types';\nimport { executeNextHandler, IS_CACHE_HANDLER } from './utils';\n\n/**\n * ```js\n * import RequestManager from '@ember-data/request';\n * ```\n *\n * A RequestManager provides a request/response flow in which configured\n * handlers are successively given the opportunity to handle, modify, or\n * pass-along a request.\n *\n * ```ts\n * interface RequestManager {\n *   request<T>(req: RequestInfo): Future<T>;\n * }\n * ```\n *\n * For example:\n *\n * ```ts\n * import RequestManager from '@ember-data/request';\n * import Fetch from '@ember-data/request/fetch';\n * import Auth from 'ember-simple-auth/ember-data-handler';\n * import Config from './config';\n *\n * const { apiUrl } = Config;\n *\n * // ... create manager\n * const manager = new RequestManager().use([Auth, Fetch]);\n *\n * // ... execute a request\n * const response = await manager.request({\n *   url: `${apiUrl}/users`\n * });\n * ```\n *\n * ### Futures\n *\n * The return value of `manager.request` is a `Future`, which allows\n * access to limited information about the request while it is still\n * pending and fulfills with the final state when the request completes.\n *\n * A `Future` is cancellable via `abort`.\n *\n * Handlers may optionally expose a `ReadableStream` to the `Future` for\n * streaming data; however, when doing so the future should not resolve\n * until the response stream is fully read.\n *\n * ```ts\n * interface Future<T> extends Promise<StructuredDocument<T>> {\n *   abort(): void;\n *\n *   async getStream(): ReadableStream | null;\n * }\n * ```\n *\n * ### StructuredDocuments\n *\n * A Future resolves with a `StructuredDataDocument` or rejects with a `StructuredErrorDocument`.\n *\n * ```ts\n * interface StructuredDataDocument<T> {\n *   request: ImmutableRequestInfo;\n *   response: ImmutableResponseInfo;\n *   content: T;\n * }\n * interface StructuredErrorDocument extends Error {\n *   request: ImmutableRequestInfo;\n *   response: ImmutableResponseInfo;\n *   error: string | object;\n * }\n * type StructuredDocument<T> = StructuredDataDocument<T> | StructuredErrorDocument;\n * ```\n *\n * @class RequestManager\n * @public\n */\nexport class RequestManager {\n  #handlers: Handler[] = [];\n  declare _hasCacheHandler: boolean;\n  /**\n   * A map of pending requests from request.id to their\n   * associated CacheHandler promise.\n   *\n   * This queue is managed by the CacheHandler\n   *\n   * @internal\n   */\n  declare _pending: Map<number, Promise<unknown>>;\n  declare _deduped: Map<StableDocumentIdentifier, { priority: ManagedRequestPriority; promise: Promise<unknown> }>;\n\n  constructor(options?: GenericCreateArgs) {\n    Object.assign(this, options);\n    this._pending = new Map();\n    this._deduped = new Map();\n  }\n\n  /**\n   * Register a handler to use for primary cache intercept.\n   *\n   * Only one such handler may exist. If using the same\n   * RequestManager as the Store instance the Store\n   * registers itself as a Cache handler.\n   *\n   * @method useCache\n   * @public\n   * @param {Handler[]} cacheHandler\n   * @return {ThisType}\n   */\n  useCache(cacheHandler: CacheHandler & { [IS_CACHE_HANDLER]?: true }): this {\n    if (DEBUG) {\n      if (this._hasCacheHandler) {\n        throw new Error(`\\`RequestManager.useCache(<handler>)\\` May only be invoked once.`);\n      }\n      if (Object.isFrozen(this.#handlers)) {\n        throw new Error(\n          `\\`RequestManager.useCache(<handler>)\\` May only be invoked prior to any request having been made.`\n        );\n      }\n      this._hasCacheHandler = true;\n    }\n    cacheHandler[IS_CACHE_HANDLER] = true;\n    this.#handlers.unshift(cacheHandler as Handler);\n    return this;\n  }\n\n  /**\n   * Register handler(s) to use when a request is issued.\n   *\n   * Handlers will be invoked in the order they are registered.\n   * Each Handler is given the opportunity to handle the request,\n   * curry the request, or pass along a modified request.\n   *\n   * @method use\n   * @public\n   * @param {Handler[]} newHandlers\n   * @return {ThisType}\n   */\n  use(newHandlers: Handler[]): this {\n    const handlers = this.#handlers;\n    if (DEBUG) {\n      if (Object.isFrozen(handlers)) {\n        throw new Error(`Cannot add a Handler to a RequestManager after a request has been made`);\n      }\n      if (!Array.isArray(newHandlers)) {\n        throw new Error(\n          `\\`RequestManager.use(<Handler[]>)\\` expects an array of handlers, but was called with \\`${typeof newHandlers}\\``\n        );\n      }\n      newHandlers.forEach((handler, index) => {\n        if (!handler || typeof handler !== 'object' || typeof handler.request !== 'function') {\n          throw new Error(\n            `\\`RequestManager.use(<Handler[]>)\\` expected to receive an array of handler objects with request methods, by the handler at index ${index} does not conform.`\n          );\n        }\n      });\n    }\n    handlers.push(...newHandlers);\n    return this;\n  }\n\n  /**\n   * Issue a Request.\n   *\n   * Returns a Future that fulfills with a StructuredDocument\n   *\n   * @method request\n   * @public\n   * @param {RequestInfo} request\n   * @return {Future}\n   */\n  request<RT, T = unknown>(request: RequestInfo<T, RT>): Future<RT> {\n    const handlers = this.#handlers;\n    if (DEBUG) {\n      if (!Object.isFrozen(handlers)) {\n        Object.freeze(handlers);\n      }\n      assertValidRequest(request, true);\n    }\n\n    const controller = request.controller || new AbortController();\n    if (request.controller) {\n      delete request.controller;\n    }\n\n    const requestId = peekUniversalTransient<number>('REQ_ID') ?? 0;\n    setUniversalTransient('REQ_ID', requestId + 1);\n\n    const context = {\n      controller,\n      response: null,\n      stream: null,\n      hasRequestedStream: false,\n      id: requestId,\n      identifier: null,\n    };\n    const promise = executeNextHandler<RT>(handlers, request, 0, context);\n\n    // the cache handler will set the result of the request synchronously\n    // if it is able to fulfill the request from the cache\n    const cacheResult = getRequestResult(requestId);\n\n    if (TESTING) {\n      if (!request.disableTestWaiter) {\n        const { waitForPromise } = importSync('@ember/test-waiters') as {\n          waitForPromise: <PT>(promise: Promise<PT>) => Promise<PT>;\n        };\n        const newPromise = waitForPromise(promise);\n        const finalPromise = upgradePromise(\n          newPromise.then(\n            (result) => {\n              setPromiseResult(finalPromise, { isError: false, result });\n              clearRequestResult(requestId);\n              return result;\n            },\n            (error: StructuredErrorDocument) => {\n              setPromiseResult(finalPromise, { isError: true, result: error });\n              clearRequestResult(requestId);\n              throw error;\n            }\n          ),\n          promise\n        );\n\n        if (cacheResult) {\n          setPromiseResult(finalPromise, cacheResult);\n        }\n\n        return finalPromise;\n      }\n    }\n\n    // const promise1 = store.request(myRequest);\n    // const promise2 = store.request(myRequest);\n    // promise1 === promise2; // false\n    // either we need to make promise1 === promise2, or we need to make sure that\n    // we need to have a way to key from request to result\n    // such that we can lookup the result here and return it if it exists\n    const finalPromise = upgradePromise(\n      promise.then(\n        (result) => {\n          setPromiseResult(finalPromise, { isError: false, result });\n          clearRequestResult(requestId);\n          return result;\n        },\n        (error: StructuredErrorDocument) => {\n          setPromiseResult(finalPromise, { isError: true, result: error });\n          clearRequestResult(requestId);\n          throw error;\n        }\n      ),\n      promise\n    );\n\n    if (cacheResult) {\n      setPromiseResult(finalPromise, cacheResult);\n    }\n\n    return finalPromise;\n  }\n\n  static create(options?: GenericCreateArgs) {\n    return new this(options);\n  }\n}\n","import { getRuntimeConfig, setLogging } from '@warp-drive/core-types/runtime';\n\nexport { RequestManager as default } from './-private/manager';\nexport { createDeferred } from './-private/future';\nexport type { Future, Handler, CacheHandler, NextFn } from './-private/types';\nexport type {\n  RequestContext,\n  ImmutableRequestInfo,\n  RequestInfo,\n  ResponseInfo,\n  StructuredDocument,\n  StructuredErrorDocument,\n  StructuredDataDocument,\n} from '@warp-drive/core-types/request';\nexport { setPromiseResult, getPromiseResult } from './-private/promise-cache';\nexport type { Awaitable } from './-private/promise-cache';\n\n// @ts-expect-error adding to globalThis\nglobalThis.setWarpDriveLogging = setLogging;\n\n// @ts-expect-error adding to globalThis\nglobalThis.getWarpDriveRuntimeConfig = getRuntimeConfig;\n"],"names":["RequestManager","constructor","options","Object","assign","_pending","Map","_deduped","useCache","cacheHandler","macroCondition","getGlobalConfig","WarpDrive","env","DEBUG","_hasCacheHandler","Error","isFrozen","IS_CACHE_HANDLER","unshift","use","newHandlers","handlers","Array","isArray","forEach","handler","index","request","push","freeze","assertValidRequest","controller","AbortController","requestId","peekUniversalTransient","setUniversalTransient","context","response","stream","hasRequestedStream","id","identifier","promise","executeNextHandler","cacheResult","getRequestResult","TESTING","disableTestWaiter","waitForPromise","importSync","newPromise","finalPromise","upgradePromise","then","result","setPromiseResult","isError","clearRequestResult","error","create","globalThis","setWarpDriveLogging","setLogging","getWarpDriveRuntimeConfig","getRuntimeConfig"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,cAAc,CAAC;EAC1B,SAAS,GAAc,EAAE;;AAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAIEC,WAAWA,CAACC,OAA2B,EAAE;AACvCC,IAAAA,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEF,OAAO,CAAC;AAC5B,IAAA,IAAI,CAACG,QAAQ,GAAG,IAAIC,GAAG,EAAE;AACzB,IAAA,IAAI,CAACC,QAAQ,GAAG,IAAID,GAAG,EAAE;AAC3B;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,QAAQA,CAACC,YAA0D,EAA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"}