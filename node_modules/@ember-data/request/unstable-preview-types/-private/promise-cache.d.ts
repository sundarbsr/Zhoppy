declare module '@ember-data/request/-private/promise-cache' {
  export type CacheResult<T = unknown, E = unknown> = {
      isError: true;
      result: E;
  } | {
      isError: false;
      result: T;
  };
  export type Awaitable<T = unknown, E = unknown> = {
      then: (onFulfilled: (value: T) => unknown, onRejected: (reason: E) => unknown) => unknown;
      catch: (onRejected: (reason: E) => unknown) => unknown;
      finally: (onFinally: () => unknown) => unknown;
  };
  export const PromiseCache: WeakMap<Awaitable<unknown, unknown>, CacheResult<unknown, unknown>>;
  export const RequestMap: Map<number, CacheResult<unknown, unknown>>;
  export function setRequestResult(requestId: number, result: CacheResult): void;
  export function clearRequestResult(requestId: number): void;
  export function getRequestResult(requestId: number): CacheResult | undefined;
  export function setPromiseResult(promise: Promise<unknown> | Awaitable, result: CacheResult): void;
  export function getPromiseResult<T, E>(promise: Promise<T> | Awaitable<T, E>): CacheResult<T, E> | undefined;
}
//# sourceMappingURL=promise-cache.d.ts.map