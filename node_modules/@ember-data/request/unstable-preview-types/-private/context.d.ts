declare module '@ember-data/request/-private/context' {
  import type { StableDocumentIdentifier } from '@warp-drive/core-types/identifier';
  import type { ImmutableHeaders, ImmutableRequestInfo, RequestInfo, ResponseInfo } from '@warp-drive/core-types/request';
  import type { DeferredStream, GodContext } from '@ember-data/request/-private/types';
  export function upgradeHeaders(headers: Headers | ImmutableHeaders): ImmutableHeaders;
  export function cloneResponseProperties(response: Response): ResponseInfo;
  export class ContextOwner {
      hasSetStream: boolean;
      hasSetResponse: boolean;
      hasSubscribers: boolean;
      stream: DeferredStream;
      response: ResponseInfo | null;
      request: ImmutableRequestInfo;
      enhancedRequest: ImmutableRequestInfo;
      nextCalled: number;
      god: GodContext;
      controller: AbortController;
      requestId: number;
      isRoot: boolean;
      constructor(request: RequestInfo, god: GodContext, isRoot?: boolean);
      get hasRequestedStream(): boolean;
      getResponse(): ResponseInfo | null;
      getStream(): Promise<ReadableStream | null>;
      abort(reason: DOMException): void;
      setStream(stream: ReadableStream | Promise<ReadableStream | null> | null): void;
      resolveStream(): void;
      setResponse(response: ResponseInfo | Response | null): void;
  }
  export class Context {
      #private;
      request: ImmutableRequestInfo;
      id: number;
      private _isCacheHandler;
      private _finalized;
      constructor(owner: ContextOwner, isCacheHandler: boolean);
      setStream(stream: ReadableStream | Promise<ReadableStream | null>): void;
      setResponse(response: ResponseInfo | Response | null): void;
      setIdentifier(identifier: StableDocumentIdentifier): void;
      get hasRequestedStream(): boolean;
      _finalize(): void;
  }
  export type HandlerRequestContext = Context;
}
//# sourceMappingURL=context.d.ts.map