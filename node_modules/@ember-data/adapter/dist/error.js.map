{"version":3,"file":"error.js","sources":["../src/error.js"],"sourcesContent":["/**\n  @module @ember-data/adapter/error\n */\nimport { assert } from '@warp-drive/build-config/macros';\nimport { getOrSetGlobal } from '@warp-drive/core-types/-private';\n\n/**\n  ## Overview\n\n  <blockquote style=\"margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;\">\n  <p>\n    ⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.\n    If starting a new app or thinking of implementing a new adapter, consider writing a\n    <a href=\"/ember-data/release/classes/%3CInterface%3E%20Handler\">Handler</a> instead to be used with the <a href=\"https://github.com/emberjs/data/tree/main/packages/request#readme\">RequestManager</a>\n  </p>\n  </blockquote>\n\n  An `AdapterError` is used by an adapter to signal that an error occurred\n  during a request to an external API. It indicates a generic error, and\n  subclasses are used to indicate specific error states.\n\n  To create a custom error to signal a specific error state in communicating\n  with an external API, extend the `AdapterError`. For example, if the\n  external API exclusively used HTTP `503 Service Unavailable` to indicate\n  it was closed for maintenance:\n\n  ```app/adapters/maintenance-error.js\n  import AdapterError from '@ember-data/adapter/error';\n\n  export default AdapterError.extend({ message: \"Down for maintenance.\" });\n  ```\n\n  This error would then be returned by an adapter's `handleResponse` method:\n\n  ```app/adapters/application.js\n  import JSONAPIAdapter from '@ember-data/adapter/json-api';\n  import MaintenanceError from './maintenance-error';\n\n  export default class ApplicationAdapter extends JSONAPIAdapter {\n    handleResponse(status) {\n      if (503 === status) {\n        return new MaintenanceError();\n      }\n\n      return super.handleResponse(...arguments);\n    }\n  }\n  ```\n\n  And can then be detected in an application and used to send the user to an\n  `under-maintenance` route:\n\n  ```app/routes/application.js\n  import MaintenanceError from '../adapters/maintenance-error';\n\n  export default class ApplicationRoute extends Route {\n    actions: {\n      error(error, transition) {\n        if (error instanceof MaintenanceError) {\n          this.transitionTo('under-maintenance');\n          return;\n        }\n\n        // ...other error handling logic\n      }\n    }\n  }\n  ```\n\n  @main @ember-data/adapter/error\n  @class AdapterError\n  @public\n*/\nfunction _AdapterError(errors, message = 'Adapter operation failed') {\n  this.isAdapterError = true;\n  const error = Error.call(this, message);\n\n  if (error) {\n    this.stack = error.stack;\n    this.description = error.description;\n    this.fileName = error.fileName;\n    this.lineNumber = error.lineNumber;\n    this.message = error.message;\n    this.name = error.name;\n    this.number = error.number;\n  }\n\n  this.errors = errors || [\n    {\n      title: 'Adapter Error',\n      detail: message,\n    },\n  ];\n}\n\n_AdapterError.prototype = Object.create(Error.prototype);\n_AdapterError.prototype.code = 'AdapterError';\n_AdapterError.extend = extendFn(_AdapterError);\n\nconst AdapterError = getOrSetGlobal('AdapterError', _AdapterError);\n\nexport default AdapterError;\n\nfunction extendFn(ErrorClass) {\n  return function ({ message: defaultMessage } = {}) {\n    return extend(ErrorClass, defaultMessage);\n  };\n}\n\nfunction extend(ParentErrorClass, defaultMessage) {\n  const ErrorClass = function (errors, message) {\n    assert('`AdapterError` expects json-api formatted errors array.', Array.isArray(errors || []));\n    ParentErrorClass.call(this, errors, message || defaultMessage);\n  };\n  ErrorClass.prototype = Object.create(ParentErrorClass.prototype);\n  ErrorClass.extend = extendFn(ErrorClass);\n\n  return ErrorClass;\n}\n\n/**\n  A `InvalidError` is used by an adapter to signal the external API\n  was unable to process a request because the content was not\n  semantically correct or meaningful per the API. Usually, this means a\n  record failed some form of server-side validation. When a promise\n  from an adapter is rejected with a `InvalidError` the record will\n  transition to the `invalid` state and the errors will be set to the\n  `errors` property on the record.\n\n  For Ember Data to correctly map errors to their corresponding\n  properties on the model, Ember Data expects each error to be\n  a valid JSON-API error object with a `source/pointer` that matches\n  the property name. For example, if you had a Post model that\n  looked like this.\n\n  ```app/models/post.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @attr('string') title;\n    @attr('string') content;\n  }\n  ```\n\n  To show an error from the server related to the `title` and\n  `content` properties your adapter could return a promise that\n  rejects with a `InvalidError` object that looks like this:\n\n  ```app/adapters/post.js\n  import RSVP from 'RSVP';\n  import RESTAdapter from '@ember-data/adapter/rest';\n  import { InvalidError } from '@ember-data/adapter/error';\n\n  export default class ApplicationAdapter extends RESTAdapter {\n    updateRecord() {\n      // Fictional adapter that always rejects\n      return RSVP.reject(new InvalidError([\n        {\n          detail: 'Must be unique',\n          source: { pointer: '/data/attributes/title' }\n        },\n        {\n          detail: 'Must not be blank',\n          source: { pointer: '/data/attributes/content'}\n        }\n      ]));\n    }\n  }\n  ```\n\n  Your backend may use different property names for your records the\n  store will attempt to extract and normalize the errors using the\n  serializer's `extractErrors` method before the errors get added to\n  the model. As a result, it is safe for the `InvalidError` to\n  wrap the error payload unaltered.\n\n  @class InvalidError\n  @public\n  @extends AdapterError\n*/\n// TODO @deprecate extractError documentation\nexport const InvalidError = getOrSetGlobal(\n  'InvalidError',\n  extend(AdapterError, 'The adapter rejected the commit because it was invalid')\n);\nInvalidError.prototype.code = 'InvalidError';\n\n/**\n  A `TimeoutError` is used by an adapter to signal that a request\n  to the external API has timed out. I.e. no response was received from\n  the external API within an allowed time period.\n\n  An example use case would be to warn the user to check their internet\n  connection if an adapter operation has timed out:\n\n  ```app/routes/application.js\n  import { TimeoutError } from '@ember-data/adapter/error';\n\n  export default class ApplicationRoute extends Route {\n    @action\n    error(error, transition) {\n      if (error instanceof TimeoutError) {\n        // alert the user\n        alert('Are you still connected to the Internet?');\n        return;\n      }\n\n      // ...other error handling logic\n    }\n  }\n  ```\n\n  @class TimeoutError\n  @public\n  @extends AdapterError\n*/\nexport const TimeoutError = getOrSetGlobal('TimeoutError', extend(AdapterError, 'The adapter operation timed out'));\nTimeoutError.prototype.code = 'TimeoutError';\n\n/**\n  A `AbortError` is used by an adapter to signal that a request to\n  the external API was aborted. For example, this can occur if the user\n  navigates away from the current page after a request to the external API\n  has been initiated but before a response has been received.\n\n  @class AbortError\n  @public\n  @extends AdapterError\n*/\nexport const AbortError = getOrSetGlobal('AbortError', extend(AdapterError, 'The adapter operation was aborted'));\nAbortError.prototype.code = 'AbortError';\n\n/**\n  A `UnauthorizedError` equates to a HTTP `401 Unauthorized` response\n  status. It is used by an adapter to signal that a request to the external\n  API was rejected because authorization is required and has failed or has not\n  yet been provided.\n\n  An example use case would be to redirect the user to a login route if a\n  request is unauthorized:\n\n  ```app/routes/application.js\n  import { UnauthorizedError } from '@ember-data/adapter/error';\n\n  export default class ApplicationRoute extends Route {\n    @action\n    error(error, transition) {\n      if (error instanceof UnauthorizedError) {\n        // go to the login route\n        this.transitionTo('login');\n        return;\n      }\n\n      // ...other error handling logic\n    }\n  }\n  ```\n\n  @class UnauthorizedError\n  @public\n  @extends AdapterError\n*/\nexport const UnauthorizedError = getOrSetGlobal(\n  'UnauthorizedError',\n  extend(AdapterError, 'The adapter operation is unauthorized')\n);\nUnauthorizedError.prototype.code = 'UnauthorizedError';\n\n/**\n  A `ForbiddenError` equates to a HTTP `403 Forbidden` response status.\n  It is used by an adapter to signal that a request to the external API was\n  valid but the server is refusing to respond to it. If authorization was\n  provided and is valid, then the authenticated user does not have the\n  necessary permissions for the request.\n\n  @class ForbiddenError\n  @public\n  @extends AdapterError\n*/\nexport const ForbiddenError = getOrSetGlobal(\n  'ForbiddenError',\n  extend(AdapterError, 'The adapter operation is forbidden')\n);\nForbiddenError.prototype.code = 'ForbiddenError';\n\n/**\n  A `NotFoundError` equates to a HTTP `404 Not Found` response status.\n  It is used by an adapter to signal that a request to the external API\n  was rejected because the resource could not be found on the API.\n\n  An example use case would be to detect if the user has entered a route\n  for a specific model that does not exist. For example:\n\n  ```app/routes/post.js\n  import { NotFoundError } from '@ember-data/adapter/error';\n\n  export default class PostRoute extends Route {\n    @service store;\n    model(params) {\n      return this.store.findRecord('post', params.post_id);\n    }\n    @action\n    error(error, transition) {\n      if (error instanceof NotFoundError) {\n        // redirect to a list of all posts instead\n        this.transitionTo('posts');\n      } else {\n        // otherwise let the error bubble\n        return true;\n      }\n    }\n  }\n  ```\n\n  @class NotFoundError\n  @public\n  @extends AdapterError\n*/\nexport const NotFoundError = getOrSetGlobal(\n  'NotFoundError',\n  extend(AdapterError, 'The adapter could not find the resource')\n);\nNotFoundError.prototype.code = 'NotFoundError';\n\n/**\n  A `ConflictError` equates to a HTTP `409 Conflict` response status.\n  It is used by an adapter to indicate that the request could not be processed\n  because of a conflict in the request. An example scenario would be when\n  creating a record with a client-generated ID but that ID is already known\n  to the external API.\n\n  @class ConflictError\n  @public\n  @extends AdapterError\n*/\nexport const ConflictError = getOrSetGlobal(\n  'ConflictError',\n  extend(AdapterError, 'The adapter operation failed due to a conflict')\n);\nConflictError.prototype.code = 'ConflictError';\n\n/**\n  A `ServerError` equates to a HTTP `500 Internal Server Error` response\n  status. It is used by the adapter to indicate that a request has failed\n  because of an error in the external API.\n\n  @class ServerError\n  @public\n  @extends AdapterError\n*/\nexport const ServerError = getOrSetGlobal(\n  'ServerError',\n  extend(AdapterError, 'The adapter operation failed due to a server error')\n);\nServerError.prototype.code = 'ServerError';\n"],"names":["_AdapterError","errors","message","isAdapterError","error","Error","call","stack","description","fileName","lineNumber","name","number","title","detail","prototype","Object","create","code","extend","extendFn","AdapterError","getOrSetGlobal","ErrorClass","defaultMessage","ParentErrorClass","macroCondition","getGlobalConfig","WarpDrive","env","DEBUG","test","Array","isArray","InvalidError","TimeoutError","AbortError","UnauthorizedError","ForbiddenError","NotFoundError","ConflictError","ServerError"],"mappings":"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;AAChHe,UAAU,CAACrB,SAAS,CAACG,IAAI,GAAG,YAAY;;AAExC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACamB,MAAAA,iBAAiB,GAAGf,cAAc,CAC7C,mBAAmB,EACnBH,MAAM,CAACE,YAAY,EAAE,uCAAuC,CAC9D;AACAgB,iBAAiB,CAACtB,SAAS,CAACG,IAAI,GAAG,mBAAmB;;AAEtD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACaoB,MAAAA,cAAc,GAAGhB,cAAc,CAC1C,gBAAgB,EAChBH,MAAM,CAACE,YAAY,EAAE,oCAAoC,CAC3D;AACAiB,cAAc,CAACvB,SAAS,CAACG,IAAI,GAAG,gBAAgB;;AAEhD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACaqB,MAAAA,aAAa,GAAGjB,cAAc,CACzC,eAAe,EACfH,MAAM,CAACE,YAAY,EAAE,yCAAyC,CAChE;AACAkB,aAAa,CAACxB,SAAS,CAACG,IAAI,GAAG,eAAe;;AAE9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACasB,MAAAA,aAAa,GAAGlB,cAAc,CACzC,eAAe,EACfH,MAAM,CAACE,YAAY,EAAE,gDAAgD,CACvE;AACAmB,aAAa,CAACzB,SAAS,CAACG,IAAI,GAAG,eAAe;;AAE9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACauB,MAAAA,WAAW,GAAGnB,cAAc,CACvC,aAAa,EACbH,MAAM,CAACE,YAAY,EAAE,oDAAoD,CAC3E;AACAoB,WAAW,CAAC1B,SAAS,CAACG,IAAI,GAAG,aAAa;;;;"}