declare module '@ember-data/adapter/-private/build-url-mixin' {
  import Mixin from '@ember/object/mixin';
  import type { Snapshot, SnapshotRecordArray } from '@ember-data/legacy-compat/-private';
  /**
    @module @ember-data/adapter
  */
  export interface BuildURLMixin {
      buildURL(this: MixtBuildURLMixin, modelName: string, id: string, snapshot: Snapshot, requestType: 'findRecord'): string;
      buildURL(this: MixtBuildURLMixin, modelName: string, id: null, snapshot: SnapshotRecordArray, requestType: 'findAll'): string;
      buildURL(this: MixtBuildURLMixin, modelName: string, id: null, snapshot: null, requestType: 'query', query: Record<string, unknown>): string;
      buildURL(this: MixtBuildURLMixin, modelName: string, id: null, snapshot: null, requestType: 'queryRecord', query: Record<string, unknown>): string;
      buildURL(this: MixtBuildURLMixin, modelName: string, id: string[], snapshot: Snapshot[], requestType: 'findMany'): string;
      buildURL(this: MixtBuildURLMixin, modelName: string, id: string, snapshot: Snapshot, requestType: 'findHasMany'): string;
      buildURL(this: MixtBuildURLMixin, modelName: string, id: string, snapshot: Snapshot, requestType: 'findBelongsTo'): string;
      buildURL(this: MixtBuildURLMixin, modelName: string, id: string | null, snapshot: Snapshot, requestType: 'createRecord'): string;
      buildURL(this: MixtBuildURLMixin, modelName: string, id: string, snapshot: Snapshot, requestType: 'updateRecord'): string;
      buildURL(this: MixtBuildURLMixin, modelName: string, id: string, snapshot: Snapshot, requestType: 'deleteRecord'): string;
      buildURL(this: MixtBuildURLMixin, modelName: string, id: string, snapshot: Snapshot): string;
      _buildURL(this: MixtBuildURLMixin, modelName: string | null | undefined, id?: string | null): string;
      urlForFindRecord(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string;
      urlForFindAll(this: MixtBuildURLMixin, modelName: string, snapshots: SnapshotRecordArray): string;
      urlForQueryRecord(this: MixtBuildURLMixin, query: Record<string, unknown>, modelName: string): string;
      urlForQuery(this: MixtBuildURLMixin, query: Record<string, unknown>, modelName: string): string;
      urlForFindMany(this: MixtBuildURLMixin, ids: string[], modelName: string, snapshots: Snapshot[]): string;
      urlForFindHasMany(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string;
      urlForFindBelongsTo(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string;
      urlForCreateRecord(this: MixtBuildURLMixin, modelName: string, snapshot: Snapshot): string;
      urlForUpdateRecord(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string;
      urlForDeleteRecord(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string;
      urlPrefix(this: MixtBuildURLMixin, path?: string | null, parentURL?: string): string;
      pathForType(this: MixtBuildURLMixin, modelName: string): string;
  }
  export interface MixtBuildURLMixin extends BuildURLMixin {
      host: string | null;
      namespace: string | null;
  }
  export const BuildURLMixin: Mixin;
}
//# sourceMappingURL=build-url-mixin.d.ts.map