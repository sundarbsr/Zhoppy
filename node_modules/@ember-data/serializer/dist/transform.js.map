{"version":3,"file":"transform.js","sources":["../src/-private/transforms/transform.ts","../src/-private/transforms/boolean.ts","../src/-private/transforms/date.ts","../src/-private/transforms/number.ts","../src/-private/transforms/string.ts"],"sourcesContent":["/**\n  @module @ember-data/serializer\n*/\nimport EmberObject from '@ember/object';\n\nimport type { LegacyAttributeField } from '@warp-drive/core-types/schema/fields';\n\n/**\n  The `Transform` class is used to serialize and deserialize model\n  attributes when they are saved or loaded from an\n  adapter. Subclassing `Transform` is useful for creating custom\n  attributes. All subclasses of `Transform` must implement a\n  `serialize` and a `deserialize` method.\n\n  Example\n\n  ```app/transforms/temperature.js\n\n  // Converts centigrade in the JSON to fahrenheit in the app\n  export default class TemperatureTransform {\n    deserialize(serialized, options) {\n      return (serialized *  1.8) + 32;\n    }\n\n    serialize(deserialized, options) {\n      return (deserialized - 32) / 1.8;\n    }\n\n    static create() {\n      return new this();\n    }\n  }\n  ```\n\n  Usage\n\n  ```app/models/requirement.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class RequirementModel extends Model {\n    @attr('string') name;\n    @attr('temperature') temperature;\n  }\n  ```\n\n  The options passed into the `attr` function when the attribute is\n  declared on the model is also available in the transform.\n\n  ```app/models/post.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @attr('string') title;\n    @attr('markdown', {\n      markdown: {\n        gfm: false,\n        sanitize: true\n      }\n    })\n    markdown;\n  }\n  ```\n\n  ```app/transforms/markdown.js\n  export default class MarkdownTransform {\n    serialize(deserialized, options) {\n      return deserialized.raw;\n    }\n\n    deserialize(serialized, options) {\n      let markdownOptions = options.markdown || {};\n\n      return marked(serialized, markdownOptions);\n    }\n\n    static create() {\n      return new this();\n    }\n  }\n  ```\n\n  @class Transform\n  @public\n */\n/**\n  When given a deserialized value from a record attribute this\n  method must return the serialized value.\n\n  Example\n\n  ```javascript\n  serialize(deserialized, options) {\n    return deserialized ? null : Number(deserialized);\n  }\n  ```\n\n  @method serialize\n  @public\n  @param deserialized The deserialized value\n  @param options hash of options passed to `attr`\n  @return The serialized value\n*/\n/**\n  When given a serialized value from a JSON object this method must\n  return the deserialized value for the record attribute.\n\n  Example\n\n  ```javascript\n  deserialize(serialized, options) {\n    return empty(serialized) ? null : Number(serialized);\n  }\n  ```\n\n  @method deserialize\n  @public\n  @param serialized The serialized value\n  @param options hash of options passed to `attr`\n  @return The deserialized value\n*/\nexport interface Transform {\n  serialize(value: unknown, options: LegacyAttributeField['options']): unknown;\n  deserialize(value: unknown, options: LegacyAttributeField['options']): unknown;\n}\nexport const Transform = EmberObject;\n","/**\n  @module @ember-data/serializer\n*/\n\nimport type { TransformName } from '@warp-drive/core-types/symbols';\n\n/**\n  The `BooleanTransform` class is used to serialize and deserialize\n  boolean attributes on Ember Data record objects. This transform is\n  used when `boolean` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('boolean') isAdmin;\n    @attr('string') name;\n    @attr('string') email;\n  }\n  ```\n\n  By default, the boolean transform only allows for values of `true` or\n  `false`. You can opt into allowing `null` values for\n  boolean attributes via `attr('boolean', { allowNull: true })`\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('string') email;\n    @attr('string') username;\n    @attr('boolean', { allowNull: true }) wantsWeeklyEmail;\n  }\n  ```\n\n  @class BooleanTransform\n  @public\n */\nexport class BooleanTransform {\n  deserialize(serialized: boolean | null | number | string, options?: { allowNull?: boolean }): boolean | null {\n    if ((serialized === null || serialized === undefined) && options?.allowNull === true) {\n      return null;\n    }\n\n    if (typeof serialized === 'boolean') {\n      return serialized;\n    } else if (typeof serialized === 'string') {\n      return /^(true|t|1)$/i.test(serialized);\n    } else if (typeof serialized === 'number') {\n      return serialized === 1;\n    } else {\n      return false;\n    }\n  }\n\n  serialize(deserialized: boolean | null, options?: { allowNull?: boolean }): boolean | null {\n    if ((deserialized === null || deserialized === undefined) && options?.allowNull === true) {\n      return null;\n    }\n\n    return Boolean(deserialized);\n  }\n\n  declare [TransformName]: 'boolean';\n\n  static create() {\n    return new this();\n  }\n}\n","/**\n  @module @ember-data/serializer\n*/\n\nimport { TransformName } from '@warp-drive/core-types/symbols';\n\n/**\n The `DateTransform` class is used to serialize and deserialize\n date attributes on Ember Data record objects. This transform is used\n when `date` is passed as the type parameter to the\n [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function. It uses the [`ISO 8601`](https://en.wikipedia.org/wiki/ISO_8601)\n standard.\n\n ```app/models/score.js\n import Model, { attr, belongsTo } from '@ember-data/model';\n\n export default class ScoreModel extends Model {\n    @attr('number') value;\n    @belongsTo('player') player;\n    @attr('date') date;\n  }\n ```\n\n @class DateTransform\n  @public\n */\n\nexport class DateTransform {\n  deserialize(serialized: string | number | null, _options?: Record<string, unknown>) {\n    if (typeof serialized === 'string') {\n      let offset = serialized.indexOf('+');\n\n      if (offset !== -1 && serialized.length - 5 === offset) {\n        offset += 3;\n        return new Date(serialized.slice(0, offset) + ':' + serialized.slice(offset));\n      }\n      return new Date(serialized);\n    } else if (typeof serialized === 'number') {\n      return new Date(serialized);\n    } else if (serialized === null || serialized === undefined) {\n      // if the value is null return null\n      // if the value is not present in the data return undefined\n      return serialized;\n    } else {\n      return null;\n    }\n  }\n\n  serialize(date: Date, _options?: Record<string, unknown>): string | null {\n    // @ts-expect-error isNaN accepts date as it is coercible\n    if (date instanceof Date && !isNaN(date)) {\n      return date.toISOString();\n    } else {\n      return null;\n    }\n  }\n\n  [TransformName] = 'date' as const;\n\n  static create() {\n    return new this();\n  }\n}\n","/**\n  @module @ember-data/serializer\n*/\n\nimport { TransformName } from '@warp-drive/core-types/symbols';\n\nfunction isNumber(value: number) {\n  return value === value && value !== Infinity && value !== -Infinity;\n}\n\n/**\n  The `NumberTransform` class is used to serialize and deserialize\n  numeric attributes on Ember Data record objects. This transform is\n  used when `number` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/score.js\n  import Model, { attr, belongsTo } from '@ember-data/model';\n\n  export default class ScoreModel extends Model {\n    @attr('number') value;\n    @belongsTo('player') player;\n    @attr('date') date;\n  }\n  ```\n\n  @class NumberTransform\n  @public\n */\nexport class NumberTransform {\n  deserialize(serialized: string | number | null | undefined, _options?: Record<string, unknown>): number | null {\n    if (serialized === '' || serialized === null || serialized === undefined) {\n      return null;\n    } else {\n      const transformed = Number(serialized);\n\n      return isNumber(transformed) ? transformed : null;\n    }\n  }\n\n  serialize(deserialized: string | number | null | undefined, _options?: Record<string, unknown>): number | null {\n    if (deserialized === '' || deserialized === null || deserialized === undefined) {\n      return null;\n    } else {\n      const transformed = Number(deserialized);\n\n      return isNumber(transformed) ? transformed : null;\n    }\n  }\n\n  [TransformName] = 'number' as const;\n\n  static create() {\n    return new this();\n  }\n}\n","/**\n  @module @ember-data/serializer\n*/\n\nimport { TransformName } from '@warp-drive/core-types/symbols';\n\n/**\n  The `StringTransform` class is used to serialize and deserialize\n  string attributes on Ember Data record objects. This transform is\n  used when `string` is passed as the type parameter to the\n  [attr](/ember-data/release/functions/@ember-data%2Fmodel/attr) function.\n\n  Usage\n\n  ```app/models/user.js\n  import Model, { attr, belongsTo } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('boolean') isAdmin;\n    @attr('string') name;\n    @attr('string') email;\n  }\n  ```\n\n  @class StringTransform\n  @public\n */\nexport class StringTransform {\n  deserialize(serialized: unknown, _options?: Record<string, unknown>): string | null {\n    return !serialized && serialized !== '' ? null : String(serialized);\n  }\n  serialize(deserialized: unknown, _options?: Record<string, unknown>): string | null {\n    return !deserialized && deserialized !== '' ? null : String(deserialized);\n  }\n\n  [TransformName] = 'string' as const;\n\n  static create() {\n    return new this();\n  }\n}\n"],"names":["Transform","EmberObject","BooleanTransform","deserialize","serialized","options","undefined","allowNull","test","serialize","deserialized","Boolean","create","DateTransform","_options","offset","indexOf","length","Date","slice","date","isNaN","toISOString","TransformName","isNumber","value","Infinity","NumberTransform","transformed","Number","StringTransform","String"],"mappings":"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"}