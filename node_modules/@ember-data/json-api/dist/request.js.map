{"version":3,"file":"request.js","sources":["../src/-private/builders/-utils.ts","../src/-private/builders/find-record.ts","../src/-private/builders/query.ts","../src/-private/builders/save-record.ts","../src/-private/serialize.ts"],"sourcesContent":["/**\n * @module @ember-data/json-api/request\n */\nimport type { BuildURLConfig, UrlOptions } from '@ember-data/request-utils';\nimport { buildQueryParams as buildParams, setBuildURLConfig as setConfig } from '@ember-data/request-utils';\nimport type { QueryParamsSource } from '@warp-drive/core-types/params';\nimport type { CacheOptions, ConstrainedRequestOptions } from '@warp-drive/core-types/request';\n\nexport interface JSONAPIConfig extends BuildURLConfig {\n  profiles?: {\n    pagination?: string;\n    [key: string]: string | undefined;\n  };\n  extensions?: {\n    atomic?: string;\n    [key: string]: string | undefined;\n  };\n}\n\nconst JsonApiAccept = 'application/vnd.api+json';\nconst DEFAULT_CONFIG: JSONAPIConfig = { host: '', namespace: '' };\nexport let CONFIG: JSONAPIConfig = DEFAULT_CONFIG;\nexport let ACCEPT_HEADER_VALUE = 'application/vnd.api+json';\n\n/**\n * Allows setting extensions and profiles to be used in the `Accept` header.\n *\n * Extensions and profiles are keyed by their namespace with the value being\n * their URI.\n *\n * Example:\n *\n * ```ts\n * setBuildURLConfig({\n *   extensions: {\n *     atomic: 'https://jsonapi.org/ext/atomic'\n *   },\n *   profiles: {\n *     pagination: 'https://jsonapi.org/profiles/ethanresnick/cursor-pagination'\n *   }\n * });\n * ```\n *\n * This also sets the global configuration for `buildBaseURL`\n * for host and namespace values for the application\n * in the `@ember-data/request-utils` package.\n *\n * These values may still be overridden by passing\n * them to buildBaseURL directly.\n *\n * This method may be called as many times as needed\n *\n * ```ts\n * type BuildURLConfig = {\n *   host: string;\n *   namespace: string'\n * }\n * ```\n *\n * @method setBuildURLConfig\n * @static\n * @public\n * @for @ember-data/json-api/request\n * @param {BuildURLConfig} config\n * @return void\n */\nexport function setBuildURLConfig(config: JSONAPIConfig): void {\n  CONFIG = Object.assign({}, DEFAULT_CONFIG, config);\n\n  if (config.profiles || config.extensions) {\n    let accept = JsonApiAccept;\n    if (config.profiles) {\n      const profiles = Object.values(config.profiles);\n      if (profiles.length) {\n        accept += ';profile=\"' + profiles.join(' ') + '\"';\n      }\n    }\n    if (config.extensions) {\n      const extensions = Object.values(config.extensions);\n      if (extensions.length) {\n        accept += ';ext=' + extensions.join(' ');\n      }\n    }\n    ACCEPT_HEADER_VALUE = accept;\n  }\n\n  setConfig(config);\n}\n\nexport function copyForwardUrlOptions(urlOptions: UrlOptions, options: ConstrainedRequestOptions): void {\n  if ('host' in options) {\n    urlOptions.host = options.host;\n  }\n  if ('namespace' in options) {\n    urlOptions.namespace = options.namespace;\n  }\n  if ('resourcePath' in options) {\n    urlOptions.resourcePath = options.resourcePath;\n  }\n}\n\nexport function extractCacheOptions(options: ConstrainedRequestOptions) {\n  const cacheOptions: CacheOptions = {};\n  if ('reload' in options) {\n    cacheOptions.reload = options.reload;\n  }\n  if ('backgroundReload' in options) {\n    cacheOptions.backgroundReload = options.backgroundReload;\n  }\n  return cacheOptions;\n}\n\ninterface RelatedObject {\n  [key: string]: string | string[] | RelatedObject;\n}\n\nexport type JsonApiQuery = {\n  include?: string | string[] | RelatedObject;\n  fields?: Record<string, string | string[]>;\n  page?: {\n    size?: number;\n    after?: string;\n    before?: string;\n  };\n};\n\nfunction isJsonApiQuery(query: JsonApiQuery | QueryParamsSource): query is JsonApiQuery {\n  if ('include' in query && query.include && typeof query.include === 'object') {\n    return true;\n  }\n  if ('fields' in query || 'page' in query) {\n    return true;\n  }\n  return false;\n}\n\nfunction collapseIncludePaths(basePath: string, include: RelatedObject, paths: string[]) {\n  const keys = Object.keys(include);\n  for (let i = 0; i < keys.length; i++) {\n    // the key is always included too\n    paths.push(`${basePath}.${keys[i]}`);\n    const key = keys[i];\n    const value = include[key];\n\n    // include: { 'company': 'field1,field2' }\n    if (typeof value === 'string') {\n      value.split(',').forEach((field) => {\n        paths.push(`${basePath}.${key}.${field}`);\n      });\n\n      // include: { 'company': ['field1', 'field2'] }\n    } else if (Array.isArray(value)) {\n      value.forEach((field) => {\n        paths.push(`${basePath}.${key}.${field}`);\n      });\n\n      // include: { 'company': { 'nested': 'field1,field2' } }\n    } else {\n      collapseIncludePaths(`${basePath}.${key}`, value, paths);\n    }\n  }\n}\n\n/**\n * Sorts query params by both key and value, returning a query params string\n *\n * Treats `included` specially, splicing it into an array if it is a string and sorting the array.\n *   - If `included` is an object we build paths dynamically for you\n * Treats `fields` specially, building JSON:API partial fields params from an object\n * Treats `page` specially, building cursor-pagination profile page params from an object\n *\n * ```ts\n * const params = buildQueryParams({\n *  include: {\n *    company: {\n *      locations: 'address'\n *    }\n *  },\n *   fields: {\n *     company: ['name', 'ticker'],\n *     person: 'name'\n *   },\n *   page: {\n *     size: 10,\n *     after: 'abc',\n *   }\n * });\n *\n * // => 'fields[company]=name,ticker&fields[person]=name&include=company.locations,company.locations.address&page[after]=abc&page[size]=10'\n * ```\n *\n * Options:\n * - arrayFormat: 'bracket' | 'indices' | 'repeat' | 'comma'\n *\n * 'bracket': appends [] to the key for every value e.g. `ids[]=1&ids[]=2`\n * 'indices': appends [i] to the key for every value e.g. `ids[0]=1&ids[1]=2`\n * 'repeat': appends the key for every value e.g. `ids=1&ids=2`\n * 'comma' (default): appends the key once with a comma separated list of values e.g. `ids=1,2`\n *\n * @method buildQueryParams\n * @static\n * @public\n * @for @ember-data/json-api/request\n * @param {URLSearchParams | object} params\n * @param {object} [options]\n * @return {string} A sorted query params string without the leading `?`\n */\nexport function buildQueryParams(query: JsonApiQuery | QueryParamsSource): string {\n  if (query instanceof URLSearchParams) {\n    return buildParams(query);\n  }\n\n  if (!isJsonApiQuery(query)) {\n    return buildParams(query);\n  }\n\n  const { include, fields, page, ...rest } = query;\n  const finalQuery: QueryParamsSource = {\n    ...rest,\n  };\n\n  if ('include' in query) {\n    // include: { 'company': 'field1,field2' }\n    // include: { 'company': ['field1', 'field2'] }\n    // include: { 'company': { 'nested': 'field1,field2' } }\n    // include: { 'company': { 'nested': ['field1', 'field2'] } }\n    if (include && !Array.isArray(include) && typeof include === 'object') {\n      const includePaths: string[] = [];\n      collapseIncludePaths('', include, includePaths);\n      finalQuery.include = includePaths.sort();\n\n      // include: 'field1,field2'\n      // include: ['field1', 'field2']\n    } else {\n      finalQuery.include = include as string;\n    }\n  }\n\n  if (fields) {\n    const keys = Object.keys(fields).sort();\n    for (let i = 0; i < keys.length; i++) {\n      const resourceType = keys[i];\n      const value = fields[resourceType];\n\n      // fields: { 'company': ['field1', 'field2'] }\n      if (Array.isArray(value)) {\n        finalQuery[`fields[${resourceType}]`] = value.sort().join(',');\n\n        // fields: { 'company': 'field1' }\n        // fields: { 'company': 'field1,field2' }\n      } else {\n        finalQuery[`fields[${resourceType}]`] = value.split(',').sort().join(',');\n      }\n    }\n  }\n\n  if (page) {\n    const keys = Object.keys(page).sort() as Array<'size' | 'after' | 'before'>;\n    keys.forEach((key) => {\n      const value = page[key];\n      finalQuery[`page[${key}]`] = value!;\n    });\n  }\n\n  return buildParams(finalQuery);\n}\n","/**\n * @module @ember-data/json-api/request\n */\nimport { buildBaseURL, buildQueryParams, type FindRecordUrlOptions } from '@ember-data/request-utils';\nimport { pluralize } from '@ember-data/request-utils/string';\nimport type { TypeFromInstance } from '@warp-drive/core-types/record';\nimport type {\n  FindRecordOptions,\n  FindRecordRequestOptions,\n  RemotelyAccessibleIdentifier,\n} from '@warp-drive/core-types/request';\nimport type { SingleResourceDataDocument } from '@warp-drive/core-types/spec/document';\n\nimport { ACCEPT_HEADER_VALUE, copyForwardUrlOptions, extractCacheOptions } from './-utils';\n\n/**\n * Builds request options to fetch a single resource by a known id or identifier\n * configured for the url and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const data = await store.request(findRecord('person', '1'));\n * ```\n *\n * **With Options**\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const options = findRecord('person', '1', { include: ['pets', 'friends'] });\n * const data = await store.request(options);\n * ```\n *\n * **With an Identifier**\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const options = findRecord({ type: 'person', id: '1' }, { include: ['pets', 'friends'] });\n * const data = await store.request(options);\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const options = findRecord('person', '1', { include: ['pets', 'friends'] }, { namespace: 'api/v2' });\n * const data = await store.request(options);\n * ```\n *\n * @method findRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param identifier\n * @param options\n */\n\nexport type FindRecordResultDocument<T> = Omit<SingleResourceDataDocument<T>, 'data'> & { data: T };\n\nexport function findRecord<T>(\n  identifier: RemotelyAccessibleIdentifier<TypeFromInstance<T>>,\n  options?: FindRecordOptions<T>\n): FindRecordRequestOptions<T, FindRecordResultDocument<T>>;\nexport function findRecord(\n  identifier: RemotelyAccessibleIdentifier,\n  options?: FindRecordOptions\n): FindRecordRequestOptions;\nexport function findRecord<T>(\n  type: TypeFromInstance<T>,\n  id: string,\n  options?: FindRecordOptions<T>\n): FindRecordRequestOptions<T, FindRecordResultDocument<T>>;\nexport function findRecord(type: string, id: string, options?: FindRecordOptions): FindRecordRequestOptions;\nexport function findRecord(\n  arg1: string | RemotelyAccessibleIdentifier,\n  arg2: string | FindRecordOptions | undefined,\n  arg3?: FindRecordOptions\n): FindRecordRequestOptions {\n  const identifier: RemotelyAccessibleIdentifier = typeof arg1 === 'string' ? { type: arg1, id: arg2 as string } : arg1;\n  const options = ((typeof arg1 === 'string' ? arg3 : arg2) || {}) as FindRecordOptions;\n  const cacheOptions = extractCacheOptions(options);\n  const urlOptions: FindRecordUrlOptions = {\n    identifier,\n    op: 'findRecord',\n    resourcePath: pluralize(identifier.type),\n  };\n\n  copyForwardUrlOptions(urlOptions, options);\n\n  const url = buildBaseURL(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n\n  return {\n    url: options.include?.length\n      ? `${url}?${buildQueryParams({ include: options.include }, options.urlParamsSettings)}`\n      : url,\n    method: 'GET',\n    headers,\n    cacheOptions,\n    op: 'findRecord',\n    records: [identifier],\n  };\n}\n","/**\n * @module @ember-data/json-api/request\n */\nimport { buildBaseURL, buildQueryParams, type QueryUrlOptions } from '@ember-data/request-utils';\nimport { pluralize } from '@ember-data/request-utils/string';\nimport type { QueryParamsSource } from '@warp-drive/core-types/params';\nimport type { TypedRecordInstance, TypeFromInstance } from '@warp-drive/core-types/record';\nimport type {\n  CacheOptions,\n  ConstrainedRequestOptions,\n  PostQueryRequestOptions,\n  QueryRequestOptions,\n} from '@warp-drive/core-types/request';\nimport type { CollectionResourceDataDocument } from '@warp-drive/core-types/spec/document';\n\nimport { ACCEPT_HEADER_VALUE, copyForwardUrlOptions, extractCacheOptions } from './-utils';\n\n/**\n * Builds request options to query for resources, usually by a primary\n * type, configured for the url and header expectations of most JSON:API APIs.\n *\n * The key difference between this and `postQuery` is that this method will send the query\n * as query params in the url of a \"GET\" request instead of as the JSON body of a \"POST\"\n * request.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { query } from '@ember-data/json-api/request';\n *\n * const data = await store.request(query('person'));\n * ```\n *\n * **With Query Params**\n *\n * ```ts\n * import { query } from '@ember-data/json-api/request';\n *\n * const options = query('person', { include: ['pets', 'friends'] });\n * const data = await store.request(options);\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { query } from '@ember-data/json-api/request';\n *\n * const options = query('person', { include: ['pets', 'friends'] }, { reload: true });\n * const data = await store.request(options);\n * ```\n *\n * @method query\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param identifier\n * @param query\n * @param options\n */\nexport function query<T extends TypedRecordInstance>(\n  type: TypeFromInstance<T>,\n  query?: QueryParamsSource<T>,\n  options?: ConstrainedRequestOptions\n): QueryRequestOptions<T, CollectionResourceDataDocument<T>>;\nexport function query(\n  type: string,\n  query?: QueryParamsSource,\n  options?: ConstrainedRequestOptions\n): QueryRequestOptions;\nexport function query(\n  type: string,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  query: QueryParamsSource = {},\n  options: ConstrainedRequestOptions = {}\n): QueryRequestOptions {\n  const cacheOptions = extractCacheOptions(options);\n  const urlOptions: QueryUrlOptions = {\n    identifier: { type },\n    op: 'query',\n    resourcePath: pluralize(type),\n  };\n\n  copyForwardUrlOptions(urlOptions, options);\n\n  const url = buildBaseURL(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n  const queryString = buildQueryParams(query, options.urlParamsSettings);\n\n  return {\n    url: queryString ? `${url}?${queryString}` : url,\n    method: 'GET',\n    headers,\n    cacheOptions,\n    op: 'query',\n  };\n}\n\n/**\n * Builds request options to query for resources, usually by a primary\n * type, configured for the url and header expectations of most JSON:API APIs.\n *\n * The key difference between this and `query` is that this method will send the query\n * as the JSON body of a \"POST\" request instead of as query params in the url of a \"GET\"\n * request.\n *\n * A CacheKey is generated from the url and query params, and used to cache the response\n * in the store.\n *\n * ```ts\n * import { postQuery } from '@ember-data/json-api/request';\n *\n * const options = postQuery('person', { include: ['pets', 'friends'] });\n * const data = await store.request(options);\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { postQuery } from '@ember-data/json-api/request';\n *\n * const options = postQuery('person', { include: ['pets', 'friends'] }, { reload: true });\n * const data = await store.request(options);\n * ```\n *\n * @method postQuery\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param identifier\n * @param query\n * @param options\n */\nexport function postQuery<T>(\n  type: TypeFromInstance<T>,\n  query?: QueryParamsSource,\n  options?: ConstrainedRequestOptions\n): PostQueryRequestOptions<T, CollectionResourceDataDocument<T>>;\nexport function postQuery(\n  type: string,\n  query?: QueryParamsSource,\n  options?: ConstrainedRequestOptions\n): PostQueryRequestOptions;\nexport function postQuery(\n  type: string,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  query: QueryParamsSource = {},\n  options: ConstrainedRequestOptions = {}\n): PostQueryRequestOptions {\n  const cacheOptions = extractCacheOptions(options);\n  const urlOptions: QueryUrlOptions = {\n    identifier: { type },\n    op: 'query',\n    resourcePath: options.resourcePath ?? pluralize(type),\n  };\n\n  copyForwardUrlOptions(urlOptions, options);\n\n  const url = buildBaseURL(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n\n  const queryData = structuredClone(query);\n  cacheOptions.key = cacheOptions.key ?? `${url}?${buildQueryParams(queryData, options.urlParamsSettings)}`;\n\n  return {\n    url,\n    method: 'POST',\n    body: JSON.stringify(query),\n    headers,\n    cacheOptions: cacheOptions as CacheOptions & { key: string },\n    op: 'query',\n  };\n}\n","import {\n  buildBaseURL,\n  type CreateRecordUrlOptions,\n  type DeleteRecordUrlOptions,\n  type UpdateRecordUrlOptions,\n} from '@ember-data/request-utils';\nimport { pluralize } from '@ember-data/request-utils/string';\nimport { recordIdentifierFor } from '@ember-data/store';\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableExistingRecordIdentifier, StableRecordIdentifier } from '@warp-drive/core-types/identifier';\nimport type { TypedRecordInstance } from '@warp-drive/core-types/record';\nimport type {\n  ConstrainedRequestOptions,\n  CreateRequestOptions,\n  DeleteRequestOptions,\n  UpdateRequestOptions,\n} from '@warp-drive/core-types/request';\nimport type { SingleResourceDataDocument } from '@warp-drive/core-types/spec/document';\n\nimport { ACCEPT_HEADER_VALUE, copyForwardUrlOptions } from './-utils';\n\nfunction isExisting(identifier: StableRecordIdentifier): identifier is StableExistingRecordIdentifier {\n  return 'id' in identifier && identifier.id !== null && 'type' in identifier && identifier.type !== null;\n}\n\n/**\n * Builds request options to delete record for resources,\n * configured for the url, method and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { deleteRecord } from '@ember-data/json-api/request';\n *\n * const person = store.peekRecord('person', '1');\n *\n * // mark record as deleted\n * store.deleteRecord(person);\n *\n * // persist deletion\n * const data = await store.request(deleteRecord(person));\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { deleteRecord } from '@ember-data/json-api/request';\n *\n * const person = store.peekRecord('person', '1');\n *\n * // mark record as deleted\n * store.deleteRecord(person);\n *\n * // persist deletion\n * const options = deleteRecord(person, { namespace: 'api/v1' });\n * const data = await store.request(options);\n * ```\n *\n * @method deleteRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param record\n * @param options\n */\nexport function deleteRecord<T>(record: T, options?: ConstrainedRequestOptions): DeleteRequestOptions<T>;\nexport function deleteRecord(record: unknown, options?: ConstrainedRequestOptions): DeleteRequestOptions;\nexport function deleteRecord(record: unknown, options: ConstrainedRequestOptions = {}): DeleteRequestOptions {\n  const identifier = recordIdentifierFor(record);\n  assert(`Expected to be given a record instance`, identifier);\n  assert(`Cannot delete a record that does not have an associated type and id.`, isExisting(identifier));\n\n  const urlOptions: DeleteRecordUrlOptions = {\n    identifier: identifier,\n    op: 'deleteRecord',\n    resourcePath: pluralize(identifier.type),\n  };\n\n  copyForwardUrlOptions(urlOptions, options);\n\n  const url = buildBaseURL(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n\n  return {\n    url,\n    method: 'DELETE',\n    headers,\n    op: 'deleteRecord',\n    data: {\n      record: identifier,\n    },\n    records: [identifier],\n  };\n}\n\n/**\n * Builds request options to create new record for resources,\n * configured for the url, method and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { createRecord } from '@ember-data/json-api/request';\n *\n * const person = store.createRecord('person', { name: 'Ted' });\n * const data = await store.request(createRecord(person));\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { createRecord } from '@ember-data/json-api/request';\n *\n * const person = store.createRecord('person', { name: 'Ted' });\n * const options = createRecord(person, { namespace: 'api/v1' });\n * const data = await store.request(options);\n * ```\n *\n * @method createRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param record\n * @param options\n */\nexport function createRecord<T>(record: T, options?: ConstrainedRequestOptions): CreateRequestOptions<T>;\nexport function createRecord(record: unknown, options?: ConstrainedRequestOptions): CreateRequestOptions;\nexport function createRecord(record: unknown, options: ConstrainedRequestOptions = {}): CreateRequestOptions {\n  const identifier = recordIdentifierFor(record);\n  assert(`Expected to be given a record instance`, identifier);\n\n  const urlOptions: CreateRecordUrlOptions = {\n    identifier: identifier,\n    op: 'createRecord',\n    resourcePath: pluralize(identifier.type),\n  };\n\n  copyForwardUrlOptions(urlOptions, options);\n\n  const url = buildBaseURL(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n\n  return {\n    url,\n    method: 'POST',\n    headers,\n    op: 'createRecord',\n    data: {\n      record: identifier,\n    },\n    records: [identifier],\n  };\n}\n\n/**\n * Builds request options to update existing record for resources,\n * configured for the url, method and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { updateRecord } from '@ember-data/json-api/request';\n *\n * const person = store.peekRecord('person', '1');\n * person.name = 'Chris';\n * const data = await store.request(updateRecord(person));\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `patch` - Allows caller to specify whether to use a PATCH request instead of a PUT request, defaults to `false`.\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { updateRecord } from '@ember-data/json-api/request';\n *\n * const person = store.peekRecord('person', '1');\n * person.name = 'Chris';\n * const options = updateRecord(person, { patch: true });\n * const data = await store.request(options);\n * ```\n *\n * @method updateRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param record\n * @param options\n */\nexport function updateRecord<T extends TypedRecordInstance, RT extends TypedRecordInstance = T>(\n  record: T,\n  options?: ConstrainedRequestOptions & { patch?: boolean }\n): UpdateRequestOptions<T, SingleResourceDataDocument<RT>>;\nexport function updateRecord(\n  record: unknown,\n  options?: ConstrainedRequestOptions & { patch?: boolean }\n): UpdateRequestOptions;\nexport function updateRecord(\n  record: unknown,\n  options: ConstrainedRequestOptions & { patch?: boolean } = {}\n): UpdateRequestOptions {\n  const identifier = recordIdentifierFor(record);\n  assert(`Expected to be given a record instance`, identifier);\n  assert(`Cannot update a record that does not have an associated type and id.`, isExisting(identifier));\n\n  const urlOptions: UpdateRecordUrlOptions = {\n    identifier: identifier,\n    op: 'updateRecord',\n    resourcePath: pluralize(identifier.type),\n  };\n\n  copyForwardUrlOptions(urlOptions, options);\n\n  const url = buildBaseURL(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', ACCEPT_HEADER_VALUE);\n\n  return {\n    url,\n    method: options.patch ? 'PATCH' : 'PUT',\n    headers,\n    op: 'updateRecord',\n    data: {\n      record: identifier,\n    },\n    records: [identifier],\n  };\n}\n\n/**\n * Builds request options to update existing record for resources,\n * configured for the url and header expectations of most JSON:API APIs\n * for a PATCH request.\n *\n * Note: This is a convenience method that calls `updateRecord` with the\n * supplied request with the `patch` option set to `true`.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { patchRecord } from '@ember-data/json-api/request';\n *\n * const person = store.peekRecord('person', '1');\n * person.name = 'Chris';\n * const data = await store.request(patchRecord(person));\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's CachePolicy, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's CachePolicy,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { patchRecord } from '@ember-data/json-api/request';\n *\n * const person = store.peekRecord('person', '1');\n * person.name = 'Chris';\n * const options = patchRecord(person);\n * const data = await store.request(options);\n * ```\n *\n * @method patchRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param record\n * @param options\n */\nexport function patchRecord<T>(record: T, options?: ConstrainedRequestOptions): UpdateRequestOptions<T>;\nexport function patchRecord(record: unknown, options?: ConstrainedRequestOptions): UpdateRequestOptions;\nexport function patchRecord(record: unknown, options: ConstrainedRequestOptions = {}): UpdateRequestOptions {\n  const opts = options as ConstrainedRequestOptions & { patch: true };\n  opts.patch = true;\n  return updateRecord(record, opts);\n}\n","/**\n * @module @ember-data/json-api/request\n */\nimport { assert } from '@warp-drive/build-config/macros';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { Cache } from '@warp-drive/core-types/cache';\nimport type { Relationship } from '@warp-drive/core-types/cache/relationship';\nimport type { Value } from '@warp-drive/core-types/json/raw';\nimport type { InnerRelationshipDocument, ResourceObject } from '@warp-drive/core-types/spec/json-api-raw';\n\ntype ChangedRelationshipData = InnerRelationshipDocument;\n\nexport type JsonApiResourcePatch =\n  | {\n      type: string;\n      id: string;\n      attributes?: Record<string, Value>;\n      relationships?: Record<string, ChangedRelationshipData>;\n    }\n  | {\n      type: string;\n      id: null;\n      lid: string;\n      attributes?: Record<string, Value>;\n      relationships?: Record<string, ChangedRelationshipData>;\n    };\n\n/**\n * Serializes the current state of a resource or array of resources for use with POST or PUT requests.\n *\n * @method serializeResources\n * @static\n * @public\n * @for @ember-data/json-api/request\n * @param {Cache} cache}\n * @param {StableRecordIdentifier} identifier\n * @return {object} An object with a `data` property containing the serialized resource patch\n */\nexport function serializeResources(cache: Cache, identifiers: StableRecordIdentifier): { data: ResourceObject };\nexport function serializeResources(cache: Cache, identifiers: StableRecordIdentifier[]): { data: ResourceObject[] };\nexport function serializeResources(\n  cache: Cache,\n  identifiers: StableRecordIdentifier | StableRecordIdentifier[]\n): { data: ResourceObject | ResourceObject[] } {\n  return {\n    data: Array.isArray(identifiers)\n      ? identifiers.map((identifier) => _serializeResource(cache, identifier))\n      : _serializeResource(cache, identifiers),\n  };\n}\n\ntype SerializedRef =\n  | {\n      id: string;\n      type: string;\n    }\n  | { id: null; lid: string; type: string };\n\nfunction fixRef({\n  id,\n  lid,\n  type,\n}: { id: string; lid?: string; type: string } | { id: null; lid: string; type: string }): SerializedRef {\n  if (id !== null) {\n    return { id, type };\n  }\n  return { id, lid, type };\n}\n\nfunction fixRelData(\n  rel: Relationship['data'] | InnerRelationshipDocument['data']\n): SerializedRef | SerializedRef[] | null {\n  if (Array.isArray(rel)) {\n    return rel.map((ref) => fixRef(ref));\n  } else if (typeof rel === 'object' && rel !== null) {\n    return fixRef(rel);\n  }\n  return null;\n}\n\nfunction _serializeResource(cache: Cache, identifier: StableRecordIdentifier): ResourceObject {\n  const { id, lid, type } = identifier;\n  // peek gives us everything we want, but since its referentially the same data\n  // as is in the cache we clone it to avoid any accidental mutations\n  const record = structuredClone(cache.peek(identifier)) as ResourceObject;\n  assert(\n    `A record with id ${String(id)} and type ${type} for lid ${lid} was not found not in the supplied Cache.`,\n    record\n  );\n\n  // remove lid from anything that has an ID and slice any relationship arrays\n  if (record.id !== null) {\n    delete record.lid;\n  }\n\n  if (record.relationships) {\n    for (const key of Object.keys(record.relationships)) {\n      const relationship = record.relationships[key];\n      relationship.data = fixRelData(relationship.data);\n      if (Array.isArray(relationship.data)) {\n        relationship.data = relationship.data.map((ref) => fixRef(ref));\n      } else if (typeof relationship.data === 'object' && relationship.data !== null) {\n        relationship.data = fixRef(relationship.data);\n      }\n    }\n  }\n\n  return record;\n}\n\n/**\n * Serializes changes to a resource for use with PATCH requests.\n *\n * Only attributes which are changed are serialized.\n * Only relationships which are changed are serialized.\n *\n * Collection relationships serialize the collection as a whole.\n *\n * If you would like to serialize updates to a collection more granularly\n * (for instance, as operations) request the diff from the store and\n * serialize as desired:\n *\n * ```ts\n * const relationshipDiffMap = cache.changedRelationships(identifier);\n * ```\n *\n * @method serializePatch\n * @static\n * @public\n * @for @ember-data/json-api/request\n * @param {Cache} cache}\n * @param {StableRecordIdentifier} identifier\n * @return {object} An object with a `data` property containing the serialized resource patch\n */\nexport function serializePatch(\n  cache: Cache,\n  identifier: StableRecordIdentifier\n  // options: { include?: string[] } = {}\n): { data: JsonApiResourcePatch } {\n  const { id, lid, type } = identifier;\n  assert(\n    `A record with id ${String(id)} and type ${type} for lid ${lid} was not found not in the supplied Cache.`,\n    cache.peek(identifier)\n  );\n\n  const data: JsonApiResourcePatch =\n    id === null\n      ? { type, lid, id }\n      : {\n          type,\n          id,\n        };\n\n  if (cache.hasChangedAttrs(identifier)) {\n    const attrsChanges = cache.changedAttrs(identifier);\n    const attributes: ResourceObject['attributes'] = {};\n\n    Object.keys(attrsChanges).forEach((key) => {\n      const change = attrsChanges[key];\n      const newVal = change[1];\n      attributes[key] = newVal === undefined ? null : structuredClone(newVal);\n    });\n\n    data.attributes = attributes;\n  }\n\n  const changedRelationships = cache.changedRelationships(identifier);\n  if (changedRelationships.size) {\n    const relationships: Record<string, ChangedRelationshipData> = {};\n    changedRelationships.forEach((diff, key) => {\n      relationships[key] = { data: fixRelData(diff.localState) } as ChangedRelationshipData;\n    });\n\n    data.relationships = relationships;\n  }\n\n  return { data };\n}\n"],"names":["JsonApiAccept","DEFAULT_CONFIG","host","namespace","ACCEPT_HEADER_VALUE","setBuildURLConfig","config","Object","assign","profiles","extensions","accept","values","length","join","setConfig","copyForwardUrlOptions","urlOptions","options","resourcePath","extractCacheOptions","cacheOptions","reload","backgroundReload","findRecord","arg1","arg2","arg3","identifier","type","id","op","pluralize","url","buildBaseURL","headers","Headers","append","include","buildQueryParams","urlParamsSettings","method","records","query","queryString","postQuery","queryData","structuredClone","key","body","JSON","stringify","isExisting","deleteRecord","record","recordIdentifierFor","macroCondition","getGlobalConfig","WarpDrive","env","DEBUG","test","Error","data","createRecord","updateRecord","patch","serializeResources","cache","identifiers","Array","isArray","map","_serializeResource","fixRef","lid","fixRelData","rel","ref","peek","String","relationships","keys","relationship","serializePatch","hasChangedAttrs","attrsChanges","changedAttrs","attributes","forEach","change","newVal","undefined","changedRelationships","size","diff","localState"],"mappings":"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"}