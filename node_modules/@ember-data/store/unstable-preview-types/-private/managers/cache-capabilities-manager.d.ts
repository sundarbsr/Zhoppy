declare module '@ember-data/store/-private/managers/cache-capabilities-manager' {
  import type { StableDocumentIdentifier, StableRecordIdentifier } from '@warp-drive/core-types/identifier';
  import type { CacheCapabilitiesManager as StoreWrapper } from '@ember-data/store/-types/q/cache-capabilities-manager';
  import type { SchemaService } from '@ember-data/store/-types/q/schema-service';
  import type { IdentifierCache } from '@ember-data/store/-private/caches/identifier-cache';
  import type { Store } from '@ember-data/store/-private/store-service';
  import type { NotificationType } from '@ember-data/store/-private/managers/notification-manager';
  /**
    @module @ember-data/store
  */
  export interface CacheCapabilitiesManager {
      getSchemaDefinitionService(): SchemaService;
  }
  export class CacheCapabilitiesManager implements StoreWrapper {
      _willNotify: boolean;
      _pendingNotifies: Map<StableRecordIdentifier, Set<string>>;
      _store: Store;
      constructor(_store: Store);
      get identifierCache(): IdentifierCache;
      _scheduleNotification(identifier: StableRecordIdentifier, key: string): void;
      _flushNotifications(): void;
      notifyChange(identifier: StableRecordIdentifier, namespace: 'added' | 'removed', key: null): void;
      notifyChange(identifier: StableDocumentIdentifier, namespace: 'added' | 'updated' | 'removed', key: null): void;
      notifyChange(identifier: StableRecordIdentifier, namespace: NotificationType, key: string | null): void;
      get schema(): SchemaService;
      setRecordId(identifier: StableRecordIdentifier, id: string): void;
      hasRecord(identifier: StableRecordIdentifier): boolean;
      disconnectRecord(identifier: StableRecordIdentifier): void;
  }
}
//# sourceMappingURL=cache-capabilities-manager.d.ts.map