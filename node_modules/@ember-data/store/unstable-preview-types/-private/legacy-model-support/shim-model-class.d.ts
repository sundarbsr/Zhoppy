declare module '@ember-data/store/-private/legacy-model-support/shim-model-class' {
  import type { TypedRecordInstance, TypeFromInstance } from '@warp-drive/core-types/record';
  import type { LegacyAttributeField, LegacyRelationshipField } from '@warp-drive/core-types/schema/fields';
  import type { KeyOrString, ModelSchema } from '@ember-data/store/-types/q/ds-model';
  import type { Store } from '@ember-data/store/-private/store-service';
  export function getShimClass<T>(store: Store, modelName: T extends TypedRecordInstance ? TypeFromInstance<T> : string): ShimModelClass<T>;
  export default class ShimModelClass<T = unknown> implements ModelSchema<T> {
      __store: Store;
      modelName: T extends TypedRecordInstance ? TypeFromInstance<T> : string;
      constructor(store: Store, modelName: T extends TypedRecordInstance ? TypeFromInstance<T> : string);
      get fields(): Map<KeyOrString<T>, 'attribute' | 'belongsTo' | 'hasMany'>;
      get attributes(): Map<KeyOrString<T>, LegacyAttributeField>;
      get relationshipsByName(): Map<KeyOrString<T>, LegacyRelationshipField>;
      eachAttribute<K extends KeyOrString<T>>(callback: (key: K, attribute: LegacyAttributeField) => void, binding?: T): void;
      eachRelationship<K extends KeyOrString<T>>(callback: (key: K, relationship: LegacyRelationshipField) => void, binding?: T): void;
      eachTransformedAttribute<K extends KeyOrString<T>>(callback: (key: K, type: string | null) => void, binding?: T): void;
  }
}
//# sourceMappingURL=shim-model-class.d.ts.map