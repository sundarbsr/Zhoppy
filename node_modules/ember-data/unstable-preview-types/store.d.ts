declare module 'ember-data/store' {
  import { adapterFor, normalize, pushPayload, serializeRecord, serializerFor } from '@ember-data/legacy-compat';
  import type { FetchManager } from '@ember-data/legacy-compat/-private';
  import type Model from '@ember-data/model';
  import type { ModelStore } from '@ember-data/model/-private';
  import BaseStore from '@ember-data/store';
  import type { CacheCapabilitiesManager, ModelSchema, SchemaService } from '@ember-data/store/types';
  import type { StableRecordIdentifier } from '@warp-drive/core-types';
  import type { Cache } from '@warp-drive/core-types/cache';
  import type { TypeFromInstance } from '@warp-drive/core-types/record';
  export default class Store extends BaseStore {
      _fetchManager: FetchManager;
      constructor(args?: Record<string, unknown>);
      createSchemaService(): SchemaService;
      createCache(storeWrapper: CacheCapabilitiesManager): Cache;
      instantiateRecord(this: ModelStore, identifier: StableRecordIdentifier, createRecordArgs: Record<string, unknown>): Model;
      teardownRecord(record: Model): void;
      modelFor<T>(type: TypeFromInstance<T>): ModelSchema<T>;
      modelFor(type: string): ModelSchema;
      adapterFor: typeof adapterFor;
      serializerFor: typeof serializerFor;
      pushPayload: typeof pushPayload;
      normalize: typeof normalize;
      serializeRecord: typeof serializeRecord;
      destroy(): void;
  }
}
//# sourceMappingURL=store.d.ts.map